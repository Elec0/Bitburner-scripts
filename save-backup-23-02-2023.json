{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":44,\"max\":44},\"skills\":{\"hacking\":316,\"strength\":315,\"defense\":349,\"dexterity\":380,\"agility\":152,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":55383908.31152367,\"strength\":672460.3367266447,\"defense\":424222.1499246339,\"dexterity\":1203905.5121256148,\"agility\":136037.81831551707,\"charisma\":10.497336850000003,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5659663375775186,\"hacking_speed\":1.4540201475817414,\"hacking_money\":1.8561753125274643,\"hacking_grow\":1.2912523913234533,\"hacking\":2.440158679283829,\"strength\":3.4373802257459283,\"defense\":4.071973498191331,\"dexterity\":3.8308698042194758,\"agility\":2.1309669921754866,\"charisma\":2.3144803501814284,\"hacking_exp\":4.89029885685512,\"strength_exp\":2.4795532294866875,\"defense_exp\":2.4795532294866875,\"dexterity_exp\":2.8514862139096904,\"agility_exp\":2.4795532294866875,\"charisma_exp\":2.2268454295148365,\"company_rep\":2.323664796015482,\"faction_rep\":1.7603521181935466,\"crime_money\":2.630961046213182,\"crime_success\":1.7394783776616074,\"hacknet_node_money\":2.0417928437802106,\"hacknet_node_purchase_cost\":0.5957921563983944,\"hacknet_node_ram_cost\":0.7009319487039933,\"hacknet_node_core_cost\":0.7009319487039933,\"hacknet_node_level_cost\":0.5957921563983944,\"work_money\":2.5240110493199546,\"bladeburner_max_stamina\":0.98,\"bladeburner_stamina_gain\":0.98,\"bladeburner_analysis\":0.98,\"bladeburner_success_chance\":0.98},\"augmentations\":[{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"bitNodeN\":10,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":9362.956759265475,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":2545889062.775209,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2675.1305026472787,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":727396875.0790185,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2675.1305026472787,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":727396875.0790185,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2675.1305026472787,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":727396875.0790185,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2675.1305026472787,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":727396875.0790185,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":2675.1305026472787,\"onlineTimeSeconds\":271910.79999997147,\"ram\":64,\"totalMoneyGenerated\":727396875.0790185,\"name\":\"hacknet-node-18\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-44755.124999998705,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":167734095283.69046,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-316392448,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":32527270785.83944,\"hacknet\":39279431253.0143,\"hacknet_expenses\":-4165752552.8202596,\"hospitalization\":-80000,\"infiltration\":105938614910.36983,\"sleeves\":-216196824,\"stock\":0,\"total\":167733095283.69046,\"work\":0,\"servers\":0,\"other\":-5313799855.542948,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-5000,\"class\":-574622400,\"codingcontract\":0,\"corporation\":0,\"crime\":2141128619.7411618,\"gang\":0,\"hacking\":98868813787.75197,\"hacknet\":87915771790.85521,\"hacknet_expenses\":-21946984566.058704,\"hospitalization\":-31983601.686801452,\"infiltration\":364404475755.4857,\"sleeves\":-8259918506.298426,\"stock\":0,\"total\":178347921537.33133,\"work\":0,\"servers\":-12261914727.587223,\"other\":-31886999855.542957,\"augmentations\":-300019839760.15326}},\"playtimeSinceLastAug\":272242200,\"playtimeSinceLastBitnode\":921806600,\"purchasedServers\":[],\"scriptProdSinceLastAug\":13425254547,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":136,\"strength\":201,\"defense\":7,\"dexterity\":57,\"agility\":96,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":1161439.7845049829,\"strength\":633997.011120042,\"defense\":116.88599999999998,\"dexterity\":5119.606800000001,\"agility\":124056.12119997898,\"charisma\":10.497336850000003,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.2127500000000002,\"hacking_speed\":1.0932564816,\"hacking_money\":1.15,\"hacking_grow\":1,\"hacking\":1.5748010069400005,\"hacking_exp\":2.35233075,\"strength\":2.21837616,\"strength_exp\":1.6698000000000002,\"defense\":2.6279225280000005,\"defense_exp\":1.6698000000000002,\"dexterity\":1.8729711000000004,\"dexterity_exp\":1.6698000000000002,\"agility\":1.3752585000000002,\"agility_exp\":1.6698000000000002,\"charisma\":1.4936922000000004,\"charisma_exp\":1.4996195500000005,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1.7995434600000004,\"faction_rep\":1.3632905000000002,\"work_money\":1.9547,\"crime_success\":1.3471250000000001,\"crime_money\":1.6300212500000004,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"PCMatrix\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Volhaven\",\"currentWork\":{\"ctor\":\"SleeveClassWork\",\"data\":{\"type\":\"CLASS\",\"classType\":\"dex\",\"location\":\"Millenium Fitness Gym\"}},\"memory\":1,\"shock\":0,\"storedCycles\":515663,\"sync\":100}}],\"sleevesFromCovenant\":0,\"sourceFiles\":[{\"lvl\":2,\"n\":1}],\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1670489742412},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1670489862411},{\"ID\":\"WORKOUT\",\"unlockedOn\":1670490282408},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1670535557114},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1670535557124},{\"ID\":\"TOR\",\"unlockedOn\":1670547017118},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1670646431745},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1670646791752},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1670669820130},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1670709423081},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1670709483081},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1670795268478},{\"ID\":\"NITESEC\",\"unlockedOn\":1670824320683},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1670837398284},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1670837518283},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1670910006577},{\"ID\":\"TRAVEL\",\"unlockedOn\":1670920206579},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1670922246575},{\"ID\":\"4S\",\"unlockedOn\":1671081474195},{\"ID\":\"DONATION\",\"unlockedOn\":1671086574197},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1671090850026},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1671100666601},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1671267589381},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1671357796151},{\"ID\":\"FROZE\",\"unlockedOn\":1671359278342},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1671483052226},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1671498592228},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1671561733381},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1672524369986},{\"ID\":\"SF1.1\",\"unlockedOn\":1672653193745},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1672718303578},{\"ID\":\"N00DLES\",\"unlockedOn\":1672825241098}],\"terminalCommandHistory\":[\"run src/startup.js phantasy\",\"sa 10\",\"backdoor\",\"HOME\",\"run src/startup.js phantasy\",\"run src/get-server-info.js\",\"run src/automated-infiltration.js --rep Volhaven\",\"run src/automated-infiltration.js --rep Tian Di Hui\",\"run src/hack-batcher.js\",\"run src/hack-batcher.js n00dles\",\"run src/startup.js phantasy --home\",\"run connect-remote.js avmnite-02h\",\"connect harakiri-sushi; connect CSEC; connect omega-net; connect avmnite-02h\",\"ls\",\"ana\",\"backdoor\",\"hom\",\"home\",\"run src/automated-infiltration.js --rep NiteSec\",\"run src/automated-infiltration.js --rep Volhaven\",\"run src/startup.js\",\"run src/automated-infiltration.js --sell\",\"buy -a\",\"nano factions.txt\",\"run src/hacknet-manager.js 20\",\"run src/startup.js phantasy\",\"run src/hack-batcher.js n00dles\",\"run src/startup.js phantasy\",\"run kill-scripts.js\",\"run src/startup.js phantasy --home\",\"run src/get-server-info.js -h\",\"run src/get-server-info.js --admin\",\"run src/hack-batcher.js\",\"run src/hack-batcher.js n00dles\",\"run src/hack-batcher.js zer0\",\"run src/hack-batcher.js ecorp\",\"run src/hack-batcher.js n00dles\",\"d\",\"s\",\"run src/hack-batcher.js n00dles\",\"run src/hack-batcher.js ecorp\",\"run src/hack-batcher.js n00dles\",\"run connect-remote.js I.I.I.I\",\"connect iron-gym; connect zer0; connect silver-helix; connect netlink; connect I.I.I.I\",\"ana\",\"home\",\"run src/startup.js phantasy\",\"run src/hack-batcher.js n00dles\\\\\",\"run src/hack-batcher.js n00dles\",\"nano factions.txt\"],\"lastUpdate\":1674524746741,\"lastSave\":1674421416022,\"totalPlaytime\":4138001600,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":false,\"cyclesWorked\":519438,\"earnings\":{\"money\":-87265584,\"reputation\":0,\"hackExp\":0,\"strExp\":0,\"defExp\":0,\"dexExp\":1184936.2367846572,\"agiExp\":0,\"chaExp\":0,\"intExp\":0},\"classType\":\"dex\",\"location\":\"Millenium Fitness Gym\"}},\"focus\":false,\"entropy\":1,\"identifier\":\"1137f86ca57c6a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"54.4.6.0\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\",\"fl1ght.exe\"],\"ramUsed\":1832.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[9000000000,10995,113615,54242]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":26145988.28958241,\"offlineMoneyMade\":0,\"offlineRunningTime\":174134.674,\"onlineExpGained\":7871757.580316293,\"onlineMoneyMade\":9000000000,\"onlineRunningTime\":65635.60999990761,\"pid\":1,\"ramUsage\":2.5,\"server\":\"home\",\"threads\":733,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///dc3a5125-1fce-4c1f-9781-ea663938dbda\",\"moduleSequenceNumber\":337}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n/*\\r\\n * API\\r\\n * Commands go out on port 1\\r\\n * ## Target\\r\\n * `target:hostname`\\r\\n * What host to run the grow..weaken..hack script on\\r\\n * \\r\\n * ## End\\r\\n * `end`\\r\\n * Terminate all server scripts.\\r\\n * \\r\\n */\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let serverPrefix = \\\"e0-server\\\";\\r\\n    \\r\\n    let port = ns.getPortHandle(1);\\r\\n\\r\\n    ns.print(\\\"Orchestrator starting up...\\\");\\r\\n    ns.print(\\\"Clearing port data\\\");\\r\\n    ns.clearPort(1);\\r\\n    \\r\\n    if(port.empty()) {\\r\\n        port.write(\\\"target:neo-net\\\");\\r\\n    }\\r\\n}\",\"filename\":\"/src/server-orchestrator.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/server-orchestrator.js\",\"url\":\"blob:file:///a452b1fc-ac21-4d7f-b9ef-51ad4530202a\",\"moduleSequenceNumber\":161}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    let port = ns.getPortHandle(1);\\n\\n    ns.tprint(port.peek());\\n}\",\"filename\":\"/src/port-test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/port-test.js\",\"url\":\"blob:file:///dbaa5b3b-0eb6-4b20-adea-069adff151ea\",\"moduleSequenceNumber\":239}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\n/** ms to wait to read port info */\\r\\nconst POLL_TIME = 10000;\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let port = ns.getPortHandle(1);\\r\\n    let lastCommand = \\\"\\\";\\r\\n\\r\\n    ns.tprint(port.peek());\\r\\n    // Main loop\\r\\n    while (true) {\\r\\n        let cmd = processCmd(ns, port);\\r\\n        if (cmd == lastCommand) {\\r\\n\\r\\n        }\\r\\n\\r\\n        await ns.sleep(POLL_TIME);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Read the port and return a string array with the parts.\\r\\n * \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n * @param {NetscriptPort} portHandle \\r\\n * @return {string[]}\\r\\n */\\r\\nfunction processCmd(ns, portHandle) {\\r\\n    let cmd = portHandle.peek();\\r\\n\\r\\n    // See if it's a more complicated command or not\\r\\n    if (cmd.includes(\\\":\\\")) {\\r\\n        /** @type string[] */\\r\\n        let parts = cmd.split(\\\":\\\");\\r\\n\\r\\n        ns.printf(\\\"Received complex command: %s\\\", parts);\\r\\n    }\\r\\n    else {\\r\\n        switch (cmd) {\\r\\n            case \\\"end\\\":\\r\\n                ns.print(\\\"End received, quitting.\\\");\\r\\n                ns.exit();\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/src/server-client.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/server-client.js\",\"url\":\"blob:file:///13e100a5-2056-448d-81dc-5c68bcea3541\",\"moduleSequenceNumber\":31}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { Constants } from \\\"lib/constants\\\";\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let flags = ns.flags([[\\\"help\\\", false], [\\\"dry-run\\\", false], [\\\"d\\\", false]]);\\r\\n\\r\\n    // @ts-ignore\\r\\n    if (flags.help || !flags[\\\"_\\\"] || flags[\\\"_\\\"].length > 1) {\\r\\n        ns.tprint(\\\"INFO: usage: run src/buyer-server.js gbtobuy --help --dry-run (-d)\\\")\\r\\n        ns.tprint(\\\"INFO: \\\");\\r\\n        ns.tprint(\\\"INFO: help:\\\\tShow this message\\\");\\r\\n        ns.tprint(\\\"INFO: gbtobuy:\\\\tHow many GB the servers will have (power of 2)\\\");\\r\\n        ns.tprint(\\\"INFO: dry-run:\\\\tJust print cost, don't buy anything\\\");\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    const gbToBuy = Number(flags[\\\"_\\\"][0]);\\r\\n    const printOnly = Boolean(flags.dry_run || flags.d);\\r\\n    const limit = ns.getPurchasedServerLimit();\\r\\n    let cost = ns.getPurchasedServerCost(gbToBuy) * limit;\\r\\n\\r\\n    ns.tprintf(\\\"Buying %s %sGB servers, total cost of: $%s\\\", limit, gbToBuy, cost.toLocaleString(\\\"en-US\\\"));\\r\\n\\r\\n    if (printOnly) return;\\r\\n \\r\\n    let purchasedServers = ns.getPurchasedServers();\\r\\n    while (purchasedServers.length < limit) {\\r\\n        ns.tprintf(\\\"%s/%s servers owned\\\", purchasedServers.length, limit);\\r\\n        if (ns.getPurchasedServerCost(gbToBuy) <= ns.getPlayer().money) {\\r\\n            const newServer = ns.purchaseServer(Constants.MY_SERVERS_PREFIX, gbToBuy);\\r\\n            ns.tprintf(\\\"Bought %s, %sGB server\\\", newServer, gbToBuy);\\r\\n        }\\r\\n        else {\\r\\n            ns.sleep(2000);\\r\\n        }\\r\\n        purchasedServers = ns.getPurchasedServers();\\r\\n    }\\r\\n    ns.tprintf(\\\"All %s servers have been bought\\\", limit);\\r\\n}\",\"filename\":\"/src/buyer-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///f9e5f694-ce7b-400f-bfd3-338b2d4a20cf\",\"moduleSequenceNumber\":98},{\"filename\":\"/src/buyer-server.js\",\"url\":\"blob:file:///7fbdf671-81ce-4184-8fe4-fa7587741f21\",\"moduleSequenceNumber\":14349}],\"dependents\":[],\"ramUsage\":6.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { traverse } from \\\"lib/traverse\\\";\\r\\nimport { Constants } from \\\"lib/constants\\\";\\r\\n\\r\\n// \\\\TODO Investigate ns.prompt\\r\\nexport const SCRIPT_TO_RUN = \\\"/src/basic-hack-1.js\\\";\\r\\n/** Leave this much RAM free when running on home. */\\r\\nconst HOME_PERCENT_RAM_LEAVE = 0.1;\\r\\n\\r\\nvar HackTarget = \\\"\\\";\\r\\nvar IncludeHome = false;\\r\\nvar Script = SCRIPT_TO_RUN;\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    var flags = ns.flags([\\r\\n        [\\\"script\\\", SCRIPT_TO_RUN],\\r\\n        [\\\"home\\\", false],\\r\\n        [\\\"help\\\", false]\\r\\n    ]);\\r\\n    ns.tprint(flags);\\r\\n    if (flags.help) {\\r\\n        ns.tprint(\\\"INFO: Usage: run startup.js server --help --script script-name --home\\\");\\r\\n        ns.tprint(\\\"INFO:\\\");\\r\\n        ns.tprint(\\\"INFO: flags:\\\");\\r\\n        ns.tprint(\\\"INFO: help:\\\\tprint this message\\\");\\r\\n        ns.tprint(\\\"INFO: server:\\\\twhat hostname to target, defaults to each server hacking itself\\\");\\r\\n        ns.tprint(\\\"INFO: script:\\\\twhat hacking script to run, defaults to '\\\" + SCRIPT_TO_RUN + \\\"'\\\");\\r\\n        ns.tprint(\\\"INFO: home:\\\\tIf the hacking script should also be started on home\\\");\\r\\n        return;\\r\\n    }\\r\\n    // @ts-ignore\\r\\n    HackTarget = flags[\\\"_\\\"].length == 0 ? \\\"\\\" : flags[\\\"_\\\"][0].toString();\\r\\n    IncludeHome = Boolean(flags.home);\\r\\n    Script = flags.script.toString();\\r\\n\\r\\n    await traverse(ns, \\\"home\\\", new Set(), traverseCallback, { killScript: true, scriptName: flags.script.toString(), killOurs: true });\\r\\n\\r\\n    if (ns.getPurchasedServers().length != 0) {\\r\\n        ns.tprint(\\\"Purchased servers:\\\"); // Only print this if we're going to run the next block\\r\\n    }\\r\\n    for (const neighbor of ns.getPurchasedServers()) {\\r\\n        uploadScript(ns, neighbor);\\r\\n        await runScript(ns, neighbor, HackTarget);\\r\\n    }\\r\\n\\r\\n    ns.tprint(\\\"== Done ==\\\");\\r\\n}\\r\\n\\r\\nasync function traverseCallback(ns, hostname) {\\r\\n    if (doHack(ns, hostname)) {\\r\\n        await runScript(ns, hostname, HackTarget);\\r\\n    }\\r\\n}\\r\\n\\r\\n/** \\r\\n * Breach host if we have enough port hacks to open it, then nuke and exec {@link SCRIPT_TO_RUN}\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n * @param {string} hostname \\r\\n * @returns {boolean} If the hacking script should be run on this host\\r\\n*/\\r\\nfunction doHack(ns, hostname) {\\r\\n    let server = ns.getServer(hostname);\\r\\n    const ports = server.numOpenPortsRequired;\\r\\n    const numPortHacks = numPortHacksPresent(ns);\\r\\n\\r\\n    if (hostname != \\\"home\\\") {\\r\\n        if (server.requiredHackingSkill > ns.getPlayer().skills.hacking\\r\\n            || ports > numPortHacks\\r\\n            || hostname.startsWith(Constants.MY_SERVERS_PREFIX)) {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    else if (!IncludeHome)\\r\\n    {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    ns.tprint(hostname);\\r\\n\\r\\n    // If we get here we have enough of the hacks to open the ports\\r\\n    // See if we actually need to open any ports\\r\\n    if (!server.hasAdminRights && server.openPortCount < ports) {\\r\\n        for (let i = 0; i < ports; ++i) {\\r\\n\\r\\n            let hackMethod = Constants.PORT_HACK_METHODS[i];\\r\\n            ns[hackMethod](hostname);\\r\\n            server = ns.getServer(hostname);\\r\\n            ns.tprintf(\\\"\\\\tCalled ns.%s on %s (%s/%s open/req)\\\", hackMethod, hostname, server.openPortCount, ports);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!server.hasAdminRights) {\\r\\n        try {\\r\\n            ns.nuke(hostname);\\r\\n        }\\r\\n        catch (err) {\\r\\n            ns.tprintf(\\\"\\\\tCaught error on nuke(%s), ports: %s/%s, RAM: %s, hack level: %s / %s\\\",\\r\\n                hostname, server.openPortCount, ports, server.maxRam, ns.getPlayer().skills.hacking, server.requiredHackingSkill);\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n    // Want to hack it, but not try and run anything on it\\r\\n    if (server.maxRam == 0) {\\r\\n        ns.tprintf(\\\"\\\\tSkipping 0 RAM server: %s\\\", hostname);\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    if (hostname != \\\"home\\\") {\\r\\n        uploadScript(ns, hostname);\\r\\n        ns.tprintf(\\\"\\\\tBreached %s\\\", hostname);\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nfunction uploadScript(ns, hostname) {\\r\\n    ns.scp(Script, hostname, \\\"home\\\");\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nasync function runScript(ns, hostname, target) {\\r\\n    const server = ns.getServer(hostname);\\r\\n    const mem = ns.getScriptRam(Script);\\r\\n    let availableRam = (server.maxRam - server.ramUsed);\\r\\n    if (hostname == \\\"home\\\") availableRam *= (1 - HOME_PERCENT_RAM_LEAVE);\\r\\n    const threads = Math.floor(availableRam / mem);\\r\\n\\r\\n    // Make sure the server we're going to be running the script against is hacked\\r\\n    if (target != \\\"\\\" && !ns.getServer(target).hasAdminRights) {\\r\\n        doHack(ns, target);\\r\\n    }\\r\\n\\r\\n    if (threads == 0) {\\r\\n        ns.tprintf(\\\"WARN: Not enough ram to run any threads on '%s'!\\\", hostname);\\r\\n    }\\r\\n\\r\\n    const pid = ns.exec(Script, hostname, threads, target);\\r\\n    ns.tprintf(\\\"\\\\tRunning %s on %s w/ %s threads - PID: %s\\\", Script, hostname, threads, pid);\\r\\n\\r\\n    await ns.sleep(20); // Prevent scripts running in the same tick, hopefully stopping some overhacking\\r\\n}\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport function numPortHacksPresent(ns) {\\r\\n    let result = 0;\\r\\n    Constants.PORT_HACKS.forEach(hack => result += ns.fileExists(hack) ? 1 : 0);\\r\\n    return result;\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * data (Object) – \\r\\n    args (string[]) – \\r\\n * @param {Object} data - general data about the game you might want to autocomplete. \\r\\n * @param {string[]} args - current arguments. Minus run script.js \\r\\n * @returns {string[]}\\r\\n */\\r\\n    export function autocomplete(data, args) {\\r\\n        return [...data.servers];\\r\\n    }\\r\\n\",\"filename\":\"/src/startup.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///14529644-52dc-4c07-a576-b0ba8c68ffbb\",\"moduleSequenceNumber\":182},{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///6137f707-4d22-4cee-9bf0-e610c31c534b\",\"moduleSequenceNumber\":182},{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///e1f22d34-31b5-400d-9286-cf32eaeedf04\",\"moduleSequenceNumber\":180},{\"filename\":\"/src/startup.js\",\"url\":\"blob:file:///7879078f-6989-40d4-986d-f3595a459da5\",\"moduleSequenceNumber\":2740}],\"dependents\":[],\"ramUsage\":10.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///a8c074d0-82b6-40fb-9ffc-38eea10de9cd\",\"moduleSequenceNumber\":343}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n// import { traverse } from \\\"./lib/traverse\\\";\\r\\n\\r\\n/** @type {import(\\\"./src/NetscriptDefinitions\\\").Server[]} */\\r\\nvar moneyList = [];\\r\\n\\r\\nconst ONLY_ADMIN = false;\\r\\n\\r\\n// const window = eval(\\\"window\\\");\\r\\n// const document = eval(\\\"document\\\");\\r\\n\\r\\n/** @param {import(\\\"./src/NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    ns.tprint(ns.getScriptRam(\\\"temp.js\\\", \\\"home\\\"));\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"./src/NetscriptDefinitions\\\").NS } ns \\r\\n * @param {string} hostname \\r\\n */\\r\\n// function toRun(ns, hostname) {\\r\\n//     let server = ns.getServer(hostname);\\r\\n//     if (ONLY_ADMIN && server.hasAdminRights) {\\r\\n//         moneyList.push(server);\\r\\n//     }\\r\\n//     else if (!ONLY_ADMIN) {\\r\\n//         moneyList.push(server);\\r\\n//     }\\r\\n// }\\r\\n\",\"filename\":\"temp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"temp.js\",\"url\":\"blob:file:///67454976-3e84-4e52-a201-3705d494a5f1\",\"moduleSequenceNumber\":20110}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { traverse } from \\\"lib/traverse\\\";\\r\\n\\r\\n/** @param {import(\\\"./src/NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    await traverse(ns, \\\"home\\\", new Set(), undefined, {killScript: true, killOurs: true });\\r\\n}\",\"filename\":\"kill-scripts.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///816cc7f2-d581-41c8-966a-8d89e1b00ab9\",\"moduleSequenceNumber\":7334},{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///de7a6fe6-b80f-4eb5-b315-c2c2c69509dc\",\"moduleSequenceNumber\":7332},{\"filename\":\"kill-scripts.js\",\"url\":\"blob:file:///f683d4a0-6d60-4db6-b815-a104ddcd5913\",\"moduleSequenceNumber\":51079}],\"dependents\":[],\"ramUsage\":3.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var visited = [];\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let map = mapNetwork(ns, \\\"home\\\", {});\\r\\n    ns.tprint(map);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS } ns \\r\\n * @param {string} hostname \\r\\n * @param {object} curMap\\r\\n */\\r\\nfunction mapNetwork(ns, hostname, curMap) {\\r\\n    let neighbors = ns.scan(hostname);\\r\\n    curMap[hostname] = {};\\r\\n    visited.push(hostname);\\r\\n\\r\\n    neighbors.forEach(neighbor => {\\r\\n        if (!visited.includes(neighbor)) {\\r\\n            mapNetwork(ns, neighbor, curMap[hostname]);\\r\\n        }\\r\\n    });\\r\\n    return curMap;\\r\\n}\",\"filename\":\"/src/map-network.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/map-network.js\",\"url\":\"blob:https://danielyxie.github.io/2278b19e-c574-4ac0-9f9e-c7edd5cf4bee\",\"moduleSequenceNumber\":15994}],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { Constants } from \\\"lib/constants\\\";\\r\\n\\r\\n/**\\r\\n * @typedef {Function}\\r\\n */\\r\\n\\r\\n/**\\r\\n * Run the traverse function\\r\\n * @param {import(\\\"../src/NetscriptDefinitions\\\").NS} ns\\r\\n * @param {string} hostname - Current or starting server name\\r\\n * @param {Set<string>} visited - Set of hosts that have been visited by this function\\r\\n * @param {Function?} callback - callback(ns, hostname)\\r\\n * @param {{killScript: boolean, scriptName?: string, killOurs?: boolean }} obj - Kills all if scriptName is blank. \\r\\n * If killOurs is false, all {@link Constants.MY_SERVERS_PREFIX} will be ignored.\\r\\n * @returns {Promise<Set<string>>}\\r\\n*/\\r\\nexport async function traverse(ns, hostname, visited, callback, { killScript, scriptName = \\\"\\\", killOurs = false }) {\\r\\n    visited.add(hostname);\\r\\n\\r\\n    if (callback != undefined) {\\r\\n        await callback(ns, hostname);\\r\\n    }\\r\\n\\r\\n    let neighbors = ns.scan(hostname);\\r\\n    for (const neighbor of neighbors) {\\r\\n        let notOurs = !neighbor.startsWith(Constants.MY_SERVERS_PREFIX);\\r\\n\\r\\n        // Only go there if we haven't been before and it's not our server\\r\\n        // Skip the server if we have been there\\r\\n        if (visited.has(neighbor)) {\\r\\n            continue;\\r\\n        }\\r\\n        // Handle the killing of the scripts\\r\\n        if ((notOurs || killOurs) && killScript) {\\r\\n            // Nuke everything if we aren't trying to kill a specific script\\r\\n            if (!scriptName) {\\r\\n                ns.killall(neighbor);\\r\\n            }\\r\\n            else {\\r\\n                ns.scriptKill(scriptName, neighbor);\\r\\n            }\\r\\n        }\\r\\n        // Do the actual recursive visitation\\r\\n        visited = await traverse(ns, neighbor, visited, callback, { killScript, scriptName });\\r\\n    }\\r\\n\\r\\n    return visited;\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\r\\n * @param {import(\\\"../src/NetscriptDefinitions\\\").NS} ns \\r\\n * @param {import(\\\"../src/NetscriptDefinitions\\\").Server} startServer - What server to start from. Doesn't super matter, actually.\\r\\n * @param {Set<import(\\\"../src/NetscriptDefinitions\\\").Server>?} visited \\r\\n * @param {Function?} callback - callback(ns, server)\\r\\n */\\r\\nexport async function DfsServer(ns, startServer, visited = new Set(), callback = undefined) {\\r\\n    let curServer = null\\r\\n    /**\\r\\n     * \\r\\n     * @param {import(\\\"../src/NetscriptDefinitions\\\").NS} ns \\r\\n     * @param {string} serverName \\r\\n     */\\r\\n    let ourCallback = (ns, serverName) => {\\r\\n        curServer = ns.getServer(serverName);\\r\\n        ns.tprint(`Callback on ${curServer.hostname}`);\\r\\n        visited.add(curServer);\\r\\n        ns.tprint(\\\"visited\\\");\\r\\n        ns.tprint(visited);\\r\\n        if (callback !== undefined) {\\r\\n            callback(ns, curServer);\\r\\n        }\\r\\n    }\\r\\n    ns.tprint(`Starting dfs with ${startServer.hostname}`);\\r\\n    let vis = new Set();\\r\\n    // traverse(ns, startServer.hostname, new Set(), ourCallback, {killScript: false });\\r\\n    traverse(ns, startServer.hostname, vis, (ns, h) => {}, {killScript: false });\\r\\n    ns.tprint(vis);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Find a path to the provided hostname \\r\\n * @param {import(\\\"../src/NetscriptDefinitions\\\").NS} ns \\r\\n * @param {string} hostname - Current host\\r\\n * @param {string} target - Host we're looking for a path to\\r\\n * @param {Array<string>} curPath - The path this particular iteration has taken\\r\\n * @param {Set<string>} visited\\r\\n * @returns {Array<string>} - Path to the target\\r\\n */\\r\\nexport function traverseSearch(ns, hostname, target, curPath = new Array(), visited = new Set()) {\\r\\n    visited.add(hostname);\\r\\n    curPath.push(hostname);\\r\\n    let neighbors = ns.scan(hostname);\\r\\n\\r\\n    // @ts-ignore\\r\\n    if (neighbors.includes(target)) {\\r\\n        curPath.push(target);\\r\\n        return curPath;\\r\\n    }\\r\\n\\r\\n    for (const neighbor of neighbors) {\\r\\n        if (!visited.has(neighbor)) {\\r\\n            const res = traverseSearch(ns, neighbor, target, curPath, visited);\\r\\n            if (res.length != 0) {\\r\\n                // We found it\\r\\n                return res;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // If we get here, then it wasn't found\\r\\n    curPath.pop();\\r\\n    return [];\\r\\n}\",\"filename\":\"/lib/traverse.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///07e1736b-e3fe-49d0-9537-3dea3e8c75ae\",\"moduleSequenceNumber\":1482}],\"dependents\":[],\"ramUsage\":5.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { MY_SERVERS_PREFIX, SCRIPT_TO_RUN } from \\\"./startup\\\";\\r\\n\\r\\n/**\\r\\n * Run the traverse function\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n * @param {string} hostname\\r\\n * @param {Set} visited\\r\\n * @param {function callback(ns, hostname)} callback\\r\\n * @returns {Set}\\r\\n*/\\r\\n\\r\\nexport function traverse(ns, hostname, visited, callback, killScript = true) {\\r\\n    visited.add(hostname);\\r\\n\\r\\n    callback(ns, hostname);\\r\\n\\r\\n    let neighbors = ns.scan(hostname);\\r\\n    neighbors.forEach(neighbor => {\\r\\n        let notVisited = !visited.has(neighbor);\\r\\n        let notOurs = !neighbor.startsWith(MY_SERVERS_PREFIX);\\r\\n\\r\\n        // Only go there if we haven't been before and it's not our server\\r\\n        if (notVisited && notOurs) {\\r\\n            if (killScript) {\\r\\n                ns.scriptKill(SCRIPT_TO_RUN, neighbor);\\r\\n            }\\r\\n            visited = traverse(ns, neighbor, visited, callback, killScript);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    return visited;\\r\\n}\\r\\n\",\"filename\":\"/src/traverse.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":182}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/* eslint-disable no-unused-vars */\\r\\nconst PortHacks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"]\\r\\nconst PortHackMethods = [\\\"brutessh\\\", \\\"ftpcrack\\\", \\\"relaysmtp\\\", \\\"httpworm\\\", \\\"sqlinject\\\"];\\r\\nconst MyServersPrefix = \\\"e0-server\\\";\\r\\n\\r\\nexport class Constants {\\r\\n    static get MY_SERVERS_PREFIX() {\\r\\n        return MyServersPrefix;\\r\\n    }\\r\\n    static get PORT_HACKS() {\\r\\n        return PortHacks;\\r\\n    }\\r\\n    static get PORT_HACK_METHODS() {\\r\\n        return PortHackMethods;\\r\\n    }\\r\\n}\",\"filename\":\"/lib/constants.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { traverse } from \\\"lib/traverse\\\";\\r\\nimport { numPortHacksPresent } from \\\"src/startup\\\";\\r\\n\\r\\n/** @type {import(\\\"./NetscriptDefinitions\\\").Server[]} */\\r\\nvar ServerInfoList = [];\\r\\n\\r\\nvar OnlyAdmin = false;\\r\\nvar OnlyCanHack = false;\\r\\n\\r\\nclass DisplayMode {\\r\\n    static Full = new DisplayMode(\\\"Full\\\");\\r\\n    static Min = new DisplayMode(\\\"Min\\\");\\r\\n    static Info = new DisplayMode(\\\"Info\\\");\\r\\n    constructor(name) { this.name = name; }\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    var flags = ns.flags([\\r\\n        [\\\"help\\\", false],\\r\\n        [\\\"h\\\", false],\\r\\n        [\\\"canhack\\\", false],\\r\\n        [\\\"admin\\\", false],\\r\\n        [\\\"f\\\", false],\\r\\n        [\\\"i\\\", false]\\r\\n    ]);\\r\\n\\r\\n    ns.clearLog();\\r\\n    ServerInfoList = [];\\r\\n\\r\\n    if (flags.help || flags.h) {\\r\\n        printHelp(ns);\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let displayMode = flags[\\\"f\\\"] ? DisplayMode.Full\\r\\n        : flags[\\\"i\\\"] ? DisplayMode.Info : DisplayMode.Min;\\r\\n    OnlyCanHack = Boolean(flags.canhack);\\r\\n    OnlyAdmin = Boolean(flags.admin);\\r\\n\\r\\n    if (OnlyCanHack && OnlyAdmin) {\\r\\n        ns.tprint(\\\"ERROR: Invalid flags, both canhack and admin are true. Pick one.\\\");\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    await traverse(ns, \\\"home\\\", new Set(), toRun, { killScript: false });\\r\\n\\r\\n    ServerInfoList.sort((a, b) => a[\\\"hackRank\\\"] - b[\\\"hackRank\\\"] || a.moneyMax - b.moneyMax);\\r\\n    let output = \\\"\\\";\\r\\n    ServerInfoList.forEach(entry => {\\r\\n        output += \\\"\\\\n\\\" + formatOutput(ns, entry, displayMode);\\r\\n    });\\r\\n    ns.print(output);\\r\\n    ns.tprintf(\\\"Found total of %s servers\\\", ServerInfoList.length);\\r\\n    ns.tail();\\r\\n}\\r\\n\\r\\nfunction printHelp(ns) {\\r\\n    ns.tprint(\\\"INFO: Usage: run get-server-info.js [--help, -h] {--canhack | --admin} -{f | m | i}\\\");\\r\\n    ns.tprint(\\\"INFO:\\\");\\r\\n    ns.tprint(\\\"INFO: flags:\\\");\\r\\n    ns.tprint(\\\"INFO: canhack\\\\t\\\\tdisplay the servers that can be hacked but are not currently\\\");\\r\\n    ns.tprint(\\\"INFO: admin\\\\t\\\\tif only servers where admin is already obtained should be displayed (options: (t)rue/(f)alse) (default: true)\\\");\\r\\n    ns.tprint(\\\"INFO: output format\\\\t(options: -f/m/i (full/min/info)) (default: m)\\\");\\r\\n}\\r\\n\\r\\n/**\\r\\n * Rank a given server on how good it is to hack\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {string} hostname \\r\\n * @returns {number} 0 means don't hack, higher number is better for hacking.\\r\\n */\\r\\nfunction rankServer(ns, hostname) {\\r\\n    let server = ns.getServer(hostname);\\r\\n    if (!server.hasAdminRights) return 0;\\r\\n    if (server.hackDifficulty > ns.getPlayer().skills.hacking / 2) return 0;\\r\\n    return server.moneyMax / server.minDifficulty;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS } ns \\r\\n * @param {string} hostname \\r\\n */\\r\\nasync function toRun(ns, hostname) {\\r\\n    let server = ns.getServer(hostname);\\r\\n    server[\\\"hackRank\\\"] = rankServer(ns, hostname);\\r\\n    if (OnlyCanHack) {\\r\\n        if (!server.hasAdminRights && canHack(ns, server)) {\\r\\n            ServerInfoList.push(server);\\r\\n        }\\r\\n    }\\r\\n    else if (OnlyAdmin && server.hasAdminRights) {\\r\\n        ServerInfoList.push(server);\\r\\n        // ns.tprint(server)\\r\\n    }\\r\\n    else if (!OnlyAdmin) {\\r\\n        ServerInfoList.push(server);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").Server} server \\r\\n * @returns {boolean}\\r\\n */\\r\\nfunction canHack(ns, server) {\\r\\n    let player = ns.getPlayer();\\r\\n\\r\\n    return server.requiredHackingSkill <= player.skills.hacking\\r\\n        && server.numOpenPortsRequired <= numPortHacksPresent(ns);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS } ns \\r\\n * @param {object} entry \\r\\n * @param {DisplayMode} displayMode \\r\\n * @returns {string}\\r\\n */\\r\\nfunction formatOutput(ns, entry, displayMode) {\\r\\n    let fields = [];\\r\\n    switch (displayMode) {\\r\\n        case DisplayMode.Full:\\r\\n            return ns.sprintf(\\\"%3j\\\", entry);\\r\\n        case DisplayMode.Min:\\r\\n            fields = [\\\"hostname\\\", \\\"moneyMax\\\", \\\"requiredHackingSkill\\\", \\\"hackRank\\\"]\\r\\n            break;\\r\\n        case DisplayMode.Info:\\r\\n            fields = [\\r\\n                \\\"hostname\\\",\\r\\n                \\\"hackDifficulty\\\",\\r\\n                \\\"minDifficulty\\\",\\r\\n                \\\"moneyAvailable\\\",\\r\\n                \\\"moneyMax\\\",\\r\\n                \\\"numOpenPortsRequired\\\",\\r\\n                \\\"requiredHackingSkill\\\",\\r\\n                \\\"serverGrowth\\\"\\r\\n            ];\\r\\n            break;\\r\\n    }\\r\\n    let output = {};\\r\\n    fields.forEach(field => {\\r\\n        output[field] = entry[field].toLocaleString(\\\"en-US\\\");\\r\\n    })\\r\\n    return ns.sprintf(\\\"%3j\\\", output);\\r\\n}\\r\\n\",\"filename\":\"/src/get-server-info.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///3c9703d5-69e1-4ec8-99e7-330443f0f962\",\"moduleSequenceNumber\":7334},{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///6763e166-7aa1-4341-8dd3-d986c638bab2\",\"moduleSequenceNumber\":7334},{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///00d9b1e2-fc9a-4100-8307-41673846c7ed\",\"moduleSequenceNumber\":7332},{\"filename\":\"/src/startup.js\",\"url\":\"blob:file:///1770e044-fbe1-4602-97c4-8af6c3ac113f\",\"moduleSequenceNumber\":7477},{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///d7775a07-993a-4375-b797-84040fb48476\",\"moduleSequenceNumber\":7334},{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///f8fceadb-f384-4f4e-8eed-a03a5e5616f6\",\"moduleSequenceNumber\":7332},{\"filename\":\"/src/get-server-info.js\",\"url\":\"blob:file:///d5549d1e-07dc-4f7d-92d3-b22ab8f370c5\",\"moduleSequenceNumber\":51761}],\"dependents\":[],\"ramUsage\":6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n\\r\\nlet multCoreCost;\\r\\nlet multLevelCost;\\r\\nlet multMoney;\\r\\nlet multNodeCost;\\r\\nlet multRamCost;\\r\\n\\r\\nlet Constants;\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    if (ns.args[0] == \\\"-h\\\") {\\r\\n        ns.tprint(\\\"INFO: usage: hacknet-manager [-d | indexes]\\\")\\r\\n        return;\\r\\n    }\\r\\n    multCoreCost = ns.getPlayer().mults.hacknet_node_core_cost;\\r\\n    multLevelCost = ns.getPlayer().mults.hacknet_node_level_cost;\\r\\n    multMoney = ns.getPlayer().mults.hacknet_node_money;\\r\\n    multNodeCost = ns.getPlayer().mults.hacknet_node_purchase_cost;\\r\\n    multRamCost = ns.getPlayer().mults.hacknet_node_ram_cost;\\r\\n    Constants = ns.formulas.hacknetNodes.constants();\\r\\n\\r\\n    if (ns.args[0] == \\\"-d\\\") {\\r\\n        ns.tprint(\\\"-- Next 10 Hacknet Node Costs --\\\")\\r\\n        for (let i = ns.hacknet.numNodes() + 1; i < ns.hacknet.numNodes() + 10; ++i) {\\r\\n            ns.tprintf(\\\"Node #%s: $%s\\\", i, ns.formulas.hacknetNodes.hacknetNodeCost(i, multNodeCost).toLocaleString(\\\"en-US\\\"));\\r\\n        }\\r\\n        \\r\\n        // dry-run fully buying the next node\\r\\n        let cost = ns.formulas.hacknetNodes.hacknetNodeCost(ns.hacknet.numNodes() + 1, multNodeCost)\\r\\n         + ns.formulas.hacknetNodes.levelUpgradeCost(1, Constants.MaxLevel, multLevelCost)\\r\\n         + ns.formulas.hacknetNodes.ramUpgradeCost(0, Constants.MaxRam, multRamCost)\\r\\n         + ns.formulas.hacknetNodes.coreUpgradeCost(0, Constants.MaxCores, multCoreCost);\\r\\n        ns.tprintf(\\\"Cost for next full node: $%s\\\", cost.toLocaleString(\\\"en-US\\\"));\\r\\n        return;\\r\\n    }\\r\\n    let index = Number(ns.args[0]) - 1 || 0;\\r\\n    \\r\\n    let startMoney = ns.getPlayer().money;\\r\\n    if (index < ns.hacknet.numNodes()) {\\r\\n        upgradeNode(ns, index);\\r\\n    }\\r\\n    while (index + 1 > ns.hacknet.numNodes()) {\\r\\n        let newNodeIndex = ns.hacknet.purchaseNode();\\r\\n        if (newNodeIndex == -1) {\\r\\n            ns.tprint(\\\"Can't buy, probably ran out of money\\\");\\r\\n            break;\\r\\n        }\\r\\n        ns.tprintf(\\\"Bought node: %s\\\", ns.hacknet.numNodes());\\r\\n        upgradeNode(ns, newNodeIndex);\\r\\n    }\\r\\n\\r\\n    ns.tprintf(\\\"Money change: $%s\\\", (ns.getPlayer().money - startMoney).toLocaleString(\\\"en-US\\\"));\\r\\n}\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nfunction upgradeNode(ns, index) {\\r\\n    let startNode = ns.hacknet.getNodeStats(index);\\r\\n    let node = startNode;\\r\\n\\r\\n    ns.hacknet.upgradeCore(index, ns.formulas.hacknetNodes.constants().MaxCores);\\r\\n    ns.hacknet.upgradeRam(index, ns.formulas.hacknetNodes.constants().MaxRam);\\r\\n    ns.hacknet.upgradeLevel(index, ns.formulas.hacknetNodes.constants().MaxLevel);\\r\\n\\r\\n    node = ns.hacknet.getNodeStats(index);\\r\\n\\r\\n    let startRate = ns.formulas.hacknetNodes.moneyGainRate(startNode.level, startNode.ram, startNode.cores, multMoney);\\r\\n    let endRate = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram, node.cores, multMoney);\\r\\n    ns.tprintf(\\\"Money rate change: +$%s\\\", (endRate - startRate).toLocaleString(\\\"en-US\\\"));\\r\\n}\\r\\n\",\"filename\":\"/src/hacknet-manager.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/hacknet-manager.js\",\"url\":\"blob:file:///d89bdb8e-389f-4963-913a-7c37af14a5e2\",\"moduleSequenceNumber\":8265}],\"dependents\":[],\"ramUsage\":6.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/*\\r\\nA few things need to be known before this algorithm can be implemented:\\r\\n\\r\\n- The effects of hack and grow depend on the server security level, a higher security level results in a reduced effect. You only want these \\r\\neffects to occur when the security level is minimized.\\r\\n- The time taken to execute hack, grow, or weaken is determined when the function is called and is based on the security level of the target \\r\\nserver and your hacking level. \\r\\n- You only want these effects to start when the security level is minimized.\\r\\n- The effects of hack, grow, and weaken, are determined when the time is completed, rather than at the beginning. \\r\\n- Hack should finish when security is minimum and money is maximum. \\r\\n- Grow should finish when security is minimum, shortly after a hack occurred. \\r\\n- Weaken should occur when security is not at a minimum due to a hack or grow increasing it.\\r\\n\\r\\nA single batch consists of four actions:\\r\\n\\r\\n1. A hack script removes a predefined, precalculated amount of money from the target server.\\r\\n2. A weaken script counters the security increase of the hack script.\\r\\n3. A grow script counters the money decrease caused by the hack script.\\r\\n4. A weaken script counters the security increase caused by the grow script.\\r\\n\\r\\nIt is also important that these 4 scripts finish in the order specified above, and all of their effects be precalculated to optimize the ratios between them. \\r\\nThis is the reason for the delay in the scripts.\\r\\n\\r\\nIt is possible to create batches with 3 scripts (HGW) but the efficiency of grow will be harmed by the security increase caused by the hack scripts.\\r\\n\\r\\nThe following is an image demonstrating batches in action:\\r\\n\\r\\n../_images/batch.png\\r\\nBatches only function predictably when the target server is at minimum security and maximum money, so your script must also handle preparing \\r\\na server for your batches. You can utilize batches to prepare a server by using no hack threads during preparation.\\r\\n\\r\\nDepending on your computer’s performance as well as a few other factors, the necessary delay between script execution times may range \\r\\nbetween 20ms and 200ms, you want to fine-tune this value to be as low as possible while also avoiding your scripts finishing out of order. \\r\\nAnything lower than 20ms will not work due to javascript limitations.\\r\\n*/\\r\\n\\r\\nimport { DfsServer, traverse } from \\\"lib/traverse\\\";\\r\\n\\r\\n/*\\r\\nTODO:\\r\\n1. Calculate ram needed before batch is run\\r\\n2. Run scripts across all hacked computers for better RAM usage\\r\\n3. Don't fail on running out of ram partway through a batch, allow the loop to pick back up once it has the ram available\\r\\n*/\\r\\n\\r\\nconst SCRIPT_HACKING = \\\"src/batcher/hack.js\\\";\\r\\nconst SCRIPT_WEAKEN = \\\"src/batcher/weaken.js\\\";\\r\\nconst SCRIPT_GROWTH = \\\"src/batcher/grow.js\\\";\\r\\n\\r\\n/** Time between the WGHW steps, in ms */\\r\\nconst SETTLE_TIME = 50;\\r\\n\\r\\n/** Leave the server with 1% of it's money so grow doesn't have problems with $0.00 predictions */\\r\\nconst HACK_AMT = 0.99;\\r\\n\\r\\nclass BatchParameters {\\r\\n    /** How much of the hacking server's ram do we want to use for our batches? */\\r\\n    static MAX_RAM_USED = 0.25;\\r\\n\\r\\n    static MAX_BATCHES = 10;\\r\\n\\r\\n    static MAX_TIME_TO_FINISH = -1;\\r\\n\\r\\n    static DEFAULT_CORES = 1;\\r\\n}\\r\\nclass HGWFunction {\\r\\n    /** @type {Function} */\\r\\n    securityChange;\\r\\n    /** @type {Function} */\\r\\n    timeCalc;\\r\\n    /** @type {string} */\\r\\n    name;\\r\\n    /** @type {function} */\\r\\n    getNumThreads;\\r\\n\\r\\n    static HACK = undefined;\\r\\n    static GROW = undefined;\\r\\n    static WEAKEN = undefined;\\r\\n\\r\\n    /**\\r\\n     * @callback numThreadCallback\\r\\n     * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer\\r\\n     * @param {number} hackingCores\\r\\n     * @param {HGWFunction} hgwFunction\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * \\r\\n     * @param {string} name \\r\\n     * @param {Function} securityChangeFunction \\r\\n     * @param {Function} timeCalcFunction \\r\\n     * @param {numThreadCallback} getNumThreadFunction - Function to use to calculate how many threads need to be run based on whatever\\r\\n     */\\r\\n    constructor(name, securityChangeFunction, timeCalcFunction, getNumThreadFunction) {\\r\\n        this.name = name;\\r\\n        this.securityChange = securityChangeFunction;\\r\\n        this.timeCalc = timeCalcFunction;\\r\\n        this.getNumThreads = getNumThreadFunction;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchInfo {\\r\\n    /** @type {Array<RunInfo>} */\\r\\n    runs = [];\\r\\n}\\r\\nclass RunInfo {\\r\\n    /** @type {number} */\\r\\n    endTime = 0;\\r\\n    /** @type {number} */\\r\\n    threads = 0;\\r\\n    /** @type {string} */\\r\\n    script = \\\"\\\";\\r\\n    /** @type {import(\\\"./NetscriptDefinitions\\\").Server} */\\r\\n    targetServer;\\r\\n\\r\\n    constructor(endTime, threads, script, targetServer) {\\r\\n        this.endTime = endTime;\\r\\n        this.threads = threads;\\r\\n        this.script = script;\\r\\n        this.targetServer = targetServer;\\r\\n    }\\r\\n\\r\\n    get [Symbol.toStringTag]() {\\r\\n        return `${this.script}, threads: ${this.threads}, execution time: ${formatTime(this.endTime)}`;\\r\\n    }\\r\\n}\\r\\n\\r\\nconst LOG_TYPE = \\\"terminal\\\"; // or \\\"file\\\"\\r\\nlet logf;\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let flags = ns.flags([\\r\\n        [\\\"help\\\", false],\\r\\n        [\\\"infinite\\\", true]\\r\\n    ]);\\r\\n\\r\\n    switch (LOG_TYPE) {\\r\\n        case \\\"terminal\\\":\\r\\n            logf = ns.tprintf;\\r\\n            break;\\r\\n        // @ts-ignore\\r\\n        case \\\"file\\\":\\r\\n            logf = ns.printf;\\r\\n            break;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer \\r\\n     * @param {number} hackingCores \\r\\n     * @param {HGWFunction} hgwFunction \\r\\n     * @returns \\r\\n     */\\r\\n    let getNumWeakenThreads = (targetServer, hackingCores, hgwFunction) => {\\r\\n        return Math.ceil((targetServer.hackDifficulty - targetServer.minDifficulty) / hgwFunction.securityChange(1, hackingCores));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get the number of growth threads needed to max out available money.\\r\\n     * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer \\r\\n     * @param {number} hackingCores \\r\\n     * @param {HGWFunction} _hgwFunction\\r\\n     * @returns\\r\\n     */\\r\\n    let getNumGrowthThreads = (targetServer, hackingCores, _hgwFunction) => {\\r\\n        let multiplier = getGrowthMultiplier(targetServer); // threads, cores\\r\\n        return Math.ceil(Math.max(1, ns.growthAnalyze(targetServer.hostname, multiplier, hackingCores)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Return the number of threads required to hack all but {@link HACK_AMT}% of the money.\\r\\n     * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer \\r\\n     * @param {number} _hackingCores\\r\\n     * @param {HGWFunction} _hgwFunction\\r\\n     * @returns \\r\\n     */\\r\\n    let getNumHackThreads = (targetServer, _hackingCores, _hgwFunction) => {\\r\\n        let moneyToHack = targetServer.moneyAvailable * HACK_AMT;\\r\\n        let hackPerThread = ns.formulas.hacking.hackPercent(targetServer, ns.getPlayer());\\r\\n        return Math.round((moneyToHack / targetServer.moneyMax) / hackPerThread);\\r\\n    }\\r\\n    \\r\\n    HGWFunction.HACK = new HGWFunction(\\\"hack\\\", ns.hackAnalyzeSecurity, ns.formulas.hacking.hackTime, getNumHackThreads);\\r\\n    HGWFunction.GROW = new HGWFunction(\\\"grow\\\", ns.growthAnalyzeSecurity, ns.formulas.hacking.growTime, getNumGrowthThreads);\\r\\n    HGWFunction.WEAKEN = new HGWFunction(\\\"weaken\\\", ns.weakenAnalyze, ns.formulas.hacking.weakenTime, getNumWeakenThreads);\\r\\n\\r\\n    let target = String(flags[\\\"_\\\"][0]);\\r\\n    let targetServer = ns.getServer(target);\\r\\n\\r\\n    // Pre-prepare the target\\r\\n    let runList = await prepare(ns, targetServer.hostname, targetServer, true);\\r\\n\\r\\n    runList = runList.concat(runBatch(ns, targetServer));\\r\\n\\r\\n    logf(`Run list length: ${runList.length}`);\\r\\n\\r\\n    const executeResult = executeRunList(ns, runList);\\r\\n    // If it failed for whatever reason, stop us from doing anything else\\r\\n    if (executeResult == null) {\\r\\n        return;\\r\\n    }\\r\\n    // const runs = Math.min(BatchParameters.MAX_BATCHES, calculateAvailableBatchRuns(ns));\\r\\n\\r\\n    // do {\\r\\n    //     for (let i = 0; i < runs; ++i) {\\r\\n    //         if (i % 10 == 0) {\\r\\n    //             await ns.sleep(5); // Prevent the game from locking up\\r\\n    //         }\\r\\n\\r\\n    //         if (BatchParameters.MAX_TIME_TO_FINISH != -1 && execTime > BatchParameters.MAX_TIME_TO_FINISH) {\\r\\n    //             logf(`Exceeded max execution time of ${formatNum(BatchParameters.MAX_TIME_TO_FINISH)}, with ${execTime}. Terminating.`);\\r\\n    //             break;\\r\\n    //         }\\r\\n    //         execTime = runBatch(ns, targetServer, execTime);\\r\\n    //         logf(`Batch #${i + 1} queued on ${targetServer.hostname}, will complete in ${formatTime(execTime)}.`);\\r\\n    //     }\\r\\n    //     if (flags.infinite) {\\r\\n    //         logf(`Wait ${formatTime(execTime)} for batches to complete.`);\\r\\n    //         await ns.sleep(execTime);\\r\\n    //         execTime = 0;\\r\\n    //     }\\r\\n    // } while (flags.infinite);\\r\\n}\\r\\n\\r\\n/** \\r\\n * The way a batch works is you start all 4 scripts at the same time, but give them different\\r\\n * starting sleep times, so they will start at the correct time such that they finish very soon after the prior step.\\r\\n * \\r\\n * NOTE: Don't hack the server down to $0.00, it will probably cause the next grow run to have too many threads.\\r\\n * Or, if we do, run 1 grow cycle, but that seems potentially annoying.\\r\\n * \\r\\n * We require the target to have been pre-prepared.\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer - Server object to hack\\r\\n * @returns {Array<RunInfo>} - Array of RunInfos that need to be executed\\r\\n*/\\r\\nfunction runBatch(ns, targetServer) {\\r\\n    let execList = [];\\r\\n    execList.push(hack(ns, targetServer, lastElem(execList)?.endTime ?? 0));\\r\\n    execList.push(weaken(ns, targetServer, lastElem(execList).endTime));\\r\\n    execList.push(grow(ns, targetServer, lastElem(execList).endTime));\\r\\n    execList.push(weaken(ns, targetServer, lastElem(execList).endTime));\\r\\n\\r\\n    return execList;\\r\\n}\\r\\n\\r\\n/** \\r\\n * Ensure the target server is properly setup for the start of the batch hack\\r\\n * Runs WGW\\r\\n * \\r\\n * TODO: Wait on prepare scripts if we run out of ram for them\\r\\n * \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n * @param {string} targetName \\r\\n * @param {boolean} wait - Whether to wait for scripts to complete or not\\r\\n * @returns {Promise<Array<RunInfo>>} - Array of calculated runs\\r\\n*/\\r\\nasync function prepare(ns, targetName, targetServer, hackingServer, wait = false) {\\r\\n    const fudgeFactor = 0.05; // A server can be within this mult of it's min/max values and be considered 'done'\\r\\n    const curTargetServerSecurity = targetServer.hackDifficulty;\\r\\n    const curTargetServerMoney = targetServer.moneyAvailable;\\r\\n\\r\\n    /** @type {Array<RunInfo>} */\\r\\n    let curRunList = [];\\r\\n\\r\\n    logf(`Starting difficulty: ${formatNum(curTargetServerSecurity)}, min: ${formatNum(targetServer.minDifficulty)}`);\\r\\n    logf(`Starting money: $${formatMoney(curTargetServerMoney)}, max money: $${formatMoney(targetServer.moneyMax)}`);\\r\\n\\r\\n    // Don't need to weaken if it's at minimum\\r\\n    if (!approxEquals(curTargetServerSecurity, targetServer.minDifficulty, fudgeFactor)) {\\r\\n        curRunList.push(weaken(ns, targetServer, lastElem(curRunList)?.endTime ?? 0));\\r\\n    }\\r\\n\\r\\n    // Don't need to grow & weaken if the money is at max\\r\\n    if (!approxEquals(curTargetServerMoney, targetServer.moneyMax, fudgeFactor)) {\\r\\n        curRunList.push(grow(ns, targetServer, lastElem(curRunList)?.endTime ?? 0))\\r\\n        \\r\\n        // We've grown, so now we need to weaken again\\r\\n        // Our targetServer 'mock' object will have been updated by our grow function\\r\\n        curRunList.push(weaken(ns, targetServer, lastElem(curRunList)?.endTime ?? 0))\\r\\n    }\\r\\n\\r\\n    if(curRunList.length == 0) {\\r\\n        logf(\\\"Nothing to be done, server is already prepared.\\\");\\r\\n        return [];\\r\\n    }\\r\\n\\r\\n    if (wait) {\\r\\n        logf(\\\"Finished setting up prepare scripts, waiting for %s\\\", formatTime(lastElem(curRunList).endTime));\\r\\n        await ns.sleep(lastElem(curRunList).endTime);\\r\\n        // If we're waiting, then we should show this info after, but otherwise probably don't need to\\r\\n        targetServer = ns.getServer(targetName);\\r\\n        logf(\\\"Done.\\\\n%s: Security: %s, Money: $%s, Min Security: %s, Max Money: $%s\\\", targetName,\\r\\n            targetServer.hackDifficulty, targetServer.moneyAvailable, targetServer.minDifficulty, targetServer.moneyMax);\\r\\n    }\\r\\n\\r\\n    return curRunList;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Hack {@link HACK_AMT}% of money from the server.\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer \\r\\n * @returns {RunInfo} - Info required to run the action\\r\\n */\\r\\nfunction hack(ns, targetServer, delayStart) {\\r\\n    /** @type {RunInfo} */\\r\\n    const info = action(ns, SCRIPT_HACKING, targetServer, delayStart, HGWFunction.HACK, add);\\r\\n\\r\\n    let hackPerThread = ns.formulas.hacking.hackPercent(targetServer, ns.getPlayer());\\r\\n    targetServer.moneyAvailable = targetServer.moneyAvailable * (1 - (hackPerThread * info.threads));\\r\\n\\r\\n    return info;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Weaken target server to minimum security\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer \\r\\n * @returns {RunInfo} - Info required to run the action\\r\\n */\\r\\nfunction weaken(ns, targetServer, delayStart) {\\r\\n    return action(ns, SCRIPT_WEAKEN, targetServer, delayStart, HGWFunction.WEAKEN, add);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Grow target server to max money\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer \\r\\n * @param {number} delayStart - How long, in ms, to wait to start the grow function\\r\\n * @returns {RunInfo} - Info required to run the action\\r\\n */\\r\\nfunction grow(ns, targetServer, delayStart) {\\r\\n    const info = action(ns, SCRIPT_GROWTH, targetServer, delayStart, HGWFunction.GROW, add);\\r\\n    targetServer.moneyAvailable *= getGrowthMultiplier(targetServer);\\r\\n    return info;\\r\\n\\r\\n    // let growThreads = getNumGrowthThreads(ns, targetServer, hackingServer.cpuCores);\\r\\n\\r\\n    // Grow raises the security level of the target server by 0.004 per thread.\\r\\n    // let growSecurityAdd = ns.growthAnalyzeSecurity(growThreads, null, hackingServer.cpuCores);\\r\\n    // let growTime = ns.formulas.hacking.growTime(targetServer, ns.getPlayer());\\r\\n\\r\\n    // targetServer.hackDifficulty += growSecurityAdd;\\r\\n\\r\\n    // logf(\\\"Growth threads: %s, securityAdd: %s, time: %s\\\", growThreads, formatNum(growSecurityAdd), formatTime(growTime));\\r\\n    // runScript(ns, SCRIPT_GROWTH, targetName, growThreads, delayStart);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Generic function for hack, grow, or weaken.\\r\\n * Does update the security of the targetServer, but nothing else.\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {string} scriptName - What script to run\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").Server} targetServer\\r\\n * @param {HGWFunction} hgwFunction - What methods to use for analysis \\r\\n * @returns {RunInfo} - Constructed object for this run\\r\\n */\\r\\nfunction action(ns, scriptName, targetServer, delayStart, hgwFunction, difficultyOperator) {\\r\\n    let threads = hgwFunction.getNumThreads(targetServer, BatchParameters.DEFAULT_CORES, hgwFunction);\\r\\n    let runTime = hgwFunction.timeCalc(targetServer, ns.getPlayer());\\r\\n    // Let us pass in a method to handle adding or subtracting without a branch\\r\\n    // Clamp the value to min difficulty and 100\\r\\n    targetServer.hackDifficulty = clamp(\\r\\n        targetServer.minDifficulty,\\r\\n        difficultyOperator(targetServer.hackDifficulty, hgwFunction.securityChange(threads)),\\r\\n        100\\r\\n    );\\r\\n\\r\\n    logf(\\\"Action '%s', threads: %s, end time: %s\\\", hgwFunction.name, threads, formatTime(runTime));\\r\\n\\r\\n    return new RunInfo(delayStart + addSettleTime(runTime), threads, scriptName, targetServer);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Handle running the required script & threads somewhere on our accessible servers. \\r\\n * Want to keep acquiring the resources separate from the logic that determines what scripts to run,\\r\\n * since they're both complicated.\\r\\n * \\r\\n * Let's have this split runs up by thread if needed.\\r\\n * We'll sort all the servers we have access to by available ram, then go down the list, running as many threads \\r\\n * that can run on each server. \\r\\n * If we run out of ram on all available servers, we will kick off a sleep for an amount of time equal to\\r\\n * half the runtime of the script, then re-try.\\r\\n * When the function returns, all of the requested script runs will have been completed.\\r\\n * We have no way of knowing exactly how long it will take, so we'll have to wait for everything\\r\\n * to complete for the preparing stage.\\r\\n * I'm not sure how to deal with the batching part of it, though. Perhaps re-run whatever stage (HGW) we \\r\\n * got to initially, while skipping the earlier ones. We'd have to wait for the script execution time to \\r\\n * complete, otherwise the calculations won't make any sense.\\r\\n * \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {string} scriptName \\r\\n * @param {string} targetName \\r\\n * @param {number} threads \\r\\n * @param {number} startDelay \\r\\n */\\r\\nfunction runScript(ns, scriptName, targetName, threads, startDelay, tail = false) {\\r\\n\\r\\n    if (threads == 0) {\\r\\n        logf(`WARN: No work needed, aborting execution of '${scriptName}'`);\\r\\n        return;\\r\\n    }\\r\\n    // Make sure it doesn't require more ram than we have\\r\\n    const availableRam = ns.getServer().maxRam - ns.getServer().ramUsed;\\r\\n    const scriptRam = getScriptRam(ns, scriptName);\\r\\n\\r\\n    if (scriptRam * threads > availableRam) {\\r\\n        throw `ERROR: Trying to run ${scriptName} w/ ${threads} threads requires ${scriptRam * threads} RAM, `\\r\\n        + `more than the ${availableRam} we have available!`;\\r\\n    }\\r\\n    let pid = ns.run(scriptName, threads, startDelay, targetName);\\r\\n    if (pid == 0) {\\r\\n        throw `Problem running '${scriptName}', w/ ${threads} threads.`;\\r\\n    }\\r\\n\\r\\n    if (tail) ns.tail(pid, ns.getHostname());\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns -\\r\\n * @param {Array<RunInfo>} runList - List of all the RunInfos that we want to run. \\r\\n */\\r\\nfunction executeRunList(ns, runList) {\\r\\n    /** @type {RamAndNetwork} */\\r\\n    const ramNetwork = getTotalNetworkRam(ns);\\r\\n    const netRam = ramNetwork.ram;\\r\\n    const network = ramNetwork.servers;\\r\\n\\r\\n    logf(`Total network ram: ${netRam}`);\\r\\n    const ramNeeded = runList.reduce((accumulator, curVal) => accumulator + calculateRamNeeded(ns, curVal), 0);\\r\\n    logf(`Total ram needed: ${ramNeeded}`);\\r\\n    logf(\\\"Full network\\\");\\r\\n    ns.tprint(network);\\r\\n\\r\\n    // Check if there are any single operations that require more ram than we have in the whole network\\r\\n    // We can't run this list, so error out.\\r\\n    for (let i = 0; i < runList.length; i++) {\\r\\n        if (calculateRamNeeded(ns, runList[i]) > netRam) {\\r\\n            logf(`ERROR: Network RAM is insufficient to run the single RunInfo \\\"${runList[i].toString()}\\\"`)\\r\\n            return null;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n    // TODO: Change this to pause or something instead of failing\\r\\n    if (ramNeeded > netRam) {\\r\\n        logf(`ERROR: Don't have enough ram across the network to run the requested operation.`)\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n * @param {RunInfo} runInfo \\r\\n * @returns {number}\\r\\n */\\r\\nfunction calculateRamNeeded(ns, runInfo) {\\r\\n    return getScriptRam(ns, runInfo.script) * runInfo.threads;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @typedef {Object} RamAndNetwork\\r\\n * @property {number} ram - Total RAM of all servers in the network\\r\\n * @property {Set} servers - All servers in the network\\r\\n */\\r\\n\\r\\n/**\\r\\n * Get total RAM across all hacked networks on the network.\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @returns {RamAndNetwork} - RAM and network contents\\r\\n */\\r\\nfunction getTotalNetworkRam(ns) {\\r\\n    let ram = 0;\\r\\n    /**\\r\\n     * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns\\r\\n     * @param {import(\\\"./NetscriptDefinitions\\\").Server} server \\r\\n     */\\r\\n    let getRam = (ns, server) => {\\r\\n        ram += server.maxRam;\\r\\n    }\\r\\n    let visited = new Set();\\r\\n    DfsServer(ns, ns.getServer(), visited, getRam);\\r\\n    logf(\\\"get total done\\\")\\r\\n    // traverse(ns, ns.getServer().hostname, visited, getRam, { killScript: false});\\r\\n\\r\\n    return {ram: ram, servers: visited};\\r\\n}\\r\\n\\r\\n/** \\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS} ns \\r\\n * @param {string} scriptName \\r\\n */\\r\\nfunction getScriptRam(ns, scriptName) {\\r\\n    if (!scriptName.startsWith(\\\"/\\\")) scriptName = \\\"/\\\" + scriptName;\\r\\n    return ns.getScriptRam(scriptName);\\r\\n}\\r\\n\\r\\n// #region Lambda functions\\r\\n// ------------------------\\r\\n\\r\\n/** If the server has $0.00, calculate assuming it has $10 to avoid divide-by-zero errors */\\r\\nlet getGrowthMultiplier = (targetServer) => targetServer.moneyMax / Math.max(targetServer.moneyAvailable, 10);\\r\\n\\r\\n/** Function for {@link action} */\\r\\nlet subtract = (totalV, modifyV) => totalV - modifyV;\\r\\n/** Function for {@link action} */\\r\\nlet add = (totalV, modifyV) => totalV + modifyV;\\r\\n\\r\\n/** How long the gap between scripts should be, in ms. */\\r\\nlet addSettleTime = (timeMs) => timeMs + SETTLE_TIME;\\r\\n\\r\\n/**\\r\\n * @param {number} num1 Number to compare\\r\\n * @param {number} num2 Number to compare to\\r\\n * @param {number} fudge Percent of num2 that num1 is allowed to be below and/or above num2\\r\\n * @returns \\r\\n */\\r\\nlet approxEquals = (num1, num2, fudge) =>\\r\\n    (num1 >= num2 * (1 - fudge)) && (num1 <= num2 * (1 + fudge));\\r\\n\\r\\n// #endregion Lambda functions\\r\\n\\r\\n\\r\\n// #region Utility functions\\r\\n// -------------------------\\r\\n\\r\\n/**\\r\\n * Return the last element in the array\\r\\n * @template T\\r\\n * @param {Array<T>} arr \\r\\n * @returns {T}\\r\\n */\\r\\nfunction lastElem(arr) {\\r\\n    return arr[arr.length - 1];\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {number} time \\r\\n * @returns {string} - time in hhmmss format\\r\\n */\\r\\nfunction formatTime(time) {\\r\\n    let sec = time / 1000;\\r\\n    if (sec < 1) return `${formatNum(time)}ms`;\\r\\n\\r\\n    let hour = Math.round(sec / 3600);\\r\\n    sec = sec % 3600; // seconds remaining after extracting hours\\r\\n    let min = Math.round(sec / 60);\\r\\n    sec = Math.round(sec % 60); // seconds remaining after extracting minutes\\r\\n    return (hour != 0 ? `${hour}h` : \\\"\\\")\\r\\n        + (min != 0 ? `${min}m` : \\\"\\\")\\r\\n        + (`${sec}s`);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Default returns .toFixed(2)\\r\\n * @param {Number} num - Number to format\\r\\n * @returns {string} - Formatted number\\r\\n */\\r\\nfunction formatNum(num) {\\r\\n    if (num < 0.01) return num.toString();\\r\\n    return num.toFixed(2);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Add commas to number\\r\\n * @param {Number} money \\r\\n * @returns - Locale'd to 'en-US'\\r\\n */\\r\\nfunction formatMoney(money) {\\r\\n    return money.toLocaleString(\\\"en-US\\\");\\r\\n}\\r\\n\\r\\nfunction clamp(number, min, max) {\\r\\n    return Math.max(min, Math.min(number, max));\\r\\n}\\r\\n\\r\\n// #endregion\\r\\n\\r\\n/**\\r\\n * data (Object) – \\r\\n    args (string[]) – \\r\\n * @param {Object} data - general data about the game you might want to autocomplete. \\r\\n * @param {string[]} args - current arguments. Minus run script.js \\r\\n * @returns {string[]}\\r\\n */\\r\\nexport function autocomplete(data, args) {\\r\\n    return [...data.servers];\\r\\n}\",\"filename\":\"/src/hack-batcher.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///c2339eda-bbdf-440e-aafe-a4d943d30e9f\",\"moduleSequenceNumber\":182},{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///bd14bf2c-4b08-4254-b10e-2a6adc7942dc\",\"moduleSequenceNumber\":5772},{\"filename\":\"/src/hack-batcher.js\",\"url\":\"blob:file:///603a5de7-2a93-414f-a6df-789f8e43d060\",\"moduleSequenceNumber\":5947}],\"dependents\":[],\"ramUsage\":11.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hackAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"growthAnalyzeSecurity\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weakenAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    while(true) {\\r\\n        await ns.share();\\r\\n    }\\r\\n\\r\\n    // moneyList = [];\\r\\n    // await traverse(ns, \\\"home\\\", new Set(), toRun, { killScript: false });\\r\\n    // ns.tprint(\\\"finish traverse\\\")\\r\\n\\r\\n    // moneyList.sort((a, b) => a.moneyMax - b.moneyMax)\\r\\n\\r\\n    // ns.tprint(moneyList);\\r\\n    // ns.tprintf(\\\"Found total of %s servers\\\", moneyList.length);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @param {import(\\\"./NetscriptDefinitions\\\").NS } ns \\r\\n * @param {string} hostname \\r\\n */\\r\\n// function toRun(ns, hostname) {\\r\\n//     let server = ns.getServer(hostname);\\r\\n//     if (ONLY_ADMIN && server.hasAdminRights) {\\r\\n//         moneyList.push(server);\\r\\n//     }\\r\\n//     else if (!ONLY_ADMIN) {\\r\\n//         moneyList.push(server);\\r\\n//     }\\r\\n// }\\r\\n\",\"filename\":\"/src/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/share.js\",\"url\":\"blob:file:///4f5bf0ec-18c7-4090-b3d1-86dbb030dbbc\",\"moduleSequenceNumber\":6756}],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const state = {\\r\\n\\t// Name of the company that's infiltrated.\\r\\n\\tcompany: \\\"\\\",\\r\\n\\r\\n\\t// Whether infiltration started. False means, we're\\r\\n\\t// waiting to arrive on the infiltration screen.\\r\\n\\tstarted: false,\\r\\n\\r\\n\\t// Details/state of the current mini game.\\r\\n\\t// Is reset after every game.\\r\\n\\tgame: {},\\r\\n};\\r\\n\\r\\n// Speed of game actions, in milliseconds.\\r\\nconst speed = 30;\\r\\n\\r\\n// Small hack to save RAM.\\r\\n// This will work smoothly, because the script does not use\\r\\n// any \\\"ns\\\" functions, it's a pure browser automation tool.\\r\\nconst wnd = eval(\\\"window\\\");\\r\\nconst doc = wnd[\\\"document\\\"];\\r\\n\\r\\n// Auto sell infiltration data, set to false if you want rep\\r\\nlet autoSell = false;\\r\\nlet autoRep = false;\\r\\nlet factionForRep = \\\"Slum Snakes\\\";\\r\\n// List of all games and an automated solver.\\r\\nconst infiltrationGames = [\\r\\n\\t{\\r\\n\\t\\tname: \\\"type it\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tconst lines = screen.children[1].textContent;\\r\\n\\t\\t\\tstate.game.data = lines.split(\\\"\\\");\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tif (!state.game.data || !state.game.data.length) {\\r\\n\\t\\t\\t\\tdelete state.game.data;\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tpressKey(state.game.data.shift());\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"enter the code\\\",\\r\\n\\t\\tinit: function (screen) { },\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tconst h4 = getEl(screen, \\\"h4\\\");\\r\\n\\t\\t\\tconst code = h4[1].textContent;\\r\\n\\r\\n\\t\\t\\tswitch (code) {\\r\\n\\t\\t\\t\\tcase \\\"↑\\\":\\r\\n\\t\\t\\t\\t\\tpressKey(\\\"w\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase \\\"↓\\\":\\r\\n\\t\\t\\t\\t\\tpressKey(\\\"s\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase \\\"←\\\":\\r\\n\\t\\t\\t\\t\\tpressKey(\\\"a\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase \\\"→\\\":\\r\\n\\t\\t\\t\\t\\tpressKey(\\\"d\\\");\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"close the brackets\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tconst data = getLines(getEl(screen, \\\"p\\\"));\\r\\n\\t\\t\\tconst brackets = data.join(\\\"\\\").split(\\\"\\\");\\r\\n\\t\\t\\tstate.game.data = [];\\r\\n\\r\\n\\t\\t\\tfor (let i = brackets.length - 1; i >= 0; i--) {\\r\\n\\t\\t\\t\\tconst char = brackets[i];\\r\\n\\r\\n\\t\\t\\t\\tif (\\\"<\\\" == char) {\\r\\n\\t\\t\\t\\t\\tstate.game.data.push(\\\">\\\");\\r\\n\\t\\t\\t\\t} else if (\\\"(\\\" == char) {\\r\\n\\t\\t\\t\\t\\tstate.game.data.push(\\\")\\\");\\r\\n\\t\\t\\t\\t} else if (\\\"{\\\" == char) {\\r\\n\\t\\t\\t\\t\\tstate.game.data.push(\\\"}\\\");\\r\\n\\t\\t\\t\\t} else if (\\\"[\\\" == char) {\\r\\n\\t\\t\\t\\t\\tstate.game.data.push(\\\"]\\\");\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tif (!state.game.data || !state.game.data.length) {\\r\\n\\t\\t\\t\\tdelete state.game.data;\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tpressKey(state.game.data.shift());\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"attack when his guard is down\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tstate.game.data = \\\"wait\\\";\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tconst data = getLines(getEl(screen, \\\"h4\\\"));\\r\\n\\r\\n\\t\\t\\tif ('wait' === state.game.data && data.indexOf(\\\"Preparing?\\\") !== -1) {\\r\\n\\t\\t\\t\\tconsole.log(\\\"Found 'Preparing', pressing space\\\");\\r\\n\\t\\t\\t\\tpressKey(\\\" \\\");\\r\\n\\t\\t\\t\\tconsole.log(state.game);\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"say something nice about the guard\\\",\\r\\n\\t\\tinit: function (screen) { },\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tconst correct = [\\r\\n\\t\\t\\t\\t\\\"affectionate\\\",\\r\\n\\t\\t\\t\\t\\\"agreeable\\\",\\r\\n\\t\\t\\t\\t\\\"bright\\\",\\r\\n\\t\\t\\t\\t\\\"charming\\\",\\r\\n\\t\\t\\t\\t\\\"creative\\\",\\r\\n\\t\\t\\t\\t\\\"determined\\\",\\r\\n\\t\\t\\t\\t\\\"energetic\\\",\\r\\n\\t\\t\\t\\t\\\"friendly\\\",\\r\\n\\t\\t\\t\\t\\\"funny\\\",\\r\\n\\t\\t\\t\\t\\\"generous\\\",\\r\\n\\t\\t\\t\\t\\\"polite\\\",\\r\\n\\t\\t\\t\\t\\\"likable\\\",\\r\\n\\t\\t\\t\\t\\\"diplomatic\\\",\\r\\n\\t\\t\\t\\t\\\"helpful\\\",\\r\\n\\t\\t\\t\\t\\\"giving\\\",\\r\\n\\t\\t\\t\\t\\\"kind\\\",\\r\\n\\t\\t\\t\\t\\\"hardworking\\\",\\r\\n\\t\\t\\t\\t\\\"patient\\\",\\r\\n\\t\\t\\t\\t\\\"dynamic\\\",\\r\\n\\t\\t\\t\\t\\\"loyal\\\",\\r\\n\\t\\t\\t\\t\\\"straightforward\\\"\\r\\n\\t\\t\\t];\\r\\n\\t\\t\\tconst word = getLines(getEl(screen, \\\"h5\\\"))[1];\\r\\n\\r\\n\\t\\t\\tif (-1 !== correct.indexOf(word)) {\\r\\n\\t\\t\\t\\tpressKey(\\\" \\\");\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tpressKey(\\\"w\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"remember all the mines\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tconst rows = getEl(screen, \\\"p\\\");\\r\\n\\t\\t\\tlet gridSize = null;\\r\\n\\t\\t\\tswitch (rows.length) {\\r\\n\\t\\t\\t\\tcase 9:\\r\\n\\t\\t\\t\\t\\tgridSize = [3, 3];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 12:\\r\\n\\t\\t\\t\\t\\tgridSize = [3, 4];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 16:\\r\\n\\t\\t\\t\\t\\tgridSize = [4, 4];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 20:\\r\\n\\t\\t\\t\\t\\tgridSize = [4, 5];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 25:\\r\\n\\t\\t\\t\\t\\tgridSize = [5, 5];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 30:\\r\\n\\t\\t\\t\\t\\tgridSize = [5, 6];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 36:\\r\\n\\t\\t\\t\\t\\tgridSize = [6, 6];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (gridSize == null) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//12 20 30 42\\r\\n\\t\\t\\tstate.game.data = [];\\r\\n\\t\\t\\tlet index = 0;\\r\\n\\t\\t\\t//for each row\\r\\n\\t\\t\\tfor (let y = 0; y < gridSize[1]; y++) {\\r\\n\\t\\t\\t\\t//initialize array data\\r\\n\\t\\t\\t\\tstate.game.data[y] = [];\\r\\n\\t\\t\\t\\tfor (let x = 0; x < gridSize[0]; x++) {\\r\\n\\t\\t\\t\\t\\t//for each column in the row add to state data if it has a child\\r\\n\\t\\t\\t\\t\\tif (rows[index].children.length > 0) {\\r\\n\\t\\t\\t\\t\\t\\tstate.game.data[y].push(true);\\r\\n\\t\\t\\t\\t\\t} else state.game.data[y].push(false);\\r\\n\\t\\t\\t\\t\\tindex += 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) { },\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"mark all the mines\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tstate.game.x = 0;\\r\\n\\t\\t\\tstate.game.y = 0;\\r\\n\\t\\t\\tstate.game.cols = state.game.data[0].length;\\r\\n\\t\\t\\tstate.game.dir = 1;\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tlet { data, x, y, cols, dir } = state.game;\\r\\n\\r\\n\\t\\t\\tif (data[y][x]) {\\r\\n\\t\\t\\t\\tpressKey(\\\" \\\");\\r\\n\\t\\t\\t\\tdata[y][x] = false;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tx += dir;\\r\\n\\r\\n\\t\\t\\tif (x < 0 || x >= cols) {\\r\\n\\t\\t\\t\\tx = Math.max(0, Math.min(cols - 1, x));\\r\\n\\t\\t\\t\\ty++;\\r\\n\\t\\t\\t\\tdir *= -1;\\r\\n\\t\\t\\t\\tpressKey(\\\"s\\\");\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tpressKey(dir > 0 ? \\\"d\\\" : \\\"a\\\");\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.game.data = data;\\r\\n\\t\\t\\tstate.game.x = x;\\r\\n\\t\\t\\tstate.game.y = y;\\r\\n\\t\\t\\tstate.game.dir = dir;\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"match the symbols\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tconst data = getLines(getEl(screen, \\\"h5 span\\\"));\\r\\n\\t\\t\\tconst rows = getLines(getEl(screen, \\\"p\\\"));\\r\\n\\t\\t\\tconst keypad = [];\\r\\n\\t\\t\\tconst targets = [];\\r\\n\\t\\t\\tlet gridSize = null;\\r\\n\\t\\t\\tswitch (rows.length) {\\r\\n\\t\\t\\t\\tcase 9:\\r\\n\\t\\t\\t\\t\\tgridSize = [3, 3];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 12:\\r\\n\\t\\t\\t\\t\\tgridSize = [3, 4];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 16:\\r\\n\\t\\t\\t\\t\\tgridSize = [4, 4];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 20:\\r\\n\\t\\t\\t\\t\\tgridSize = [4, 5];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 25:\\r\\n\\t\\t\\t\\t\\tgridSize = [5, 5];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 30:\\r\\n\\t\\t\\t\\t\\tgridSize = [5, 6];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\tcase 36:\\r\\n\\t\\t\\t\\t\\tgridSize = [6, 6];\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (gridSize == null) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//build the keypad grid.\\r\\n\\t\\t\\tlet index = 0;\\r\\n\\t\\t\\tfor (let i = 0; i < gridSize[1]; i++) {\\r\\n\\t\\t\\t\\tkeypad[i] = [];\\r\\n\\t\\t\\t\\tfor (let y = 0; y < gridSize[0]; y++) {\\r\\n\\r\\n\\t\\t\\t\\t\\tkeypad[i].push(rows[index]);\\r\\n\\t\\t\\t\\t\\tindex += 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//foreach data get coords of keypad entry\\r\\n\\t\\t\\tfor (let i = 0; i < data.length; i++) {\\r\\n\\t\\t\\t\\tconst symbol = data[i].trim();\\r\\n\\t\\t\\t\\t//for each keypad entry\\r\\n\\t\\t\\t\\tfor (let j = 0; j < keypad.length; j++) {\\r\\n\\t\\t\\t\\t\\tconst k = keypad[j].indexOf(symbol);\\r\\n\\r\\n\\t\\t\\t\\t\\tif (-1 !== k) {\\r\\n\\t\\t\\t\\t\\t\\ttargets.push([j, k]);\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tstate.game.data = targets;\\r\\n\\t\\t\\tstate.game.x = 0;\\r\\n\\t\\t\\tstate.game.y = 0;\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tconst target = state.game.data[0];\\r\\n\\t\\t\\tlet { x, y } = state.game;\\r\\n\\r\\n\\t\\t\\tif (!target) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tconst to_y = target[0];\\r\\n\\t\\t\\tconst to_x = target[1];\\r\\n\\r\\n\\t\\t\\tif (to_y < y) {\\r\\n\\t\\t\\t\\ty--;\\r\\n\\t\\t\\t\\tpressKey(\\\"w\\\");\\r\\n\\t\\t\\t} else if (to_y > y) {\\r\\n\\t\\t\\t\\ty++;\\r\\n\\t\\t\\t\\tpressKey(\\\"s\\\");\\r\\n\\t\\t\\t} else if (to_x < x) {\\r\\n\\t\\t\\t\\tx--;\\r\\n\\t\\t\\t\\tpressKey(\\\"a\\\");\\r\\n\\t\\t\\t} else if (to_x > x) {\\r\\n\\t\\t\\t\\tx++;\\r\\n\\t\\t\\t\\tpressKey(\\\"d\\\");\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tpressKey(\\\" \\\");\\r\\n\\t\\t\\t\\tstate.game.data.shift();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tstate.game.x = x;\\r\\n\\t\\t\\tstate.game.y = y;\\r\\n\\t\\t},\\r\\n\\t},\\r\\n\\t{\\r\\n\\t\\tname: \\\"cut the wires with the following properties\\\",\\r\\n\\t\\tinit: function (screen) {\\r\\n\\t\\t\\tlet numberHack = [\\\"1\\\", \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\", \\\"8\\\", \\\"9\\\"];\\r\\n\\t\\t\\tconst colors = {\\r\\n\\t\\t\\t\\tred: \\\"red\\\",\\r\\n\\t\\t\\t\\twhite: \\\"white\\\",\\r\\n\\t\\t\\t\\tblue: \\\"blue\\\",\\r\\n\\t\\t\\t\\t\\\"rgb(255, 193, 7)\\\": \\\"yellow\\\",\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\tconst wireColor = {\\r\\n\\t\\t\\t\\tred: [],\\r\\n\\t\\t\\t\\twhite: [],\\r\\n\\t\\t\\t\\tblue: [],\\r\\n\\t\\t\\t\\tyellow: [],\\r\\n\\t\\t\\t};\\r\\n\\t\\t\\t//gather the instructions\\r\\n\\t\\t\\tvar instructions = []\\r\\n\\t\\t\\tfor (let child of screen.children) instructions.push(child);\\r\\n\\t\\t\\tvar wiresData = instructions.pop();\\r\\n\\t\\t\\tinstructions.shift();\\r\\n\\t\\t\\tinstructions = getLines(instructions);\\r\\n\\t\\t\\t//get the wire information\\r\\n\\t\\t\\tconst samples = getEl(wiresData, \\\"p\\\");\\r\\n\\t\\t\\tconst wires = [];\\r\\n\\t\\t\\t//get the amount of wires\\r\\n\\t\\t\\tlet wireCount = 0;\\r\\n\\t\\t\\tfor (let i = wireCount; i < samples.length; i++) {\\r\\n\\t\\t\\t\\tif (numberHack.includes(samples[i].innerText)) wireCount += 1;\\r\\n\\t\\t\\t\\telse break;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet index = 0;\\r\\n\\t\\t\\t//get just the first 3 rows of wires.\\r\\n\\t\\t\\tfor (let i = 0; i < 3; i++) {\\r\\n\\t\\t\\t\\t//for each row\\r\\n\\t\\t\\t\\tfor (let j = 0; j < wireCount; j++) {\\r\\n\\t\\t\\t\\t\\tconst node = samples[index];\\r\\n\\t\\t\\t\\t\\tconst color = colors[node.style.color];\\r\\n\\t\\t\\t\\t\\tif (!color) {\\r\\n\\t\\t\\t\\t\\t\\tindex += 1;\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\twireColor[color].push(j + 1);\\r\\n\\t\\t\\t\\t\\tindex += 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor (let i = 0; i < instructions.length; i++) {\\r\\n\\t\\t\\t\\tconst line = instructions[i].trim().toLowerCase();\\r\\n\\r\\n\\t\\t\\t\\tif (!line || line.length < 10) {\\r\\n\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (-1 !== line.indexOf(\\\"cut wires number\\\")) {\\r\\n\\t\\t\\t\\t\\tconst parts = line.split(/(number\\\\s*|\\\\.)/);\\r\\n\\t\\t\\t\\t\\twires.push(parseInt(parts[2]));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (-1 !== line.indexOf(\\\"cut all wires colored\\\")) {\\r\\n\\t\\t\\t\\t\\tconst parts = line.split(/(colored\\\\s*|\\\\.)/);\\r\\n\\t\\t\\t\\t\\tconst color = parts[2];\\r\\n\\r\\n\\t\\t\\t\\t\\tif (!wireColor[color]) {\\r\\n\\t\\t\\t\\t\\t\\t// should never happen.\\r\\n\\t\\t\\t\\t\\t\\tconsole.error('No wire color found!');\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\twireColor[color].forEach((num) => wires.push(num));\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// new Set() removes duplicate elements.\\r\\n\\t\\t\\tstate.game.data = [...new Set(wires)];\\r\\n\\t\\t},\\r\\n\\t\\tplay: function (screen) {\\r\\n\\t\\t\\tconst wire = state.game.data;\\r\\n\\t\\t\\t//state.game.data.shift();\\r\\n\\t\\t\\tif (!wire) {\\r\\n\\t\\t\\t\\treturn;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor (let i = 0; i < wire.length; i++) {\\r\\n\\t\\t\\t\\tpressKey(wire[i].toString());\\r\\n\\t\\t\\t}\\r\\n\\t\\t},\\r\\n\\t},\\r\\n];\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tconst args = ns.flags([\\r\\n\\t\\t[\\\"start\\\", false],\\r\\n\\t\\t[\\\"stop\\\", false],\\r\\n\\t\\t[\\\"status\\\", false],\\r\\n\\t\\t[\\\"quiet\\\", false],\\r\\n\\t\\t[\\\"help\\\", false],\\r\\n\\t\\t[\\\"sell\\\", false],\\r\\n\\t\\t[\\\"rep\\\", \\\"\\\"],\\r\\n\\t]);\\r\\n\\r\\n\\tif (args.help) {\\r\\n\\t\\tlet msg = \\\"usage: run infiltration.js [quiet] [sell | rep factionName] [start | stop | status | help]\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\n\\\" +\\r\\n\\t\\t\\t\\\"flags:\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\tstart\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\tstop\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\tstatus\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\tquiet\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\thelp\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\tsell - boolen, if should auto sell or not\\\\n\\\" +\\r\\n\\t\\t\\t\\\"\\\\trep - string, what faction to gain rep with\\\";\\r\\n\\t\\tprint(msg);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tfunction print(msg) {\\r\\n\\t\\tif (!args.quiet) {\\r\\n\\t\\t\\tns.tprint(`\\\\n${msg}\\\\n`);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tif (args.status) {\\r\\n\\t\\tif (wnd.tmrAutoInf) {\\r\\n\\t\\t\\tprint(\\\"Automated infiltration is active\\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tprint(\\\"Automated infiltration is inactive\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (wnd.tmrAutoInf) {\\r\\n\\t\\tprint(\\\"Stopping automated infiltration...\\\");\\r\\n\\t\\tclearInterval(wnd.tmrAutoInf);\\r\\n\\t\\tdelete wnd.tmrAutoInf;\\r\\n\\t}\\r\\n\\r\\n\\tif (args.stop) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tautoSell = args.sell;\\r\\n\\tautoRep = args.rep != \\\"\\\";\\r\\n\\tfactionForRep = args.rep;\\r\\n\\tif (autoSell && autoRep) {\\r\\n\\t\\tprint(\\\"ERROR: Can't sell and gain rep at the same time, pick one.\\\");\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tlet msg = \\\"Automated infiltration is enabled...\\\\nWhen you visit the infiltration screen of any company, all tasks are completed automatically.\\\";\\r\\n\\tif (autoSell) {\\r\\n\\t\\tmsg += `\\\\nAutomatic SELLING on.`;\\r\\n\\t}\\r\\n\\telse if (autoRep) {\\r\\n\\t\\tmsg += `\\\\nAutomatic REP on, with '${factionForRep}'.`;\\r\\n\\t}\\r\\n\\tprint(msg);\\r\\n\\r\\n\\tendInfiltration();\\r\\n\\r\\n\\t// Monitor the current screen and start infiltration once a\\r\\n\\t// valid screen is detected.\\r\\n\\twnd.tmrAutoInf = setInterval(infLoop, speed);\\r\\n\\r\\n\\t// Modify the addEventListener logic.\\r\\n\\twrapEventListeners();\\r\\n}\\r\\n\\r\\n/**\\r\\n * The infiltration loop, which is called at a rapid interval\\r\\n */\\r\\nfunction infLoop() {\\r\\n\\tif (!state.started) {\\r\\n\\t\\twaitForStart();\\r\\n\\t} else {\\r\\n\\t\\tplayGame();\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/**\\r\\n * Returns a list of DOM elements from the main game\\r\\n * container.\\r\\n */\\r\\nfunction getEl(parent, selector) {\\r\\n\\tlet prefix = \\\":scope\\\";\\r\\n\\r\\n\\tif (\\\"string\\\" === typeof parent) {\\r\\n\\t\\tselector = parent;\\r\\n\\t\\tparent = doc;\\r\\n\\r\\n\\t\\tprefix = \\\".MuiBox-root>.MuiBox-root>.MuiBox-root\\\";\\r\\n\\r\\n\\t\\tif (!doc.querySelectorAll(prefix).length) {\\r\\n\\t\\t\\tprefix = \\\".MuiBox-root>.MuiBox-root>.MuiGrid-root\\\";\\r\\n\\t\\t}\\r\\n\\t\\tif (!doc.querySelectorAll(prefix).length) {\\r\\n\\t\\t\\tprefix = \\\".MuiContainer-root>.MuiPaper-root\\\";\\r\\n\\t\\t}\\r\\n\\t\\tif (!doc.querySelectorAll(prefix).length) {\\r\\n\\t\\t\\treturn [];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tselector = selector.split(\\\",\\\");\\r\\n\\tselector = selector.map((item) => `${prefix} ${item}`);\\r\\n\\tselector = selector.join(\\\",\\\");\\r\\n\\r\\n\\treturn parent.querySelectorAll(selector);\\r\\n}\\r\\n\\r\\n/**\\r\\n * Returns the first element with matching text content.\\r\\n */\\r\\nfunction filterByText(elements, text) {\\r\\n\\ttext = text.toLowerCase();\\r\\n\\r\\n\\tfor (let i = 0; i < elements.length; i++) {\\r\\n\\t\\tconst content = elements[i].textContent.toLowerCase();\\r\\n\\r\\n\\t\\tif (-1 !== content.indexOf(text)) {\\r\\n\\t\\t\\treturn elements[i];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn null;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Returns an array with the text-contents of the given elements.\\r\\n *\\r\\n * @param {NodeList} elements\\r\\n * @returns {string[]}\\r\\n */\\r\\nfunction getLines(elements) {\\r\\n\\tconst lines = [];\\r\\n\\telements.forEach((el) => lines.push(el.textContent));\\r\\n\\r\\n\\treturn lines;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Reset the state after infiltration is done.\\r\\n */\\r\\nfunction endInfiltration() {\\r\\n\\tconsole.log(\\\"Ending automatic infiltration of\\\", state.company);\\r\\n\\tunwrapEventListeners();\\r\\n\\tstate.company = \\\"\\\";\\r\\n\\tstate.started = false;\\r\\n\\tdelete state.game.data;\\r\\n\\tstate.game.current = \\\"\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * Simulate a keyboard event (keydown + keyup).\\r\\n *\\r\\n * @param {string|int} keyOrCode A single letter (string) or key-code to send.\\r\\n */\\r\\nfunction pressKey(keyOrCode) {\\r\\n\\tlet keyCode = 0;\\r\\n\\tlet key = \\\"\\\";\\r\\n\\r\\n\\tif (\\\"string\\\" === typeof keyOrCode && keyOrCode.length > 0) {\\r\\n\\t\\tkey = keyOrCode.toLowerCase().substr(0, 1);\\r\\n\\t\\tkeyCode = key.charCodeAt(0);\\r\\n\\t} else if (\\\"number\\\" === typeof keyOrCode) {\\r\\n\\t\\tkeyCode = keyOrCode;\\r\\n\\t\\tkey = String.fromCharCode(keyCode);\\r\\n\\t}\\r\\n\\r\\n\\tif (!keyCode || key.length !== 1) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tfunction sendEvent(event) {\\r\\n\\t\\tconst keyboardEvent = new KeyboardEvent(event, {\\r\\n\\t\\t\\tkey,\\r\\n\\t\\t\\tkeyCode,\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\tdoc.dispatchEvent(keyboardEvent);\\r\\n\\t}\\r\\n\\r\\n\\tsendEvent(\\\"keydown\\\");\\r\\n}\\r\\n\\r\\n/**\\r\\n * Infiltration monitor to start automatic infiltration.\\r\\n *\\r\\n * This function runs asynchronously, after the \\\"main\\\" function ended,\\r\\n * so we cannot use any \\\"ns\\\" function here!\\r\\n */\\r\\nfunction waitForStart() {\\r\\n\\tif (state.started) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tconst h4 = getEl(\\\"h4\\\");\\r\\n\\r\\n\\tif (!h4.length) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tconst title = h4[0].textContent;\\r\\n\\tif (0 !== title.indexOf(\\\"Infiltrating\\\")) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tconst btnStart = filterByText(getEl(\\\"button\\\"), \\\"Start\\\");\\r\\n\\tif (!btnStart) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tstate.company = title.substr(13);\\r\\n\\tstate.started = true;\\r\\n\\twrapEventListeners();\\r\\n\\r\\n\\tconsole.log(\\\"Start automatic infiltration of\\\", state.company);\\r\\n\\tbtnStart.click();\\r\\n}\\r\\n\\r\\n/**\\r\\n * Identify the current infiltration game.\\r\\n */\\r\\nfunction playGame() {\\r\\n\\tconst screens = doc.querySelectorAll(\\\".MuiContainer-root\\\");\\r\\n\\r\\n\\tif (!screens.length) {\\r\\n\\t\\t//endInfiltration();\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\t// the correct screen is always the last one\\r\\n\\tconst screen = screens[0].lastChild;\\r\\n\\tif (!screen) { return; }\\r\\n\\tconst h4 = getEl(screen, \\\"h4\\\");\\r\\n\\r\\n\\tif (!h4.length) {\\r\\n\\t\\tendInfiltration();\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tlet title = h4[0].textContent.trim().toLowerCase().split(/[!.(]/)[0];\\r\\n\\tif (\\\"infiltration successful\\\" === title) {\\r\\n\\t\\tif (autoSell) {\\r\\n\\t\\t\\tlet btnSell = [...doc.querySelectorAll('button')].find(btn => btn.textContent.includes('Sell'));\\r\\n\\t\\t\\tbtnSell[Object.keys(btnSell)[1]].onClick({ isTrusted: true });\\r\\n\\t\\t} else if (autoRep) {\\r\\n\\t\\t\\t// open the drop down list.\\r\\n\\t\\t\\tlet dropDown = [...doc.querySelectorAll('.MuiSelect-select')].find(btn => btn.textContent.includes('none'))\\r\\n\\t\\t\\tdropDown.dispatchEvent(\\r\\n\\t\\t\\t\\tnew MouseEvent('mousedown', {\\r\\n\\t\\t\\t\\t\\tview: wnd,\\r\\n\\t\\t\\t\\t\\tbubbles: true,\\r\\n\\t\\t\\t\\t\\tcancelable: true,\\r\\n\\t\\t\\t\\t\\tbuttons: 1\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t// Get the faction list item and the rep button\\r\\n\\t\\t\\tlet btnFaction = [...doc.querySelectorAll('.MuiMenuItem-root')].find(btn => btn.textContent.includes(factionForRep));\\r\\n\\t\\t\\tlet btnRep = [...doc.querySelectorAll('button')].find(btn => btn.textContent.includes('Trade'));\\r\\n\\t\\t\\t// make sure the faction button exists\\r\\n\\t\\t\\tif (!btnFaction) {\\r\\n\\t\\t\\t\\tconsole.log(factionForRep + \\\" is not an available faction.\\\");\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// click the buttons\\r\\n\\t\\t\\t\\tbtnFaction.click();\\r\\n\\t\\t\\t\\tbtnRep.click();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tendInfiltration();\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tif (\\\"get ready\\\" === title) {\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\tif (title.includes('backward')) { title = 'type it'; }\\r\\n\\tconst game = infiltrationGames.find((game) => game.name === title);\\r\\n\\r\\n\\tif (game) {\\r\\n\\t\\tif (state.game.current !== title) {\\r\\n\\t\\t\\tif (!title.includes('mines')) { delete state.game.data; }\\r\\n\\t\\t\\tstate.game.current = title;\\r\\n\\t\\t\\tgame.init(screen);\\r\\n\\t\\t}\\r\\n\\t\\tgame.play(screen);\\r\\n\\t} else {\\r\\n\\t\\tconsole.error(\\\"Unknown game:\\\", title);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/**\\r\\n * Wrap all event listeners with a custom function that injects\\r\\n * the \\\"isTrusted\\\" flag.\\r\\n *\\r\\n * Is this cheating? Or is it real hacking? Don't care, as long\\r\\n * as it's working :)\\r\\n */\\r\\nfunction wrapEventListeners() {\\r\\n\\tif (!doc._addEventListener) {\\r\\n\\t\\tdoc._addEventListener = doc.addEventListener;\\r\\n\\r\\n\\t\\tdoc.addEventListener = function (type, callback, options) {\\r\\n\\t\\t\\tif (\\\"undefined\\\" === typeof options) {\\r\\n\\t\\t\\t\\toptions = false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet handler = false;\\r\\n\\r\\n\\t\\t\\t// For this script, we only want to modify \\\"keydown\\\" events.\\r\\n\\t\\t\\tif (\\\"keydown\\\" === type) {\\r\\n\\t\\t\\t\\thandler = function (...args) {\\r\\n\\t\\t\\t\\t\\tif (!args[0].isTrusted) {\\r\\n\\t\\t\\t\\t\\t\\tconst hackedEv = {};\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tfor (const key in args[0]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (\\\"isTrusted\\\" === key) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\thackedEv.isTrusted = true;\\r\\n\\t\\t\\t\\t\\t\\t\\t} else if (\\\"function\\\" === typeof args[0][key]) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\thackedEv[key] = args[0][key].bind(args[0]);\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\thackedEv[key] = args[0][key];\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\targs[0] = hackedEv;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\treturn callback.apply(callback, args);\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tfor (const prop in callback) {\\r\\n\\t\\t\\t\\t\\tif (\\\"function\\\" === typeof callback[prop]) {\\r\\n\\t\\t\\t\\t\\t\\thandler[prop] = callback[prop].bind(callback);\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\thandler[prop] = callback[prop];\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!this.eventListeners) {\\r\\n\\t\\t\\t\\tthis.eventListeners = {};\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (!this.eventListeners[type]) {\\r\\n\\t\\t\\t\\tthis.eventListeners[type] = [];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tthis.eventListeners[type].push({\\r\\n\\t\\t\\t\\tlistener: callback,\\r\\n\\t\\t\\t\\tuseCapture: options,\\r\\n\\t\\t\\t\\twrapped: handler,\\r\\n\\t\\t\\t});\\r\\n\\r\\n\\t\\t\\treturn this._addEventListener(\\r\\n\\t\\t\\t\\ttype,\\r\\n\\t\\t\\t\\thandler ? handler : callback,\\r\\n\\t\\t\\t\\toptions\\r\\n\\t\\t\\t);\\r\\n\\t\\t};\\r\\n\\t}\\r\\n\\r\\n\\tif (!doc._removeEventListener) {\\r\\n\\t\\tdoc._removeEventListener = doc.removeEventListener;\\r\\n\\r\\n\\t\\tdoc.removeEventListener = function (type, callback, options) {\\r\\n\\t\\t\\tif (\\\"undefined\\\" === typeof options) {\\r\\n\\t\\t\\t\\toptions = false;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!this.eventListeners) {\\r\\n\\t\\t\\t\\tthis.eventListeners = {};\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (!this.eventListeners[type]) {\\r\\n\\t\\t\\t\\tthis.eventListeners[type] = [];\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tfor (let i = 0; i < this.eventListeners[type].length; i++) {\\r\\n\\t\\t\\t\\tif (\\r\\n\\t\\t\\t\\t\\tthis.eventListeners[type][i].listener === callback &&\\r\\n\\t\\t\\t\\t\\tthis.eventListeners[type][i].useCapture === options\\r\\n\\t\\t\\t\\t) {\\r\\n\\t\\t\\t\\t\\tif (this.eventListeners[type][i].wrapped) {\\r\\n\\t\\t\\t\\t\\t\\tcallback = this.eventListeners[type][i].wrapped;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\tthis.eventListeners[type].splice(i, 1);\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (this.eventListeners[type].length == 0) {\\r\\n\\t\\t\\t\\tdelete this.eventListeners[type];\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn this._removeEventListener(type, callback, options);\\r\\n\\t\\t};\\r\\n\\t}\\r\\n}\\r\\n\\r\\n/**\\r\\n * Revert the \\\"wrapEventListeners\\\" changes.\\r\\n */\\r\\nfunction unwrapEventListeners() {\\r\\n\\tif (doc._addEventListener) {\\r\\n\\t\\tdoc.addEventListener = doc._addEventListener;\\r\\n\\t\\tdelete doc._addEventListener;\\r\\n\\t}\\r\\n\\tif (doc._removeEventListener) {\\r\\n\\t\\tdoc.removeEventListener = doc._removeEventListener;\\r\\n\\t\\tdelete doc._removeEventListener;\\r\\n\\t}\\r\\n\\tdelete doc.eventListeners;\\r\\n}\\r\\n\\r\\n/**\\r\\n * data (Object) – \\r\\n\\targs (string[]) – \\r\\n * @param {Object} data - general data about the game you might want to autocomplete. \\r\\n * @param {string[]} args - current arguments. Minus run script.js \\r\\n * @returns {string[]}\\r\\n */\\r\\nexport function autocomplete(data, args) {\\r\\n\\t// return {\\\"test\\\": \\\"testing\\\"};\\r\\n\\treturn [\\\"CyberSec\\\", \\\"Tian Di Hui\\\", \\\"Netburners\\\", \\\"Shadows of Anarchy\\\", \\\"Sector-12\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Aevum\\\", \\\"Volhaven\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\", \\\"BitRunners\\\", \\\"ECorp\\\", \\\"MegaCorp\\\", \\\"KuaiGong International\\\", \\\"Four Sigma\\\", \\\"NWO\\\", \\\"Blade Industries\\\", \\\"OmniTek Incorporated\\\", \\\"Bachman & Associates\\\", \\\"Clarke Incorporated\\\", \\\"Fulcrum Secret Technologies\\\", \\\"Slum Snakes\\\", \\\"Tetrads\\\", \\\"Silhouette\\\", \\\"Speakers for the Dead\\\", \\\"The Dark Army\\\", \\\"The Syndicate\\\", \\\"The Covenant\\\", \\\"Daedalus\\\", \\\"Illuminati\\\", \\\"Bladeburners\\\", \\\"Church of the\\\", \\\"Machine God\\\"];\\r\\n}\\r\\n\",\"filename\":\"/src/automated-infiltration.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/automated-infiltration.js\",\"url\":\"blob:file:///da58f23d-25bd-4cb6-bd6a-32168c1d15d0\",\"moduleSequenceNumber\":7484}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let currentServers = ns.getPurchasedServers();\\r\\n\\r\\n    for (let i = 0; i < currentServers.length; ++i) {\\r\\n        ns.killall(currentServers[i]);\\r\\n        ns.deleteServer(currentServers[i]);\\r\\n    }\\r\\n}\",\"filename\":\"/src/delete-purchased-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/delete-purchased-server.js\",\"url\":\"blob:file:///a74a6c7f-2458-4280-a294-006f16aa5c12\",\"moduleSequenceNumber\":10419}],\"dependents\":[],\"ramUsage\":6.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\n/** ms to wait to read port info */\\r\\nconst POLL_TIME = 10000;\\r\\n\\r\\n/** @param {import(\\\"../NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let port = ns.getPortHandle(1);\\r\\n    let lastCommand = \\\"\\\";\\r\\n\\r\\n    ns.tprint(port.peek());\\r\\n    // Main loop\\r\\n    while (true) {\\r\\n        let cmd = processCmd(ns, port);\\r\\n        if (cmd == lastCommand) {\\r\\n\\r\\n        }\\r\\n\\r\\n        await ns.sleep(POLL_TIME);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Read the port and return a string array with the parts.\\r\\n * \\r\\n * @param {import(\\\"../NetscriptDefinitions\\\").NS} ns\\r\\n * @param {NetscriptPort} portHandle \\r\\n * @return {string[]}\\r\\n */\\r\\nfunction processCmd(ns, portHandle) {\\r\\n    let cmd = portHandle.peek();\\r\\n\\r\\n    // See if it's a more complicated command or not\\r\\n    if (cmd.includes(\\\":\\\")) {\\r\\n        /** @type string[] */\\r\\n        let parts = cmd.split(\\\":\\\");\\r\\n\\r\\n        ns.printf(\\\"Received complex command: %s\\\", parts);\\r\\n    }\\r\\n    else {\\r\\n        switch (cmd) {\\r\\n            case \\\"end\\\":\\r\\n                ns.print(\\\"End received, quitting.\\\");\\r\\n                ns.exit();\\r\\n                break;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/src/old/server-client.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { Constants } from \\\"lib/constants\\\";\\r\\n\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    let flags = ns.flags([\\r\\n        [\\\"help\\\", false], \\r\\n        [\\\"h\\\", false],\\r\\n        [\\\"dry-run\\\", false], \\r\\n        [\\\"d\\\", false],\\r\\n        [\\\"s\\\", false]\\r\\n    ]);\\r\\n\\r\\n    // @ts-ignore\\r\\n    if (flags.help || flags.h || flags[\\\"_\\\"].length == 0) {\\r\\n        ns.tprint(\\\"INFO: usage: run src/buyer-server.js gbtobuy --help --dry-run (-d) (-s)\\\")\\r\\n        ns.tprint(\\\"INFO: \\\");\\r\\n        ns.tprint(\\\"INFO: help:\\\\tShow this message\\\");\\r\\n        ns.tprint(\\\"INFO: gbtobuy:\\\\tWhat power of 2 GB of RAM the servers will have\\\");\\r\\n        ns.tprint(\\\"INFO: dry-run:\\\\tJust print cost, don't buy anything\\\");\\r\\n        ns.tprint(\\\"INFO: (s)ingle:\\\\tOnly buy 1, not max\\\");\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    const gbPowerToBuy = Number(flags[\\\"_\\\"][0]);\\r\\n    const gbToBuy = Math.pow(2, gbPowerToBuy);\\r\\n    const printOnly = Boolean(flags.dry_run || flags.d);\\r\\n    const single = Boolean(flags.s);\\r\\n    const limit = single ? 1 : ns.getPurchasedServerLimit();\\r\\n    let cost = ns.getPurchasedServerCost(gbToBuy) * limit;\\r\\n\\r\\n    ns.tprintf(\\\"Buying %s %sGB servers, total cost of: $%s\\\", limit, gbToBuy, cost.toLocaleString(\\\"en-US\\\"));\\r\\n\\r\\n    if (printOnly) return;\\r\\n \\r\\n    let purchasedServers = ns.getPurchasedServers();\\r\\n    while (purchasedServers.length < limit) {\\r\\n        ns.tprintf(\\\"%s/%s servers owned\\\", purchasedServers.length, limit);\\r\\n        if (ns.getPurchasedServerCost(gbToBuy) <= ns.getPlayer().money) {\\r\\n            const newServer = ns.purchaseServer(Constants.MY_SERVERS_PREFIX, gbToBuy);\\r\\n            ns.tprintf(\\\"Bought %s, %sGB server\\\", newServer, gbToBuy);\\r\\n        }\\r\\n        else {\\r\\n            ns.sleep(2000);\\r\\n        }\\r\\n        purchasedServers = ns.getPurchasedServers();\\r\\n    }\\r\\n    ns.tprintf(\\\"All %s servers have been bought\\\", limit);\\r\\n}\",\"filename\":\"/src/server-buyer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///2e27061b-e26f-443c-9c73-e4013b11c900\",\"moduleSequenceNumber\":2715},{\"filename\":\"/src/server-buyer.js\",\"url\":\"blob:file:///978a9c20-008b-4385-ad88-98a294747408\",\"moduleSequenceNumber\":9259}],\"dependents\":[],\"ramUsage\":6.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// //@ts-check\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    //tR (targetRam) (First argument that tells the targeted amount of RAM)\\r\\n    const tR = ns.args[0];\\r\\n    //tRSC (targetRamServerCost) (How much the server will cost with the given amount of RAM)\\r\\n    var tRSC = ns.getPurchasedServerCost(tR);\\r\\n    //sL (serverList) (The list of all the servers player has)\\r\\n    var sL = ns.getPurchasedServers();\\r\\n    //sLL (serverListLength) (The length of the list of all the servers a player has)\\r\\n    var sLL = sL.length;\\r\\n    //i (counter) (Counter used to loop through serverList array)\\r\\n    var i = 0;\\r\\n    //m (counter) (COunter for money)\\r\\n    var m = 0;\\r\\n    while (i < sLL) {\\r\\n        //pM (playerMoney) (How much money the player currently has)\\r\\n        var pM = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        //tSN (targetedServerName)\\r\\n        var tSN = sL[i];\\r\\n        //tSMR (targetedServerMaxRam)\\r\\n        var tSMR = ns.getServerMaxRam(tSN);\\r\\n        //nSN (newServerName)\\r\\n        var nSN = tSN.replace(tSMR, tR);\\r\\n        if (tSMR < tR) {\\r\\n            if (pM > tRSC) {\\r\\n                ns.killall(tSN);\\r\\n                ns.deleteServer(tSN);\\r\\n                ns.purchaseServer(nSN, tR);\\r\\n                ns.tprint(\\\"Upgraded \\\" + tSN + \\\" to \\\" + tR + \\\" ram\\\");\\r\\n                ++m;\\r\\n            }\\r\\n        }\\r\\n        ++i;\\r\\n    }\\r\\n    var totalCostU = tRSC * 5;\\r\\n    var totalCost = totalCostU / 1000000;\\r\\n    var totalCostR = parseFloat(totalCost).toFixed(3);\\r\\n    var moneyNeededU = tRSC - ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    var moneyNeeded = moneyNeededU / 1000000;\\r\\n    var moneyNeededR = parseFloat(moneyNeeded).toFixed(3);\\r\\n    if (m > 0) {\\r\\n        ns.tprint(\\\"You bought \\\" + m + \\\" servers for a total of \\\" + totalCostR + \\\" million\\\");\\r\\n    } else {\\r\\n        ns.tprint(\\\"You can't upgrade a server now! You need \\\" + moneyNeededR + \\\" million before you can do that!\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// import { Constants } from \\\"lib/constants\\\";\\r\\n\\r\\n// /** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\n// export async function main(ns) {\\r\\n//     let flags = ns.flags([[\\\"help\\\", false], [\\\"dry-run\\\", false], [\\\"d\\\", false]]);\\r\\n\\r\\n//     // @ts-ignore\\r\\n//     if (flags.help || !flags[\\\"_\\\"] || flags[\\\"_\\\"].length > 1) {\\r\\n//         ns.tprint(\\\"INFO: usage: run src/server-update.js gbtobuy --help --dry-run (-d)\\\")\\r\\n//         ns.tprint(\\\"INFO: \\\");\\r\\n//         ns.tprint(\\\"INFO: help:\\\\tShow this message\\\");\\r\\n//         ns.tprint(\\\"INFO: gbtobuy:\\\\tHow many GB the new servers will have (power of 2)\\\");\\r\\n//         ns.tprint(\\\"INFO: dry-run:\\\\tJust print cost, and number of servers to be upgraded, don't buy anything\\\");\\r\\n//         return;\\r\\n//     }\\r\\n\\r\\n//     const gbToBuy = Number(flags[\\\"_\\\"][0]);\\r\\n//     const printOnly = Boolean(flags.dry_run || flags.d);\\r\\n//     const limit = ns.getPurchasedServerLimit();\\r\\n//     let cost = ns.getPurchasedServerCost(gbToBuy);\\r\\n//     // Prevent buying more than the limit, obv\\r\\n//     const totalCanBuy = Math.min(Math.floor(ns.getPlayer().money / cost), limit);\\r\\n\\r\\n//     ns.tprintf(\\\"Buying %s %sGB servers, total cost of: $%s\\\", totalCanBuy, gbToBuy, (cost * totalCanBuy).toLocaleString(\\\"en-US\\\"));\\r\\n\\r\\n//     if (printOnly) return;\\r\\n\\r\\n//     let upgraded = 0;\\r\\n//     let purchasedServers = ns.getPurchasedServers();\\r\\n//     for (let i = 0; i < purchasedServers.length; ++i) {\\r\\n//         if (upgraded >= totalCanBuy) break;\\r\\n\\r\\n//         if (ns.getPurchasedServerCost(gbToBuy) <= ns.getPlayer().money\\r\\n//             && ns.getServer(purchasedServers[i]).maxRam < gbToBuy) {\\r\\n\\r\\n//             const newServer = ns.upgradePurchasedServer(purchasedServers[i], gbToBuy);\\r\\n//             ns.tprintf(\\\"Upgraded %s to a %s GB server\\\", purchasedServers[i], gbToBuy.toLocaleString(\\\"en-US\\\"));\\r\\n//             upgraded++;\\r\\n//         }\\r\\n//         else {\\r\\n//             ns.tprint(\\\"Either can't afford it, or trying to downgrade servers.\\\");\\r\\n//         }\\r\\n//         purchasedServers = ns.getPurchasedServers();\\r\\n//     }\\r\\n//     ns.tprintf(\\\"All %s servers have been upgraded\\\", totalCanBuy);\\r\\n// }\\r\\n\",\"filename\":\"/src/server-update.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/server-update.js\",\"url\":\"blob:file:///565a27d3-6108-4359-a50c-2bef9502e9c8\",\"moduleSequenceNumber\":38659}],\"dependents\":[],\"ramUsage\":9.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // args: sleeptime, target, logToTerminal?\\r\\n    const sleepTime = Number(ns.args[0]);\\r\\n    const target = String(ns.args[1]);\\r\\n    let logTerm = false; \\r\\n    if (ns.args[2]) logTerm = Boolean(ns.args[2]);\\r\\n    let log = logTerm ? ns.tprint : ns.print\\r\\n\\r\\n    await ns.sleep(sleepTime);\\r\\n    const gainedMoney = await ns.hack(target);\\r\\n    log(`Finished hacking ${target}, +$${gainedMoney.toLocaleString(\\\"en-us\\\")}.`)\\r\\n}\",\"filename\":\"/src/batcher/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/batcher/hack.js\",\"url\":\"blob:file:///9f4344cc-0080-4669-a0dd-40fdf36ecd69\",\"moduleSequenceNumber\":3063}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // args: sleeptime, target, logToTerminal?\\r\\n    const sleepTime = Number(ns.args[0]);\\r\\n    const target = String(ns.args[1]);\\r\\n    let logTerm = false; \\r\\n    if (ns.args[2]) logTerm = Boolean(ns.args[2]);\\r\\n    let log = logTerm ? ns.tprint : ns.print\\r\\n    await ns.sleep(sleepTime);\\r\\n    const amt = await ns.grow(target);\\r\\n    log(`Finished growing ${target} by x${amt}`);\\r\\n}\",\"filename\":\"/src/batcher/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/batcher/grow.js\",\"url\":\"blob:file:///99fa1a78-943a-48e5-bbbf-34eac30e3dda\",\"moduleSequenceNumber\":2032}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import(\\\"../NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // args: sleeptime, target, logToTerminal?\\r\\n    const sleepTime = Number(ns.args[0]);\\r\\n    const target = String(ns.args[1]);\\r\\n    let logTerm = false; \\r\\n    if (ns.args[2]) logTerm = Boolean(ns.args[2]);\\r\\n    let log = logTerm ? ns.tprint : ns.print\\r\\n    await ns.sleep(sleepTime);\\r\\n    const weakenAmt = await ns.weaken(target);\\r\\n    log(`Finished weakening ${target} by ${weakenAmt}`);\\r\\n}\",\"filename\":\"/src/batcher/weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/src/batcher/weaken.js\",\"url\":\"blob:file:///63aead10-8393-4c6d-b0fb-5010bbb70a79\",\"moduleSequenceNumber\":2031}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nexport function RamException(message) {\\r\\n    this.message = message;\\r\\n    this.name = \\\"RamException\\\";\\r\\n}\",\"filename\":\"/lib/exceptions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/src/get-hack-rank.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\n/* eslint no-invalid-this: 1 */\\n\\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\\nvar slice = Array.prototype.slice;\\nvar toStr = Object.prototype.toString;\\nvar funcType = '[object Function]';\\n\\nmodule.exports = function bind(that) {\\n    var target = this;\\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\\n        throw new TypeError(ERROR_MESSAGE + target);\\n    }\\n    var args = slice.call(arguments, 1);\\n\\n    var bound;\\n    var binder = function () {\\n        if (this instanceof bound) {\\n            var result = target.apply(\\n                this,\\n                args.concat(slice.call(arguments))\\n            );\\n            if (Object(result) === result) {\\n                return result;\\n            }\\n            return this;\\n        } else {\\n            return target.apply(\\n                that,\\n                args.concat(slice.call(arguments))\\n            );\\n        }\\n    };\\n\\n    var boundLength = Math.max(0, target.length - args.length);\\n    var boundArgs = [];\\n    for (var i = 0; i < boundLength; i++) {\\n        boundArgs.push('$' + i);\\n    }\\n\\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\\n\\n    if (target.prototype) {\\n        var Empty = function Empty() {};\\n        Empty.prototype = target.prototype;\\n        bound.prototype = new Empty();\\n        Empty.prototype = null;\\n    }\\n\\n    return bound;\\n};\\n\",\"filename\":\"/node_modules/function-bind/implementation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar implementation = require('./implementation');\\n\\nmodule.exports = Function.prototype.bind || implementation;\\n\",\"filename\":\"/node_modules/function-bind/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar has = require('has');\\n\\nfunction specifierIncluded(current, specifier) {\\n\\tvar nodeParts = current.split('.');\\n\\tvar parts = specifier.split(' ');\\n\\tvar op = parts.length > 1 ? parts[0] : '=';\\n\\tvar versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\\n\\n\\tfor (var i = 0; i < 3; ++i) {\\n\\t\\tvar cur = parseInt(nodeParts[i] || 0, 10);\\n\\t\\tvar ver = parseInt(versionParts[i] || 0, 10);\\n\\t\\tif (cur === ver) {\\n\\t\\t\\tcontinue; // eslint-disable-line no-restricted-syntax, no-continue\\n\\t\\t}\\n\\t\\tif (op === '<') {\\n\\t\\t\\treturn cur < ver;\\n\\t\\t}\\n\\t\\tif (op === '>=') {\\n\\t\\t\\treturn cur >= ver;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\treturn op === '>=';\\n}\\n\\nfunction matchesRange(current, range) {\\n\\tvar specifiers = range.split(/ ?&& ?/);\\n\\tif (specifiers.length === 0) {\\n\\t\\treturn false;\\n\\t}\\n\\tfor (var i = 0; i < specifiers.length; ++i) {\\n\\t\\tif (!specifierIncluded(current, specifiers[i])) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction versionIncluded(nodeVersion, specifierValue) {\\n\\tif (typeof specifierValue === 'boolean') {\\n\\t\\treturn specifierValue;\\n\\t}\\n\\n\\tvar current = typeof nodeVersion === 'undefined'\\n\\t\\t? process.versions && process.versions.node\\n\\t\\t: nodeVersion;\\n\\n\\tif (typeof current !== 'string') {\\n\\t\\tthrow new TypeError(typeof nodeVersion === 'undefined' ? 'Unable to determine current node version' : 'If provided, a valid node version is required');\\n\\t}\\n\\n\\tif (specifierValue && typeof specifierValue === 'object') {\\n\\t\\tfor (var i = 0; i < specifierValue.length; ++i) {\\n\\t\\t\\tif (matchesRange(current, specifierValue[i])) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\treturn matchesRange(current, specifierValue);\\n}\\n\\nvar data = require('./core.json');\\n\\nmodule.exports = function isCore(x, nodeVersion) {\\n\\treturn has(data, x) && versionIncluded(nodeVersion, data[x]);\\n};\\n\",\"filename\":\"/node_modules/is-core-module/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/* eslint-disable no-unused-vars */\\r\\nconst PortHacks = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"]\\r\\nconst PortHackMethods = [\\\"brutessh\\\", \\\"ftpcrack\\\", \\\"relaysmtp\\\", \\\"httpworm\\\", \\\"sqlinject\\\"];\\r\\nconst MyServersPrefix = \\\"e0-server\\\";\\r\\n\\r\\nexport class Constants {\\r\\n    static get MY_SERVERS_PREFIX() {\\r\\n        return MyServersPrefix;\\r\\n    }\\r\\n    static get PORT_HACKS() {\\r\\n        return PortHacks;\\r\\n    }\\r\\n    static get PORT_HACK_METHODS() {\\r\\n        return PortHackMethods;\\r\\n    }\\r\\n}\",\"filename\":\"/node_modules/lib/constants.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\nexport function RamException(message) {\\r\\n    this.message = message;\\r\\n    this.name = \\\"RamException\\\";\\r\\n}\",\"filename\":\"/node_modules/lib/exceptions.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { Constants } from \\\"lib/constants\\\";\\r\\n\\r\\n/**\\r\\n * Run the traverse function\\r\\n * @param {import(\\\"../src/NetscriptDefinitions\\\").NS} ns\\r\\n * @param {string} hostname\\r\\n * @param {Set} visited\\r\\n * @param {function?} callback - callback(ns, hostname)\\r\\n * @param {{killScript: boolean, scriptName?: string, killOurs?: boolean}} obj - Kills all if scriptName is blank. \\r\\n * If killOurs is false, all {@link Constants.MY_SERVERS_PREFIX} will be ignored.\\r\\n * @returns {Promise<Set<any>>}\\r\\n*/\\r\\nexport async function traverse(ns, hostname, visited, callback, { killScript, scriptName = \\\"\\\", killOurs = false }) {\\r\\n    visited.add(hostname);\\r\\n\\r\\n    if (callback != undefined) {\\r\\n        await callback(ns, hostname);\\r\\n    }\\r\\n\\r\\n    let neighbors = ns.scan(hostname);\\r\\n    for (const neighbor of neighbors) {\\r\\n        let notVisited = !visited.has(neighbor);\\r\\n        let notOurs = !neighbor.startsWith(Constants.MY_SERVERS_PREFIX);\\r\\n\\r\\n        // Only go there if we haven't been before and it's not our server\\r\\n        if (notVisited && (notOurs || killOurs)) {\\r\\n            if (killScript) {\\r\\n                if (!scriptName) {\\r\\n                    ns.killall(neighbor);\\r\\n                }\\r\\n                else {\\r\\n                    ns.scriptKill(scriptName, neighbor);\\r\\n                }\\r\\n            }\\r\\n            visited = await traverse(ns, neighbor, visited, callback, { killScript, scriptName });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return visited;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Find a path to the provided hostname \\r\\n * @param {import(\\\"../src/NetscriptDefinitions\\\").NS} ns \\r\\n * @param {string} hostname - Current host\\r\\n * @param {string} target - Host we're looking for a path to\\r\\n * @param {Array<string>} curPath - The path this particular iteration has taken\\r\\n * @param {Set<string>} visited\\r\\n * @returns {Array<string>} - Path to the target\\r\\n */\\r\\nexport function traverseSearch(ns, hostname, target, curPath = new Array(), visited = new Set()) {\\r\\n    visited.add(hostname);\\r\\n    curPath.push(hostname);\\r\\n    let neighbors = ns.scan(hostname);\\r\\n\\r\\n    // @ts-ignore\\r\\n    if (neighbors.includes(target)) {\\r\\n        curPath.push(target);\\r\\n        return curPath;\\r\\n    }\\r\\n\\r\\n    for(const neighbor of neighbors) {\\r\\n        if (!visited.has(neighbor)) {\\r\\n            const res = traverseSearch(ns, neighbor, target, curPath, visited);\\r\\n            if(res.length != 0) {\\r\\n                // We found it\\r\\n                return res;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // If we get here, then it wasn't found\\r\\n    curPath.pop();\\r\\n    return [];\\r\\n}\",\"filename\":\"/node_modules/lib/traverse.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar isWindows = process.platform === 'win32';\\n\\n// Regex to split a windows path into into [dir, root, basename, name, ext]\\nvar splitWindowsRe =\\n    /^(((?:[a-zA-Z]:|[\\\\\\\\\\\\/]{2}[^\\\\\\\\\\\\/]+[\\\\\\\\\\\\/]+[^\\\\\\\\\\\\/]+)?[\\\\\\\\\\\\/]?)(?:[^\\\\\\\\\\\\/]*[\\\\\\\\\\\\/])*)((\\\\.{1,2}|[^\\\\\\\\\\\\/]+?|)(\\\\.[^.\\\\/\\\\\\\\]*|))[\\\\\\\\\\\\/]*$/;\\n\\nvar win32 = {};\\n\\nfunction win32SplitPath(filename) {\\n  return splitWindowsRe.exec(filename).slice(1);\\n}\\n\\nwin32.parse = function(pathString) {\\n  if (typeof pathString !== 'string') {\\n    throw new TypeError(\\n        \\\"Parameter 'pathString' must be a string, not \\\" + typeof pathString\\n    );\\n  }\\n  var allParts = win32SplitPath(pathString);\\n  if (!allParts || allParts.length !== 5) {\\n    throw new TypeError(\\\"Invalid path '\\\" + pathString + \\\"'\\\");\\n  }\\n  return {\\n    root: allParts[1],\\n    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\\n    base: allParts[2],\\n    ext: allParts[4],\\n    name: allParts[3]\\n  };\\n};\\n\\n\\n\\n// Split a filename into [dir, root, basename, name, ext], unix version\\n// 'root' is just a slash, or nothing.\\nvar splitPathRe =\\n    /^((\\\\/?)(?:[^\\\\/]*\\\\/)*)((\\\\.{1,2}|[^\\\\/]+?|)(\\\\.[^.\\\\/]*|))[\\\\/]*$/;\\nvar posix = {};\\n\\n\\nfunction posixSplitPath(filename) {\\n  return splitPathRe.exec(filename).slice(1);\\n}\\n\\n\\nposix.parse = function(pathString) {\\n  if (typeof pathString !== 'string') {\\n    throw new TypeError(\\n        \\\"Parameter 'pathString' must be a string, not \\\" + typeof pathString\\n    );\\n  }\\n  var allParts = posixSplitPath(pathString);\\n  if (!allParts || allParts.length !== 5) {\\n    throw new TypeError(\\\"Invalid path '\\\" + pathString + \\\"'\\\");\\n  }\\n  \\n  return {\\n    root: allParts[1],\\n    dir: allParts[0].slice(0, -1),\\n    base: allParts[2],\\n    ext: allParts[4],\\n    name: allParts[3],\\n  };\\n};\\n\\n\\nif (isWindows)\\n  module.exports = win32.parse;\\nelse /* posix */\\n  module.exports = posix.parse;\\n\\nmodule.exports.posix = posix.parse;\\nmodule.exports.win32 = win32.parse;\\n\",\"filename\":\"/node_modules/path-parse/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nmodule.exports = require('./lib/async');\\n\",\"filename\":\"/node_modules/resolve/async.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var async = require('./lib/async');\\nasync.core = require('./lib/core');\\nasync.isCore = require('./lib/is-core');\\nasync.sync = require('./lib/sync');\\n\\nmodule.exports = async;\\n\",\"filename\":\"/node_modules/resolve/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export { default } from './src/index.js';\",\"filename\":\"/node_modules/signal-js/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nmodule.exports = function () {\\n  throw new Error(\\n    'ws does not work in the browser. Browser clients must use the native ' +\\n      'WebSocket object'\\n  );\\n};\\n\",\"filename\":\"/node_modules/ws/browser.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nmodule.exports = require('./lib/sync');\\n\",\"filename\":\"/node_modules/resolve/sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst WebSocket = require('./lib/websocket');\\n\\nWebSocket.createWebSocketStream = require('./lib/stream');\\nWebSocket.Server = require('./lib/websocket-server');\\nWebSocket.Receiver = require('./lib/receiver');\\nWebSocket.Sender = require('./lib/sender');\\n\\nWebSocket.WebSocket = WebSocket;\\nWebSocket.WebSocketServer = WebSocket.Server;\\n\\nmodule.exports = WebSocket;\\n\",\"filename\":\"/node_modules/ws/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nmodule.exports = null;\\n\",\"filename\":\"/node_modules/supports-preserve-symlinks-flag/browser.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Main entrypoint for ESM web browser environments. Avoids using Node.js\\n// specific libraries, such as \\\"path\\\".\\n//\\n// TODO: figure out reasonable web equivalents for \\\"resolve\\\", \\\"normalize\\\", etc.\\nimport { camelCase, decamelize, looksLikeNumber } from './build/lib/string-utils.js'\\nimport { YargsParser } from './build/lib/yargs-parser.js'\\nconst parser = new YargsParser({\\n  cwd: () => { return '' },\\n  format: (str, arg) => { return str.replace('%s', arg) },\\n  normalize: (str) => { return str },\\n  resolve: (str) => { return str },\\n  require: () => {\\n    throw Error('loading config from files not currently supported in browser')\\n  },\\n  env: () => {}\\n})\\n\\nconst yargsParser = function Parser (args, opts) {\\n  const result = parser.parse(args.slice(), opts)\\n  return result.argv\\n}\\nyargsParser.detailed = function (args, opts) {\\n  return parser.parse(args.slice(), opts)\\n}\\nyargsParser.camelCase = camelCase\\nyargsParser.decamelize = decamelize\\nyargsParser.looksLikeNumber = looksLikeNumber\\n\\nexport default yargsParser\\n\",\"filename\":\"/node_modules/yargs-parser/browser.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nmodule.exports = (\\n// node 12+\\n\\tprocess.allowedNodeEnvironmentFlags && process.allowedNodeEnvironmentFlags.has('--preserve-symlinks')\\n) || (\\n// node v6.2 - v11\\n\\tString(module.constructor._findPath).indexOf('preserveSymlinks') >= 0 // eslint-disable-line no-underscore-dangle\\n);\\n\",\"filename\":\"/node_modules/supports-preserve-symlinks-flag/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"#!/usr/bin/env node\\nimport {start} from \\\"../src/index.js\\\"\\n\\nawait start();\\n\",\"filename\":\"/node_modules/bitburner-filesync/npx/bitburner-filesync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar events = require('events');\\nvar fs = require('fs');\\nvar util = require('util');\\n\\nconst readdir = util.promisify(fs.readdir);\\nconst stat = util.promisify(fs.stat);\\nclass CheapWatch extends events.EventEmitter {\\n    constructor(data) {\\n        super();\\n        this.watch = true;\\n        this.debounce = 10;\\n        this.paths = new Map();\\n        this._watchers = new Map();\\n        this._timeouts = new Map();\\n        this._queue = [];\\n        this._status = 0;\\n        Object.assign(this, data);\\n        if (typeof this.dir !== 'string') {\\n            throw new TypeError('dir must be a string');\\n        }\\n        if (this.filter && typeof this.filter !== 'function') {\\n            throw new TypeError('filter must be a function');\\n        }\\n        if (typeof this.watch !== 'boolean') {\\n            throw new TypeError('watch must be a boolean');\\n        }\\n        if (typeof this.debounce !== 'number') {\\n            throw new TypeError('debounce must be a number');\\n        }\\n    }\\n    async init() {\\n        if (this._status !== 0) {\\n            throw new Error('cannot call init() twice');\\n        }\\n        this._status = 1;\\n        await this._recurse(this.dir);\\n        this._status = 2;\\n    }\\n    close() {\\n        if (this._status === 0 || this._status === 1) {\\n            throw new Error('cannot call close() before init() finishes');\\n        }\\n        if (this._status === 4) {\\n            throw new Error('cannot call close() twice');\\n        }\\n        this._status = 4;\\n        for (const watcher of this._watchers.values()) {\\n            watcher.close();\\n        }\\n    }\\n    async _recurse(full) {\\n        const path = full.slice(this.dir.length + 1);\\n        const stats = await stat(full);\\n        if (path) {\\n            if (this.filter && !(await this.filter({ path, stats }))) {\\n                return;\\n            }\\n            this.paths.set(path, stats);\\n        }\\n        if (stats.isDirectory()) {\\n            if (this.watch) {\\n                this._watchers.set(path, fs.watch(full, this._handle.bind(this, full)).on('error', () => { }));\\n            }\\n            await Promise.all((await readdir(full)).map(sub => this._recurse(full + '/' + sub)));\\n        }\\n    }\\n    _handle(dir, event, file) {\\n        this._debounce(dir);\\n        this._debounce(dir + '/' + file);\\n    }\\n    _debounce(path) {\\n        if (this._timeouts.has(path)) {\\n            clearTimeout(this._timeouts.get(path));\\n        }\\n        this._timeouts.set(path, setTimeout(() => {\\n            this._timeouts.delete(path);\\n            this._enqueue(path);\\n        }, this.debounce));\\n    }\\n    async _enqueue(full) {\\n        this._queue.push(full);\\n        if (this._status !== 2) {\\n            return;\\n        }\\n        this._status = 3;\\n        while (this._queue.length) {\\n            const full = this._queue.shift();\\n            const path = full.slice(this.dir.length + 1);\\n            const stats = await stat(full).catch(() => { });\\n            if (stats) {\\n                if (this.filter && !(await this.filter({ path, stats }))) {\\n                    continue;\\n                }\\n                const isNew = !this.paths.has(path);\\n                this.paths.set(path, stats);\\n                if (path) {\\n                    this.emit('+', { path, stats, isNew });\\n                }\\n                if (stats.isDirectory() && !this._watchers.has(path)) {\\n                    await this._recurse(full);\\n                    for (const [new_path, stats] of this.paths.entries()) {\\n                        if (new_path.startsWith(path + '/')) {\\n                            this.emit('+', { path: new_path, stats, isNew: true });\\n                        }\\n                    }\\n                }\\n            }\\n            else if (this.paths.has(path)) {\\n                const stats = this.paths.get(path);\\n                this.paths.delete(path);\\n                this.emit('-', { path, stats });\\n                if (this._watchers.has(path)) {\\n                    for (const old_path of this._watchers.keys()) {\\n                        if (old_path === path || old_path.startsWith(path + '/')) {\\n                            this._watchers.get(old_path).close();\\n                            this._watchers.delete(old_path);\\n                        }\\n                    }\\n                    for (const old_path of this.paths.keys()) {\\n                        if (old_path.startsWith(path + '/')) {\\n                            const stats = this.paths.get(old_path);\\n                            this.paths.delete(old_path);\\n                            this.emit('-', { path: old_path, stats });\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        this._status = 2;\\n    }\\n}\\n\\nmodule.exports = CheapWatch;\\n//# sourceMappingURL=CheapWatch.cjs.js.map\\n\",\"filename\":\"/node_modules/cheap-watch/dist/CheapWatch.cjs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import convict from \\\"convict\\\";\\nimport { existsSync } from \\\"fs\\\";\\n\\n// Define a schema\\nexport let config = convict({\\n    allowedFiletypes: {\\n        doc: 'Filetypes that are synchronized to the game.',\\n        format: 'Array',\\n        default: [\\\".js\\\", \\\".script\\\", \\\".txt\\\"]\\n    },\\n    allowDeletingFiles: {\\n        doc: 'Allow deleting files in game if they get deleted off disk.',\\n        format: 'Boolean',\\n        default: false,\\n        arg: 'allowDeletingFiles',\\n    },\\n    port: {\\n        doc: 'The port to bind to.',\\n        format: 'Number',\\n        default: 12525,\\n        env: 'BB_PORT',\\n        arg: 'port'\\n    },\\n    scriptsFolder: {\\n        doc: 'The to be synchronized folder.',\\n        format: 'String',\\n        default: '.',\\n        env: 'BB_SCRIPTFOLDER',\\n        arg: 'folder'\\n    },\\n    quiet: {\\n        doc: 'Log less internal events to stdout.',\\n        format: 'Boolean',\\n        env: 'BB_VERBOSE',\\n        default: false,\\n        arg: 'quiet'\\n    },\\n    dry: {\\n        doc: 'Only print the files to be synchronised.',\\n        format: 'Boolean',\\n        env: 'BB_DRY',\\n        default: false,\\n        arg: 'dry'\\n    },\\n    definitionFile: {\\n        update: {\\n            doc: 'Automatically pull the definition file from the game.',\\n            format: 'Boolean',\\n            env: 'BB_UPDATE_DEF',\\n            default: false\\n        },\\n        location: {\\n            doc: 'Location/name of where the definition file gets placed.',\\n            format: 'String',\\n            env: 'BB_LOCATION_DEF',\\n            default: \\\"./NetScriptDefinitions.d.ts\\\"\\n        }\\n    },\\n    pushAllOnConnection: {\\n        doc: 'Push all files when initial connection is made.',\\n        format: 'Boolean',\\n        env: 'BB_CON_PUSH',\\n        default: false,\\n        arg: 'pushAllOnConnection'\\n    }\\n});\\n\\nexport function loadConfig() {\\n    const configFile = \\\"filesync.json\\\";\\n    if (existsSync(configFile)) {\\n        try {\\n            config.loadFile(configFile);\\n        } catch (e) {\\n            throw new Error(`Unable to load configuration file at ${configFile}: ${e}`);\\n        }\\n    } else if (!config.get(\\\"quiet\\\")) {\\n        console.log(\\\"No configuration file found.\\\")\\n    }\\n\\n    // Perform validation\\n    config.validate({ allowed: 'strict' });\\n}\\n\\n\\n\",\"filename\":\"/node_modules/bitburner-filesync/src/config.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { EventEmitter } from 'events';\\nimport * as fs from 'fs';\\nimport { promisify } from 'util';\\n\\nconst readdir = promisify(fs.readdir);\\nconst stat = promisify(fs.stat);\\nclass CheapWatch extends EventEmitter {\\n    constructor(data) {\\n        super();\\n        this.watch = true;\\n        this.debounce = 10;\\n        this.paths = new Map();\\n        this._watchers = new Map();\\n        this._timeouts = new Map();\\n        this._queue = [];\\n        this._status = 0;\\n        Object.assign(this, data);\\n        if (typeof this.dir !== 'string') {\\n            throw new TypeError('dir must be a string');\\n        }\\n        if (this.filter && typeof this.filter !== 'function') {\\n            throw new TypeError('filter must be a function');\\n        }\\n        if (typeof this.watch !== 'boolean') {\\n            throw new TypeError('watch must be a boolean');\\n        }\\n        if (typeof this.debounce !== 'number') {\\n            throw new TypeError('debounce must be a number');\\n        }\\n    }\\n    async init() {\\n        if (this._status !== 0) {\\n            throw new Error('cannot call init() twice');\\n        }\\n        this._status = 1;\\n        await this._recurse(this.dir);\\n        this._status = 2;\\n    }\\n    close() {\\n        if (this._status === 0 || this._status === 1) {\\n            throw new Error('cannot call close() before init() finishes');\\n        }\\n        if (this._status === 4) {\\n            throw new Error('cannot call close() twice');\\n        }\\n        this._status = 4;\\n        for (const watcher of this._watchers.values()) {\\n            watcher.close();\\n        }\\n    }\\n    async _recurse(full) {\\n        const path = full.slice(this.dir.length + 1);\\n        const stats = await stat(full);\\n        if (path) {\\n            if (this.filter && !(await this.filter({ path, stats }))) {\\n                return;\\n            }\\n            this.paths.set(path, stats);\\n        }\\n        if (stats.isDirectory()) {\\n            if (this.watch) {\\n                this._watchers.set(path, fs.watch(full, this._handle.bind(this, full)).on('error', () => { }));\\n            }\\n            await Promise.all((await readdir(full)).map(sub => this._recurse(full + '/' + sub)));\\n        }\\n    }\\n    _handle(dir, event, file) {\\n        this._debounce(dir);\\n        this._debounce(dir + '/' + file);\\n    }\\n    _debounce(path) {\\n        if (this._timeouts.has(path)) {\\n            clearTimeout(this._timeouts.get(path));\\n        }\\n        this._timeouts.set(path, setTimeout(() => {\\n            this._timeouts.delete(path);\\n            this._enqueue(path);\\n        }, this.debounce));\\n    }\\n    async _enqueue(full) {\\n        this._queue.push(full);\\n        if (this._status !== 2) {\\n            return;\\n        }\\n        this._status = 3;\\n        while (this._queue.length) {\\n            const full = this._queue.shift();\\n            const path = full.slice(this.dir.length + 1);\\n            const stats = await stat(full).catch(() => { });\\n            if (stats) {\\n                if (this.filter && !(await this.filter({ path, stats }))) {\\n                    continue;\\n                }\\n                const isNew = !this.paths.has(path);\\n                this.paths.set(path, stats);\\n                if (path) {\\n                    this.emit('+', { path, stats, isNew });\\n                }\\n                if (stats.isDirectory() && !this._watchers.has(path)) {\\n                    await this._recurse(full);\\n                    for (const [new_path, stats] of this.paths.entries()) {\\n                        if (new_path.startsWith(path + '/')) {\\n                            this.emit('+', { path: new_path, stats, isNew: true });\\n                        }\\n                    }\\n                }\\n            }\\n            else if (this.paths.has(path)) {\\n                const stats = this.paths.get(path);\\n                this.paths.delete(path);\\n                this.emit('-', { path, stats });\\n                if (this._watchers.has(path)) {\\n                    for (const old_path of this._watchers.keys()) {\\n                        if (old_path === path || old_path.startsWith(path + '/')) {\\n                            this._watchers.get(old_path).close();\\n                            this._watchers.delete(old_path);\\n                        }\\n                    }\\n                    for (const old_path of this.paths.keys()) {\\n                        if (old_path.startsWith(path + '/')) {\\n                            const stats = this.paths.get(old_path);\\n                            this.paths.delete(old_path);\\n                            this.emit('-', { path: old_path, stats });\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        this._status = 2;\\n    }\\n}\\n\\nexport { CheapWatch as default };\\n//# sourceMappingURL=CheapWatch.esm.js.map\\n\",\"filename\":\"/node_modules/cheap-watch/dist/CheapWatch.esm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class EventType {\\n    static ConnectionMade = \\\"ConnectionMade\\\";\\n    static FileChanged = \\\"FileChanged\\\";\\n    static FileDeleted = \\\"FileDeleted\\\";\\n    static MessageReceived = \\\"MessageReceived\\\";\\n    static MessageSend = \\\"MessageSend\\\";\\n}\",\"filename\":\"/node_modules/bitburner-filesync/src/eventTypes.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\"\\nimport { setupWatch } from \\\"./fileWatch.js\\\";\\nimport { config, loadConfig } from \\\"./config.js\\\";\\nimport { setupSocket } from \\\"./networking/webSocket.js\\\";\\nimport signal from \\\"signal-js\\\";\\nimport { fileChangeEventToMsg, fileRemovalEventToMsg, requestFilenames, requestDefinitionFile } from \\\"./networking/messageGenerators.js\\\";\\nimport { EventType } from \\\"./eventTypes.js\\\";\\nimport { messageHandler } from \\\"./networking/messageHandler.js\\\";\\n\\nexport async function start() {\\n    loadConfig();\\n    const watch = await setupWatch(signal);\\n    const socket = setupSocket(signal);\\n\\n    // Add a handler for received messages.\\n    signal.on(EventType.MessageReceived, msg => messageHandler(signal, msg, watch.paths));\\n\\n    // Add a handler for when a connection to a game is made.\\n    signal.on(EventType.ConnectionMade, () => {\\n        console.log(\\\"Connection made!\\\");\\n\\n        if (config.get(\\\"definitionFile\\\").update) {\\n            signal.emit(EventType.MessageSend, requestDefinitionFile());\\n        }\\n\\n        if (config.get(\\\"pushAllOnConnection\\\")) {\\n            const extensions = config.get(\\\"allowedFiletypes\\\");\\n            for (const path of watch.paths.keys()) {\\n                if (extensions.some(extension => path.endsWith(extension)))\\n                    signal.emit(EventType.MessageSend, fileChangeEventToMsg({ path: path }))\\n            }\\n        } else {\\n            // Upload missing files to the game.\\n            signal.emit(EventType.MessageSend, requestFilenames());\\n        }\\n    })\\n\\n    // Add a handler for changed files.\\n    signal.on(EventType.FileChanged, fileEvent => {\\n        if (!config.get(\\\"quiet\\\")) console.log(fileEvent.path + \\\" changed\\\");\\n        signal.emit(EventType.MessageSend, fileChangeEventToMsg(fileEvent))\\n    });\\n\\n    // Add a handler for removed files, if allowed.\\n    if (config.get(\\\"allowDeletingFiles\\\"))\\n        signal.on(EventType.FileDeleted, fileEvent =>\\n            signal.emit(EventType.MessageSend, fileRemovalEventToMsg(fileEvent)));\\n\\n    console.log(`Server is ready, running on ${config.get(\\\"port\\\")}!`)\\n\\n    process.on('SIGINT', function () {\\n        console.log(\\\"Shutting down!\\\");\\n\\n        watch.close();\\n        socket.close();\\n        process.exit();\\n    });\\n}\\n\",\"filename\":\"/node_modules/bitburner-filesync/src/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":219}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import CheapWatch from \\\"cheap-watch\\\";\\nimport { config } from \\\"./config.js\\\";\\nimport { EventType } from \\\"./eventTypes.js\\\";\\nimport { resolve } from \\\"path\\\";\\n\\nfunction fileFilter(file) {\\n    if (config.get(\\\"allowedFiletypes\\\").some(extension => file.path.endsWith(extension)))\\n        return true;\\n    if (file.stats.isDirectory())\\n        return true;\\n    return false;\\n}\\n\\nexport async function setupWatch(signaller) {\\n    const watch = new CheapWatch({\\n        dir: config.get(\\\"scriptsFolder\\\"),\\n        filter: fileFilter,\\n        watch: !config.get(\\\"dry\\\")\\n    });\\n\\n    if (!config.get(\\\"quiet\\\")) console.log(\\\"Watching folder\\\", resolve(config.get(\\\"scriptsFolder\\\")))\\n\\n    watch.on('+', fileEvent => { if (fileEvent.stats.isFile()) signaller.emit(EventType.FileChanged, fileEvent) });\\n    watch.on('-', fileEvent => { if (fileEvent.stats.isFile()) signaller.emit(EventType.FileDeleted, fileEvent) });\\n\\n    // Wait 'till filewatcher is ready to go\\n    await watch.init();\\n\\n    if (config.get(\\\"dry\\\")) {\\n        console.log(\\\"Watch would've synchronised:\\\\n\\\", watch.paths)\\n        process.exit();\\n    }\\n\\n    return watch;\\n}\",\"filename\":\"/node_modules/bitburner-filesync/src/fileWatch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":220}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * convict\\n * Configuration management with support for environmental variables, files,\\n * and validation.\\n */\\n'use strict'\\n\\nconst fs = require('fs')\\nconst parseArgs = require('yargs-parser')\\nconst cloneDeep = require('lodash.clonedeep')\\n\\n// Forbidden key paths, for protection against prototype pollution\\nconst FORBIDDEN_KEY_PATHS = [\\n  '__proto__.',\\n  'this.constructor.prototype.',\\n]\\n\\nconst ALLOWED_OPTION_STRICT = 'strict'\\nconst ALLOWED_OPTION_WARN = 'warn'\\n\\nfunction assert(assertion, err_msg) {\\n  if (!assertion) {\\n    throw new Error(err_msg)\\n  }\\n}\\n\\n// format can be a:\\n// - predefine type, as seen below\\n// - an array of enumerated values, e.g. [\\\"production\\\", \\\"development\\\", \\\"testing\\\"]\\n// - built-in JavaScript type, i.e. Object, Array, String, Number, Boolean, RegExp\\n// - or if omitted, the Object.prototype.toString.call of the default value\\n\\n/**\\n * Checks if x is a valid port\\n *\\n * @param {*} x\\n * @returns {Boolean}\\n */\\nfunction isPort(x) {\\n  return Number.isInteger(x) && x >= 0 && x <= 65535\\n}\\n\\n/**\\n * Checks if x is a windows named pipe\\n *\\n * @see https://msdn.microsoft.com/en-us/library/windows/desktop/aa365783(v=vs.85).aspx\\n * @param {*} x\\n * @returns {Boolean}\\n */\\nfunction isWindowsNamedPipe(x) {\\n  return String(x).includes('\\\\\\\\\\\\\\\\.\\\\\\\\pipe\\\\\\\\')\\n}\\n\\nconst types = {\\n  '*': function() { },\\n  int: function(x) {\\n    assert(Number.isInteger(x), 'must be an integer')\\n  },\\n  nat: function(x) {\\n    assert(Number.isInteger(x) && x >= 0, 'must be a positive integer')\\n  },\\n  port: function(x) {\\n    assert(isPort(x), 'ports must be within range 0 - 65535')\\n  },\\n  windows_named_pipe: function(x) {\\n    assert(isWindowsNamedPipe(x), 'must be a valid pipe')\\n  },\\n  port_or_windows_named_pipe: function(x) {\\n    if (!isWindowsNamedPipe(x)) {\\n      assert(isPort(x), 'must be a windows named pipe or a number within range 0 - 65535')\\n    }\\n  }\\n}\\n// alias\\ntypes.integer = types.int\\n\\nconst custom_converters = new Map()\\n\\nconst parsers_registry = {'*': JSON.parse}\\n\\nfunction flatten(obj, useProperties) {\\n  const stack = Object.keys(obj)\\n  let key\\n\\n  const entries = []\\n\\n  while (stack.length) {\\n    key = stack.shift()\\n    let val = walk(obj, key)\\n    if (typeof val === 'object' && !Array.isArray(val) && val != null) {\\n      if (useProperties) {\\n        if ('_cvtProperties' in val) {\\n          val = val._cvtProperties\\n          key = key + '._cvtProperties'\\n        } else {\\n          entries.push([key, val])\\n          continue\\n        }\\n      }\\n      const subkeys = Object.keys(val)\\n\\n      // Don't filter out empty objects\\n      if (subkeys.length > 0) {\\n        subkeys.forEach(function(subkey) {\\n          stack.push(key + '.' + subkey)\\n        })\\n        continue\\n      }\\n    }\\n    entries.push([key, val])\\n  }\\n\\n  const flattened = {}\\n  entries.forEach(function(entry) {\\n    let key = entry[0]\\n    if (useProperties) {\\n      key = key.replace(/\\\\._cvtProperties/g, '')\\n    }\\n    const val = entry[1]\\n    flattened[key] = val\\n  })\\n\\n  return flattened\\n}\\n\\nfunction validate(instance, schema, strictValidation) {\\n  const errors = {\\n    undeclared: [],\\n    invalid_type: [],\\n    missing: []\\n  }\\n\\n  const flatInstance = flatten(instance)\\n  const flatSchema = flatten(schema._cvtProperties, true)\\n\\n  Object.keys(flatSchema).forEach(function(name) {\\n    const schemaItem = flatSchema[name]\\n    let instanceItem = flatInstance[name]\\n    if (!(name in flatInstance)) {\\n      try {\\n        if (typeof schemaItem.default === 'object' &&\\n          !Array.isArray(schemaItem.default)) {\\n          // Missing item may be an object with undeclared children, so try to\\n          // pull it unflattened from the config instance for type validation\\n          instanceItem = walk(instance, name)\\n        } else {\\n          throw new Error('missing')\\n        }\\n      } catch (e) {\\n        const err = new Error(\\\"configuration param '\\\" + name\\n          + \\\"' missing from config, did you override its parent?\\\")\\n        errors.missing.push(err)\\n        return\\n      }\\n    }\\n    delete flatInstance[name]\\n\\n    // ignore nested keys of schema 'object' properties\\n    if (schemaItem.format === 'object' || typeof schemaItem.default === 'object') {\\n      Object.keys(flatInstance)\\n        .filter(function(key) {\\n          return key.lastIndexOf(name + '.', 0) === 0\\n        }).forEach(function(key) {\\n          delete flatInstance[key]\\n        })\\n    }\\n\\n    if (!(typeof schemaItem.default === 'undefined' &&\\n          instanceItem === schemaItem.default)) {\\n      try {\\n        schemaItem._format(instanceItem)\\n      } catch (err) {\\n        errors.invalid_type.push(err)\\n      }\\n    }\\n\\n    return\\n  })\\n\\n  if (strictValidation) {\\n    Object.keys(flatInstance).forEach(function(name) {\\n      const err = new Error(\\\"configuration param '\\\" + name\\n        + \\\"' not declared in the schema\\\")\\n      errors.undeclared.push(err)\\n    })\\n  }\\n\\n  return errors\\n}\\n\\n// helper for asserting that a value is in the list of valid options\\nfunction contains(options, x) {\\n  assert(options.indexOf(x) !== -1, 'must be one of the possible values: ' +\\n         JSON.stringify(options))\\n}\\n\\nconst BUILT_INS_BY_NAME = {\\n  Object: Object,\\n  Array: Array,\\n  String: String,\\n  Number: Number,\\n  Boolean: Boolean,\\n  RegExp: RegExp\\n}\\nconst BUILT_IN_NAMES = Object.keys(BUILT_INS_BY_NAME)\\nconst BUILT_INS = BUILT_IN_NAMES.map(function(name) {\\n  return BUILT_INS_BY_NAME[name]\\n})\\n\\nfunction normalizeSchema(name, node, props, fullName, env, argv, sensitive) {\\n  if (name === '_cvtProperties') {\\n    throw new Error(\\\"'\\\" + fullName + \\\"': '_cvtProperties' is reserved word of convict.\\\")\\n  }\\n\\n  // If the current schema node is not a config property (has no \\\"default\\\"), recursively normalize it.\\n  if (typeof node === 'object' && node !== null && !Array.isArray(node) &&\\n    Object.keys(node).length > 0 && !('default' in node)) {\\n    props[name] = {\\n      _cvtProperties: {}\\n    }\\n    Object.keys(node).forEach(function(k) {\\n      normalizeSchema(k, node[k], props[name]._cvtProperties, fullName + '.' +\\n                      k, env, argv, sensitive)\\n    })\\n    return\\n  } else if (typeof node !== 'object' || Array.isArray(node) ||\\n    node === null || Object.keys(node).length == 0) {\\n    // Normalize shorthand \\\"value\\\" config properties\\n    node = {default: node}\\n  }\\n\\n  const o = cloneDeep(node)\\n  props[name] = o\\n  // associate this property with an environmental variable\\n  if (o.env) {\\n    if (!env[o.env]) {\\n      env[o.env] = []\\n    }\\n    env[o.env].push(fullName)\\n  }\\n\\n  // associate this property with a command-line argument\\n  if (o.arg) {\\n    if (argv[o.arg]) {\\n      throw new Error(\\\"'\\\" + fullName + \\\"' reuses a command-line argument: \\\" +\\n        o.arg)\\n    }\\n    argv[o.arg] = fullName\\n  }\\n\\n  // mark this property as sensitive\\n  if (o.sensitive === true) {\\n    sensitive.add(fullName)\\n  }\\n\\n  // store original format function\\n  const format = o.format\\n  let newFormat\\n\\n  if (BUILT_INS.indexOf(format) >= 0 || BUILT_IN_NAMES.indexOf(format) >= 0) {\\n    // if the format property is a built-in JavaScript constructor,\\n    // assert that the value is of that type\\n    const Format = typeof format === 'string' ? BUILT_INS_BY_NAME[format] : format\\n    newFormat = function(x) {\\n      assert(Object.prototype.toString.call(x) ==\\n        Object.prototype.toString.call(new Format()),\\n      'must be of type ' + Format.name)\\n    }\\n    o.format = Format.name.toLowerCase()\\n\\n  } else if (typeof format === 'string') {\\n    // store declared type\\n    if (!types[format]) {\\n      throw new Error(\\\"'\\\" + fullName + \\\"' uses an unknown format type: \\\" +\\n        format)\\n    }\\n\\n    // use a predefined type\\n    newFormat = types[format]\\n\\n  } else if (Array.isArray(format)) {\\n    // assert that the value is a valid option\\n    newFormat = contains.bind(null, format)\\n\\n  } else if (typeof format === 'function') {\\n    newFormat = format\\n\\n  } else if (format && typeof format !== 'function') {\\n    throw new Error(\\\"'\\\" + fullName +\\n      \\\"': `format` must be a function or a known format type.\\\")\\n  }\\n\\n  if (!newFormat && !format) {\\n    // default format is the typeof the default value\\n    const type = Object.prototype.toString.call(o.default)\\n    newFormat = function(x) {\\n      assert(Object.prototype.toString.call(x) == type,\\n        ' should be of type ' + type.replace(/\\\\[.* |]/g, ''))\\n    }\\n  }\\n\\n  o._format = function(x) {\\n    // accept null if allowed before calling any format function\\n    if (this.nullable && x === null) {\\n      return\\n    }\\n\\n    try {\\n      newFormat(x, this)\\n    } catch (e) {\\n      // attach the value and the property's fullName to the error\\n      e.fullName = fullName\\n      e.value = x\\n      throw e\\n    }\\n  }\\n}\\n\\nfunction importEnvironment(o) {\\n  const env = o.getEnv()\\n  Object.keys(o._env).forEach(function(envStr) {\\n    if (env[envStr] !== undefined) {\\n      const ks = o._env[envStr]\\n      ks.forEach(function(k) {\\n        o.set(k, env[envStr])\\n      })\\n    }\\n  })\\n}\\n\\nfunction importArguments(o) {\\n  const argv = parseArgs(o.getArgs(), {\\n    configuration: {\\n      'dot-notation': false\\n    }\\n  })\\n  Object.keys(o._argv).forEach(function(argStr) {\\n    const k = o._argv[argStr]\\n    if (argv[argStr] !== undefined) {\\n      o.set(k, String(argv[argStr]))\\n    }\\n  })\\n}\\n\\nfunction addDefaultValues(schema, c, instance) {\\n  Object.keys(schema._cvtProperties).forEach(function(name) {\\n    const p = schema._cvtProperties[name]\\n    if (p._cvtProperties) {\\n      const kids = c[name] || {}\\n      addDefaultValues(p, kids, instance)\\n      c[name] = kids\\n    } else {\\n      c[name] = coerce(name, cloneDeep(p.default), schema, instance)\\n    }\\n  })\\n}\\n\\nfunction isObj(o) {\\n  return typeof o === 'object' && o !== null\\n}\\n\\nfunction overlay(from, to, schema) {\\n  Object.keys(from).forEach(function(k) {\\n    // leaf\\n    if (Array.isArray(from[k]) || !isObj(from[k]) || !schema || schema.format === 'object') {\\n      to[k] = coerce(k, from[k], schema)\\n    } else {\\n      if (!isObj(to[k])) {\\n        to[k] = {}\\n      }\\n      overlay(from[k], to[k], schema._cvtProperties[k])\\n    }\\n  })\\n}\\n\\nfunction traverseSchema(schema, path) {\\n  const ar = path.split('.')\\n  let o = schema\\n  while (ar.length > 0) {\\n    const k = ar.shift()\\n    if (o && o._cvtProperties && o._cvtProperties[k]) {\\n      o = o._cvtProperties[k]\\n    } else {\\n      o = null\\n      break\\n    }\\n  }\\n\\n  return o\\n}\\n\\nfunction getFormat(schema, path) {\\n  const o = traverseSchema(schema, path)\\n  if (o == null) {\\n    return null\\n  }\\n  if (typeof o.format === 'string') {\\n    return o.format\\n  }\\n  if (o.default != null) {\\n    return typeof o.default\\n  }\\n  return null\\n}\\n\\nfunction coerce(k, v, schema, instance) {\\n  const format = getFormat(schema, k)\\n\\n  if (typeof v === 'string') {\\n    if (custom_converters.has(format)) {\\n      return custom_converters.get(format)(v, instance, k)\\n    }\\n    switch (format) {\\n    case 'port':\\n    case 'nat':\\n    case 'integer':\\n    case 'int': v = parseInt(v, 10); break\\n    case 'port_or_windows_named_pipe': v = isWindowsNamedPipe(v) ? v : parseInt(v, 10); break\\n    case 'number': v = parseFloat(v); break\\n    case 'boolean': v = String(v).toLowerCase() !== 'false'; break\\n    case 'array': v = v.split(','); break\\n    case 'object': v = JSON.parse(v); break\\n    case 'regexp': v = new RegExp(v); break\\n    default:\\n        // TODO: Should we throw an exception here?\\n    }\\n  }\\n\\n  return v\\n}\\n\\nfunction loadFile(path) {\\n  const segments = path.split('.')\\n  const extension = segments.length > 1 ? segments.pop() : ''\\n  const parse = parsers_registry[extension] || parsers_registry['*']\\n\\n  // TODO Get rid of the sync call\\n  // eslint-disable-next-line no-sync\\n  return parse(fs.readFileSync(path, 'utf-8'))\\n}\\n\\nfunction walk(obj, path, initializeMissing) {\\n  if (path) {\\n    const ar = path.split('.')\\n    while (ar.length) {\\n      const k = ar.shift()\\n      if (initializeMissing && obj[k] == null) {\\n        obj[k] = {}\\n        obj = obj[k]\\n      } else if (k in obj) {\\n        obj = obj[k]\\n      } else {\\n        throw new Error(\\\"cannot find configuration param '\\\" + path + \\\"'\\\")\\n      }\\n    }\\n  }\\n\\n  return obj\\n}\\n\\n/**\\n * @returns a config object\\n */\\nconst convict = function convict(def, opts) {\\n\\n  // TODO: Rename this `rv` variable (supposedly \\\"return value\\\") into something\\n  // more meaningful.\\n  const rv = {\\n    /**\\n     * Gets the array of process arguments, using the override passed to the\\n     * convict function or process.argv if no override was passed.\\n     */\\n    getArgs: function() {\\n      return opts && opts.args || process.argv.slice(2)\\n    },\\n\\n    /**\\n     * Gets the environment variable map, using the override passed to the\\n     * convict function or process.env if no override was passed.\\n     */\\n    getEnv: function() {\\n      return opts && opts.env || process.env\\n    },\\n\\n    /**\\n     * Exports all the properties (that is the keys and their current values) as JSON\\n     */\\n    getProperties: function() {\\n      return cloneDeep(this._instance)\\n    },\\n\\n    /**\\n     * Exports all the properties (that is the keys and their current values) as\\n     * a JSON string, with sensitive values masked. Sensitive values are masked\\n     * even if they aren't set, to avoid revealing any information.\\n     */\\n    toString: function() {\\n      const clone = cloneDeep(this._instance)\\n      this._sensitive.forEach(function(key) {\\n        const path = key.split('.')\\n        const childKey = path.pop()\\n        const parentKey = path.join('.')\\n        const parent = walk(clone, parentKey)\\n        parent[childKey] = '[Sensitive]'\\n      })\\n      return JSON.stringify(clone, null, 2)\\n    },\\n\\n    /**\\n     * Exports the schema as JSON.\\n     */\\n    getSchema: function() {\\n      return JSON.parse(JSON.stringify(this._schema))\\n    },\\n\\n    /**\\n     * Exports the schema as a JSON string\\n     */\\n    getSchemaString: function() {\\n      return JSON.stringify(this._schema, null, 2)\\n    },\\n\\n    /**\\n     * @returns the current value of the name property. name can use dot\\n     *     notation to reference nested values\\n     */\\n    get: function(path) {\\n      const o = walk(this._instance, path)\\n      return cloneDeep(o)\\n    },\\n\\n    /**\\n     * @returns the default value of the name property. name can use dot\\n     *     notation to reference nested values\\n     */\\n    default: function(path) {\\n      // The default value for FOO.BAR.BAZ is stored in `_schema._cvtProperties` at:\\n      //   FOO._cvtProperties.BAR._cvtProperties.BAZ.default\\n      path = path.split('.').join('._cvtProperties.') + '.default'\\n      const o = walk(this._schema._cvtProperties, path)\\n      return cloneDeep(o)\\n    },\\n\\n    /**\\n     * Resets a property to its default value as defined in the schema\\n     */\\n    reset: function(prop_name) {\\n      this.set(prop_name, this.default(prop_name))\\n    },\\n\\n    /**\\n     * @returns true if the property name is defined, or false otherwise\\n     */\\n    has: function(path) {\\n      try {\\n        const r = this.get(path)\\n        // values that are set but undefined return false\\n        return typeof r !== 'undefined'\\n      } catch (e) {\\n        return false\\n      }\\n    },\\n\\n    /**\\n     * Sets the value of name to value. name can use dot notation to reference\\n     * nested values, e.g. \\\"database.port\\\". If objects in the chain don't yet\\n     * exist, they will be initialized to empty objects\\n     */\\n    set: function(k, v) {\\n      for (const forbidden_key_path of FORBIDDEN_KEY_PATHS) {\\n        if (k.startsWith(forbidden_key_path) ||\\n            k.includes(`.${forbidden_key_path}`)) {\\n          return this\\n        }\\n      }\\n\\n      v = coerce(k, v, this._schema, this)\\n      const path = k.split('.')\\n      const childKey = path.pop()\\n      const parentKey = path.join('.')\\n      const parent = walk(this._instance, parentKey, true)\\n      parent[childKey] = v\\n      return this\\n    },\\n\\n    /**\\n     * Loads and merges a JavaScript object into config\\n     */\\n    load: function(conf) {\\n      overlay(conf, this._instance, this._schema)\\n      // environment and arguments always overrides config files\\n      importEnvironment(rv)\\n      importArguments(rv)\\n      return this\\n    },\\n\\n    /**\\n     * Loads and merges one or multiple JSON configuration files into config\\n     */\\n    loadFile: function(paths) {\\n      const self = this\\n      if (!Array.isArray(paths)) {\\n        paths = [paths]\\n      }\\n      paths.forEach(function(path) {\\n        // Support empty config files #253\\n        const result = loadFile(path)\\n        if (result) {\\n          overlay(result, self._instance, self._schema)\\n        }\\n      })\\n      // environment and arguments always overrides config files\\n      importEnvironment(rv)\\n      importArguments(rv)\\n      return this\\n    },\\n\\n    /**\\n     * Validates config against the schema used to initialize it\\n     */\\n    validate: function(options) {\\n      options = options || {}\\n\\n      options.allowed = options.allowed || ALLOWED_OPTION_WARN\\n\\n      if (options.output && typeof options.output !== 'function') {\\n        throw new Error('options.output is optional and must be a function.')\\n      }\\n\\n      const output_function = options.output || global.console.log\\n\\n      const errors = validate(this._instance, this._schema, options.allowed)\\n\\n      if (errors.invalid_type.length + errors.undeclared.length + errors.missing.length) {\\n        const sensitive = this._sensitive\\n\\n        const fillErrorBuffer = function(errors) {\\n          let err_buf = ''\\n          for (let i = 0; i < errors.length; i++) {\\n\\n            if (err_buf.length) {\\n              err_buf += '\\\\n'\\n            }\\n\\n            const e = errors[i]\\n\\n            if (e.fullName) {\\n              err_buf += e.fullName + ': '\\n            }\\n            if (e.message) {\\n              err_buf += e.message\\n            }\\n            if (e.value && !sensitive.has(e.fullName)) {\\n              err_buf += ': value was ' + JSON.stringify(e.value)\\n            }\\n          }\\n          return err_buf\\n        }\\n\\n        const types_err_buf = fillErrorBuffer(errors.invalid_type)\\n        const params_err_buf = fillErrorBuffer(errors.undeclared)\\n        const missing_err_buf = fillErrorBuffer(errors.missing)\\n\\n        const output_err_bufs = [types_err_buf, missing_err_buf]\\n\\n        if (options.allowed === ALLOWED_OPTION_WARN && params_err_buf.length) {\\n          let warning = 'Warning:'\\n          if (process.stdout.isTTY) {\\n            // Write 'Warning:' in bold and in yellow\\n            const SET_BOLD_YELLOW_TEXT = '\\\\x1b[33;1m'\\n            const RESET_ALL_ATTRIBUTES = '\\\\x1b[0m'\\n            warning = SET_BOLD_YELLOW_TEXT + warning + RESET_ALL_ATTRIBUTES\\n          }\\n          output_function(warning + ' ' + params_err_buf)\\n        } else if (options.allowed === ALLOWED_OPTION_STRICT) {\\n          output_err_bufs.push(params_err_buf)\\n        }\\n\\n        const output = output_err_bufs\\n          .filter(function(str) {\\n            return str.length\\n          })\\n          .join('\\\\n')\\n\\n        if (output.length) {\\n          throw new Error(output)\\n        }\\n\\n      }\\n      return this\\n    }\\n  }\\n\\n  // If the definition is a string treat it as an external schema file\\n  if (typeof def === 'string') {\\n    rv._def = loadFile(def)\\n  } else {\\n    rv._def = def\\n  }\\n\\n  // build up current config from definition\\n  rv._schema = {\\n    _cvtProperties: {}\\n  }\\n\\n  rv._env = {}\\n  rv._argv = {}\\n  rv._sensitive = new Set()\\n\\n  Object.keys(rv._def).forEach(function(k) {\\n    normalizeSchema(k, rv._def[k], rv._schema._cvtProperties, k, rv._env, rv._argv,\\n      rv._sensitive)\\n  })\\n\\n  rv._instance = {}\\n  addDefaultValues(rv._schema, rv._instance, rv)\\n  importEnvironment(rv)\\n  importArguments(rv)\\n\\n  return rv\\n}\\n\\n/**\\n * Adds a new custom format\\n */\\nconvict.addFormat = function(name, validate, coerce) {\\n  if (typeof name === 'object') {\\n    validate = name.validate\\n    coerce = name.coerce\\n    name = name.name\\n  }\\n  if (typeof validate !== 'function') {\\n    throw new Error('Validation function for ' + name + ' must be a function.')\\n  }\\n  if (coerce && typeof coerce !== 'function') {\\n    throw new Error('Coerce function for ' + name + ' must be a function.')\\n  }\\n  types[name] = validate\\n  if (coerce) {\\n    custom_converters.set(name, coerce)\\n  }\\n}\\n\\n/**\\n * Adds new custom formats\\n */\\nconvict.addFormats = function(formats) {\\n  Object.keys(formats).forEach(function(type) {\\n    convict.addFormat(type, formats[type].validate, formats[type].coerce)\\n  })\\n}\\n\\n/**\\n * Adds a new custom file parser\\n */\\nconvict.addParser = function(parsers) {\\n  if (!Array.isArray(parsers)) {\\n    parsers = [parsers]\\n  }\\n\\n  parsers.forEach(function(parser) {\\n    if (!parser) {\\n      throw new Error('Invalid parser')\\n    }\\n    if (!parser.extension) {\\n      throw new Error('Missing parser.extension')\\n    }\\n    if (!parser.parse) {\\n      throw new Error('Missing parser.parse function')\\n    }\\n\\n    if (typeof parser.parse !== 'function') {\\n      throw new Error('Invalid parser.parse function')\\n    }\\n\\n    const extensions = !Array.isArray(parser.extension) ? [parser.extension] : parser.extension\\n    extensions.forEach(function(extension) {\\n      if (typeof extension !== 'string') {\\n        throw new Error('Invalid parser.extension')\\n      }\\n      parsers_registry[extension] = parser.parse\\n    })\\n  })\\n}\\n\\nmodule.exports = convict\\n\",\"filename\":\"/node_modules/convict/src/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar bind = require('function-bind');\\n\\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\\n\",\"filename\":\"/node_modules/has/src/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar test = require('tape');\\nvar keys = require('object-keys');\\nvar semver = require('semver');\\nvar mockProperty = require('mock-property');\\n\\nvar isCore = require('../');\\nvar data = require('../core.json');\\n\\nvar supportsNodePrefix = semver.satisfies(process.versions.node, '^14.18 || >= 16', { includePrerelease: true });\\n\\ntest('core modules', function (t) {\\n\\tt.test('isCore()', function (st) {\\n\\t\\tst.ok(isCore('fs'));\\n\\t\\tst.ok(isCore('net'));\\n\\t\\tst.ok(isCore('http'));\\n\\n\\t\\tst.ok(!isCore('seq'));\\n\\t\\tst.ok(!isCore('../'));\\n\\n\\t\\tst.ok(!isCore('toString'));\\n\\n\\t\\tst.end();\\n\\t});\\n\\n\\tt.test('core list', function (st) {\\n\\t\\tvar cores = keys(data);\\n\\t\\tst.plan(cores.length);\\n\\n\\t\\tfor (var i = 0; i < cores.length; ++i) {\\n\\t\\t\\tvar mod = cores[i];\\n\\t\\t\\tvar requireFunc = function () { require(mod); }; // eslint-disable-line no-loop-func\\n\\t\\t\\tif (isCore(mod)) {\\n\\t\\t\\t\\tst.doesNotThrow(requireFunc, mod + ' supported; requiring does not throw');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tst['throws'](requireFunc, mod + ' not supported; requiring throws');\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tst.end();\\n\\t});\\n\\n\\tt.test('core via repl module', { skip: !data.repl }, function (st) {\\n\\t\\tvar libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle\\n\\t\\tif (!libs) {\\n\\t\\t\\tst.skip('repl._builtinLibs does not exist');\\n\\t\\t} else {\\n\\t\\t\\tfor (var i = 0; i < libs.length; ++i) {\\n\\t\\t\\t\\tvar mod = libs[i];\\n\\t\\t\\t\\tst.ok(data[mod], mod + ' is a core module');\\n\\t\\t\\t\\tst.doesNotThrow(\\n\\t\\t\\t\\t\\tfunction () { require(mod); }, // eslint-disable-line no-loop-func\\n\\t\\t\\t\\t\\t'requiring ' + mod + ' does not throw'\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tif (mod.slice(0, 5) !== 'node:') {\\n\\t\\t\\t\\t\\tif (supportsNodePrefix) {\\n\\t\\t\\t\\t\\t\\tst.doesNotThrow(\\n\\t\\t\\t\\t\\t\\t\\tfunction () { require('node:' + mod); }, // eslint-disable-line no-loop-func\\n\\t\\t\\t\\t\\t\\t\\t'requiring node:' + mod + ' does not throw'\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tst['throws'](\\n\\t\\t\\t\\t\\t\\t\\tfunction () { require('node:' + mod); }, // eslint-disable-line no-loop-func\\n\\t\\t\\t\\t\\t\\t\\t'requiring node:' + mod + ' throws'\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tst.end();\\n\\t});\\n\\n\\tt.test('core via builtinModules list', { skip: !data.module }, function (st) {\\n\\t\\tvar libs = require('module').builtinModules;\\n\\t\\tif (!libs) {\\n\\t\\t\\tst.skip('module.builtinModules does not exist');\\n\\t\\t} else {\\n\\t\\t\\tvar excludeList = [\\n\\t\\t\\t\\t'_debug_agent',\\n\\t\\t\\t\\t'v8/tools/tickprocessor-driver',\\n\\t\\t\\t\\t'v8/tools/SourceMap',\\n\\t\\t\\t\\t'v8/tools/tickprocessor',\\n\\t\\t\\t\\t'v8/tools/profile'\\n\\t\\t\\t];\\n\\t\\t\\t// see https://github.com/nodejs/node/issues/42785\\n\\t\\t\\tif (semver.satisfies(process.version, '>= 18')) {\\n\\t\\t\\t\\tlibs = libs.concat('node:test');\\n\\t\\t\\t}\\n\\t\\t\\tfor (var i = 0; i < libs.length; ++i) {\\n\\t\\t\\t\\tvar mod = libs[i];\\n\\t\\t\\t\\tif (excludeList.indexOf(mod) === -1) {\\n\\t\\t\\t\\t\\tst.ok(data[mod], mod + ' is a core module');\\n\\t\\t\\t\\t\\tst.doesNotThrow(\\n\\t\\t\\t\\t\\t\\tfunction () { require(mod); }, // eslint-disable-line no-loop-func\\n\\t\\t\\t\\t\\t\\t'requiring ' + mod + ' does not throw'\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\tif (mod.slice(0, 5) !== 'node:') {\\n\\t\\t\\t\\t\\t\\tif (supportsNodePrefix) {\\n\\t\\t\\t\\t\\t\\t\\tst.doesNotThrow(\\n\\t\\t\\t\\t\\t\\t\\t\\tfunction () { require('node:' + mod); }, // eslint-disable-line no-loop-func\\n\\t\\t\\t\\t\\t\\t\\t\\t'requiring node:' + mod + ' does not throw'\\n\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tst['throws'](\\n\\t\\t\\t\\t\\t\\t\\t\\tfunction () { require('node:' + mod); }, // eslint-disable-line no-loop-func\\n\\t\\t\\t\\t\\t\\t\\t\\t'requiring node:' + mod + ' throws'\\n\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tst.end();\\n\\t});\\n\\n\\tt.test('Object.prototype pollution', function (st) {\\n\\t\\tvar nonKey = 'not a core module';\\n\\t\\tst.teardown(mockProperty(Object.prototype, 'fs', { value: false }));\\n\\t\\tst.teardown(mockProperty(Object.prototype, 'path', { value: '>= 999999999' }));\\n\\t\\tst.teardown(mockProperty(Object.prototype, 'http', { value: data.http }));\\n\\t\\tst.teardown(mockProperty(Object.prototype, nonKey, { value: true }));\\n\\n\\t\\tst.equal(isCore('fs'), true, 'fs is a core module even if Object.prototype lies');\\n\\t\\tst.equal(isCore('path'), true, 'path is a core module even if Object.prototype lies');\\n\\t\\tst.equal(isCore('http'), true, 'path is a core module even if Object.prototype matches data');\\n\\t\\tst.equal(isCore(nonKey), false, '\\\"' + nonKey + '\\\" is not a core module even if Object.prototype lies');\\n\\n\\t\\tst.end();\\n\\t});\\n\\n\\tt.end();\\n});\\n\",\"filename\":\"/node_modules/is-core-module/test/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var resolve = require('../');\\nresolve('tap', { basedir: __dirname }, function (err, res) {\\n    if (err) console.error(err);\\n    else console.log(res);\\n});\\n\",\"filename\":\"/node_modules/resolve/example/async.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var resolve = require('../');\\nvar res = resolve.sync('tap', { basedir: __dirname });\\nconsole.log(res);\\n\",\"filename\":\"/node_modules/resolve/example/sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar test = require('tape');\\nvar has = require('../');\\n\\ntest('has', function (t) {\\n  t.equal(has({}, 'hasOwnProperty'), false, 'object literal does not have own property \\\"hasOwnProperty\\\"');\\n  t.equal(has(Object.prototype, 'hasOwnProperty'), true, 'Object.prototype has own property \\\"hasOwnProperty\\\"');\\n  t.end();\\n});\\n\",\"filename\":\"/node_modules/has/test/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// jscs:disable requireUseStrict\\n\\nvar test = require('tape');\\n\\nvar functionBind = require('../implementation');\\nvar getCurrentContext = function () { return this; };\\n\\ntest('functionBind is a function', function (t) {\\n    t.equal(typeof functionBind, 'function');\\n    t.end();\\n});\\n\\ntest('non-functions', function (t) {\\n    var nonFunctions = [true, false, [], {}, 42, 'foo', NaN, /a/g];\\n    t.plan(nonFunctions.length);\\n    for (var i = 0; i < nonFunctions.length; ++i) {\\n        try { functionBind.call(nonFunctions[i]); } catch (ex) {\\n            t.ok(ex instanceof TypeError, 'throws when given ' + String(nonFunctions[i]));\\n        }\\n    }\\n    t.end();\\n});\\n\\ntest('without a context', function (t) {\\n    t.test('binds properly', function (st) {\\n        var args, context;\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                context = this;\\n            })\\n        };\\n        namespace.func(1, 2, 3);\\n        st.deepEqual(args, [1, 2, 3]);\\n        st.equal(context, getCurrentContext.call());\\n        st.end();\\n    });\\n\\n    t.test('binds properly, and still supplies bound arguments', function (st) {\\n        var args, context;\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                context = this;\\n            }, undefined, 1, 2, 3)\\n        };\\n        namespace.func(4, 5, 6);\\n        st.deepEqual(args, [1, 2, 3, 4, 5, 6]);\\n        st.equal(context, getCurrentContext.call());\\n        st.end();\\n    });\\n\\n    t.test('returns properly', function (st) {\\n        var args;\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                return this;\\n            }, null)\\n        };\\n        var context = namespace.func(1, 2, 3);\\n        st.equal(context, getCurrentContext.call(), 'returned context is namespaced context');\\n        st.deepEqual(args, [1, 2, 3], 'passed arguments are correct');\\n        st.end();\\n    });\\n\\n    t.test('returns properly with bound arguments', function (st) {\\n        var args;\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                return this;\\n            }, null, 1, 2, 3)\\n        };\\n        var context = namespace.func(4, 5, 6);\\n        st.equal(context, getCurrentContext.call(), 'returned context is namespaced context');\\n        st.deepEqual(args, [1, 2, 3, 4, 5, 6], 'passed arguments are correct');\\n        st.end();\\n    });\\n\\n    t.test('called as a constructor', function (st) {\\n        var thunkify = function (value) {\\n            return function () { return value; };\\n        };\\n        st.test('returns object value', function (sst) {\\n            var expectedReturnValue = [1, 2, 3];\\n            var Constructor = functionBind.call(thunkify(expectedReturnValue), null);\\n            var result = new Constructor();\\n            sst.equal(result, expectedReturnValue);\\n            sst.end();\\n        });\\n\\n        st.test('does not return primitive value', function (sst) {\\n            var Constructor = functionBind.call(thunkify(42), null);\\n            var result = new Constructor();\\n            sst.notEqual(result, 42);\\n            sst.end();\\n        });\\n\\n        st.test('object from bound constructor is instance of original and bound constructor', function (sst) {\\n            var A = function (x) {\\n                this.name = x || 'A';\\n            };\\n            var B = functionBind.call(A, null, 'B');\\n\\n            var result = new B();\\n            sst.ok(result instanceof B, 'result is instance of bound constructor');\\n            sst.ok(result instanceof A, 'result is instance of original constructor');\\n            sst.end();\\n        });\\n\\n        st.end();\\n    });\\n\\n    t.end();\\n});\\n\\ntest('with a context', function (t) {\\n    t.test('with no bound arguments', function (st) {\\n        var args, context;\\n        var boundContext = {};\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                context = this;\\n            }, boundContext)\\n        };\\n        namespace.func(1, 2, 3);\\n        st.equal(context, boundContext, 'binds a context properly');\\n        st.deepEqual(args, [1, 2, 3], 'supplies passed arguments');\\n        st.end();\\n    });\\n\\n    t.test('with bound arguments', function (st) {\\n        var args, context;\\n        var boundContext = {};\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                context = this;\\n            }, boundContext, 1, 2, 3)\\n        };\\n        namespace.func(4, 5, 6);\\n        st.equal(context, boundContext, 'binds a context properly');\\n        st.deepEqual(args, [1, 2, 3, 4, 5, 6], 'supplies bound and passed arguments');\\n        st.end();\\n    });\\n\\n    t.test('returns properly', function (st) {\\n        var boundContext = {};\\n        var args;\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                return this;\\n            }, boundContext)\\n        };\\n        var context = namespace.func(1, 2, 3);\\n        st.equal(context, boundContext, 'returned context is bound context');\\n        st.notEqual(context, getCurrentContext.call(), 'returned context is not lexical context');\\n        st.deepEqual(args, [1, 2, 3], 'passed arguments are correct');\\n        st.end();\\n    });\\n\\n    t.test('returns properly with bound arguments', function (st) {\\n        var boundContext = {};\\n        var args;\\n        var namespace = {\\n            func: functionBind.call(function () {\\n                args = Array.prototype.slice.call(arguments);\\n                return this;\\n            }, boundContext, 1, 2, 3)\\n        };\\n        var context = namespace.func(4, 5, 6);\\n        st.equal(context, boundContext, 'returned context is bound context');\\n        st.notEqual(context, getCurrentContext.call(), 'returned context is not lexical context');\\n        st.deepEqual(args, [1, 2, 3, 4, 5, 6], 'passed arguments are correct');\\n        st.end();\\n    });\\n\\n    t.test('passes the correct arguments when called as a constructor', function (st) {\\n        var expected = { name: 'Correct' };\\n        var namespace = {\\n            Func: functionBind.call(function (arg) {\\n                return arg;\\n            }, { name: 'Incorrect' })\\n        };\\n        var returned = new namespace.Func(expected);\\n        st.equal(returned, expected, 'returns the right arg when called as a constructor');\\n        st.end();\\n    });\\n\\n    t.test('has the new instance\\\\'s context when called as a constructor', function (st) {\\n        var actualContext;\\n        var expectedContext = { foo: 'bar' };\\n        var namespace = {\\n            Func: functionBind.call(function () {\\n                actualContext = this;\\n            }, expectedContext)\\n        };\\n        var result = new namespace.Func();\\n        st.equal(result instanceof namespace.Func, true);\\n        st.notEqual(actualContext, expectedContext);\\n        st.end();\\n    });\\n\\n    t.end();\\n});\\n\\ntest('bound function length', function (t) {\\n    t.test('sets a correct length without thisArg', function (st) {\\n        var subject = functionBind.call(function (a, b, c) { return a + b + c; });\\n        st.equal(subject.length, 3);\\n        st.equal(subject(1, 2, 3), 6);\\n        st.end();\\n    });\\n\\n    t.test('sets a correct length with thisArg', function (st) {\\n        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, {});\\n        st.equal(subject.length, 3);\\n        st.equal(subject(1, 2, 3), 6);\\n        st.end();\\n    });\\n\\n    t.test('sets a correct length without thisArg and first argument', function (st) {\\n        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, undefined, 1);\\n        st.equal(subject.length, 2);\\n        st.equal(subject(2, 3), 6);\\n        st.end();\\n    });\\n\\n    t.test('sets a correct length with thisArg and first argument', function (st) {\\n        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, {}, 1);\\n        st.equal(subject.length, 2);\\n        st.equal(subject(2, 3), 6);\\n        st.end();\\n    });\\n\\n    t.test('sets a correct length without thisArg and too many arguments', function (st) {\\n        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, undefined, 1, 2, 3, 4);\\n        st.equal(subject.length, 0);\\n        st.equal(subject(), 6);\\n        st.end();\\n    });\\n\\n    t.test('sets a correct length with thisArg and too many arguments', function (st) {\\n        var subject = functionBind.call(function (a, b, c) { return a + b + c; }, {}, 1, 2, 3, 4);\\n        st.equal(subject.length, 0);\\n        st.equal(subject(), 6);\\n        st.end();\\n    });\\n});\\n\",\"filename\":\"/node_modules/function-bind/test/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var fs = require('fs');\\nvar getHomedir = require('./homedir');\\nvar path = require('path');\\nvar caller = require('./caller');\\nvar nodeModulesPaths = require('./node-modules-paths');\\nvar normalizeOptions = require('./normalize-options');\\nvar isCore = require('is-core-module');\\n\\nvar realpathFS = process.platform !== 'win32' && fs.realpath && typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;\\n\\nvar homedir = getHomedir();\\nvar defaultPaths = function () {\\n    return [\\n        path.join(homedir, '.node_modules'),\\n        path.join(homedir, '.node_libraries')\\n    ];\\n};\\n\\nvar defaultIsFile = function isFile(file, cb) {\\n    fs.stat(file, function (err, stat) {\\n        if (!err) {\\n            return cb(null, stat.isFile() || stat.isFIFO());\\n        }\\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\\n        return cb(err);\\n    });\\n};\\n\\nvar defaultIsDir = function isDirectory(dir, cb) {\\n    fs.stat(dir, function (err, stat) {\\n        if (!err) {\\n            return cb(null, stat.isDirectory());\\n        }\\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\\n        return cb(err);\\n    });\\n};\\n\\nvar defaultRealpath = function realpath(x, cb) {\\n    realpathFS(x, function (realpathErr, realPath) {\\n        if (realpathErr && realpathErr.code !== 'ENOENT') cb(realpathErr);\\n        else cb(null, realpathErr ? x : realPath);\\n    });\\n};\\n\\nvar maybeRealpath = function maybeRealpath(realpath, x, opts, cb) {\\n    if (opts && opts.preserveSymlinks === false) {\\n        realpath(x, cb);\\n    } else {\\n        cb(null, x);\\n    }\\n};\\n\\nvar defaultReadPackage = function defaultReadPackage(readFile, pkgfile, cb) {\\n    readFile(pkgfile, function (readFileErr, body) {\\n        if (readFileErr) cb(readFileErr);\\n        else {\\n            try {\\n                var pkg = JSON.parse(body);\\n                cb(null, pkg);\\n            } catch (jsonErr) {\\n                cb(null);\\n            }\\n        }\\n    });\\n};\\n\\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\\n    var dirs = nodeModulesPaths(start, opts, x);\\n    for (var i = 0; i < dirs.length; i++) {\\n        dirs[i] = path.join(dirs[i], x);\\n    }\\n    return dirs;\\n};\\n\\nmodule.exports = function resolve(x, options, callback) {\\n    var cb = callback;\\n    var opts = options;\\n    if (typeof options === 'function') {\\n        cb = opts;\\n        opts = {};\\n    }\\n    if (typeof x !== 'string') {\\n        var err = new TypeError('Path must be a string.');\\n        return process.nextTick(function () {\\n            cb(err);\\n        });\\n    }\\n\\n    opts = normalizeOptions(x, opts);\\n\\n    var isFile = opts.isFile || defaultIsFile;\\n    var isDirectory = opts.isDirectory || defaultIsDir;\\n    var readFile = opts.readFile || fs.readFile;\\n    var realpath = opts.realpath || defaultRealpath;\\n    var readPackage = opts.readPackage || defaultReadPackage;\\n    if (opts.readFile && opts.readPackage) {\\n        var conflictErr = new TypeError('`readFile` and `readPackage` are mutually exclusive.');\\n        return process.nextTick(function () {\\n            cb(conflictErr);\\n        });\\n    }\\n    var packageIterator = opts.packageIterator;\\n\\n    var extensions = opts.extensions || ['.js'];\\n    var includeCoreModules = opts.includeCoreModules !== false;\\n    var basedir = opts.basedir || path.dirname(caller());\\n    var parent = opts.filename || basedir;\\n\\n    opts.paths = opts.paths || defaultPaths();\\n\\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\\n    var absoluteStart = path.resolve(basedir);\\n\\n    maybeRealpath(\\n        realpath,\\n        absoluteStart,\\n        opts,\\n        function (err, realStart) {\\n            if (err) cb(err);\\n            else init(realStart);\\n        }\\n    );\\n\\n    var res;\\n    function init(basedir) {\\n        if ((/^(?:\\\\.\\\\.?(?:\\\\/|$)|\\\\/|([A-Za-z]:)?[/\\\\\\\\])/).test(x)) {\\n            res = path.resolve(basedir, x);\\n            if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\\n            if ((/\\\\/$/).test(x) && res === basedir) {\\n                loadAsDirectory(res, opts.package, onfile);\\n            } else loadAsFile(res, opts.package, onfile);\\n        } else if (includeCoreModules && isCore(x)) {\\n            return cb(null, x);\\n        } else loadNodeModules(x, basedir, function (err, n, pkg) {\\n            if (err) cb(err);\\n            else if (n) {\\n                return maybeRealpath(realpath, n, opts, function (err, realN) {\\n                    if (err) {\\n                        cb(err);\\n                    } else {\\n                        cb(null, realN, pkg);\\n                    }\\n                });\\n            } else {\\n                var moduleError = new Error(\\\"Cannot find module '\\\" + x + \\\"' from '\\\" + parent + \\\"'\\\");\\n                moduleError.code = 'MODULE_NOT_FOUND';\\n                cb(moduleError);\\n            }\\n        });\\n    }\\n\\n    function onfile(err, m, pkg) {\\n        if (err) cb(err);\\n        else if (m) cb(null, m, pkg);\\n        else loadAsDirectory(res, function (err, d, pkg) {\\n            if (err) cb(err);\\n            else if (d) {\\n                maybeRealpath(realpath, d, opts, function (err, realD) {\\n                    if (err) {\\n                        cb(err);\\n                    } else {\\n                        cb(null, realD, pkg);\\n                    }\\n                });\\n            } else {\\n                var moduleError = new Error(\\\"Cannot find module '\\\" + x + \\\"' from '\\\" + parent + \\\"'\\\");\\n                moduleError.code = 'MODULE_NOT_FOUND';\\n                cb(moduleError);\\n            }\\n        });\\n    }\\n\\n    function loadAsFile(x, thePackage, callback) {\\n        var loadAsFilePackage = thePackage;\\n        var cb = callback;\\n        if (typeof loadAsFilePackage === 'function') {\\n            cb = loadAsFilePackage;\\n            loadAsFilePackage = undefined;\\n        }\\n\\n        var exts = [''].concat(extensions);\\n        load(exts, x, loadAsFilePackage);\\n\\n        function load(exts, x, loadPackage) {\\n            if (exts.length === 0) return cb(null, undefined, loadPackage);\\n            var file = x + exts[0];\\n\\n            var pkg = loadPackage;\\n            if (pkg) onpkg(null, pkg);\\n            else loadpkg(path.dirname(file), onpkg);\\n\\n            function onpkg(err, pkg_, dir) {\\n                pkg = pkg_;\\n                if (err) return cb(err);\\n                if (dir && pkg && opts.pathFilter) {\\n                    var rfile = path.relative(dir, file);\\n                    var rel = rfile.slice(0, rfile.length - exts[0].length);\\n                    var r = opts.pathFilter(pkg, x, rel);\\n                    if (r) return load(\\n                        [''].concat(extensions.slice()),\\n                        path.resolve(dir, r),\\n                        pkg\\n                    );\\n                }\\n                isFile(file, onex);\\n            }\\n            function onex(err, ex) {\\n                if (err) return cb(err);\\n                if (ex) return cb(null, file, pkg);\\n                load(exts.slice(1), x, pkg);\\n            }\\n        }\\n    }\\n\\n    function loadpkg(dir, cb) {\\n        if (dir === '' || dir === '/') return cb(null);\\n        if (process.platform === 'win32' && (/^\\\\w:[/\\\\\\\\]*$/).test(dir)) {\\n            return cb(null);\\n        }\\n        if ((/[/\\\\\\\\]node_modules[/\\\\\\\\]*$/).test(dir)) return cb(null);\\n\\n        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {\\n            if (unwrapErr) return loadpkg(path.dirname(dir), cb);\\n            var pkgfile = path.join(pkgdir, 'package.json');\\n            isFile(pkgfile, function (err, ex) {\\n                // on err, ex is false\\n                if (!ex) return loadpkg(path.dirname(dir), cb);\\n\\n                readPackage(readFile, pkgfile, function (err, pkgParam) {\\n                    if (err) cb(err);\\n\\n                    var pkg = pkgParam;\\n\\n                    if (pkg && opts.packageFilter) {\\n                        pkg = opts.packageFilter(pkg, pkgfile);\\n                    }\\n                    cb(null, pkg, dir);\\n                });\\n            });\\n        });\\n    }\\n\\n    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {\\n        var cb = callback;\\n        var fpkg = loadAsDirectoryPackage;\\n        if (typeof fpkg === 'function') {\\n            cb = fpkg;\\n            fpkg = opts.package;\\n        }\\n\\n        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {\\n            if (unwrapErr) return cb(unwrapErr);\\n            var pkgfile = path.join(pkgdir, 'package.json');\\n            isFile(pkgfile, function (err, ex) {\\n                if (err) return cb(err);\\n                if (!ex) return loadAsFile(path.join(x, 'index'), fpkg, cb);\\n\\n                readPackage(readFile, pkgfile, function (err, pkgParam) {\\n                    if (err) return cb(err);\\n\\n                    var pkg = pkgParam;\\n\\n                    if (pkg && opts.packageFilter) {\\n                        pkg = opts.packageFilter(pkg, pkgfile);\\n                    }\\n\\n                    if (pkg && pkg.main) {\\n                        if (typeof pkg.main !== 'string') {\\n                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\\n                            mainError.code = 'INVALID_PACKAGE_MAIN';\\n                            return cb(mainError);\\n                        }\\n                        if (pkg.main === '.' || pkg.main === './') {\\n                            pkg.main = 'index';\\n                        }\\n                        loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {\\n                            if (err) return cb(err);\\n                            if (m) return cb(null, m, pkg);\\n                            if (!pkg) return loadAsFile(path.join(x, 'index'), pkg, cb);\\n\\n                            var dir = path.resolve(x, pkg.main);\\n                            loadAsDirectory(dir, pkg, function (err, n, pkg) {\\n                                if (err) return cb(err);\\n                                if (n) return cb(null, n, pkg);\\n                                loadAsFile(path.join(x, 'index'), pkg, cb);\\n                            });\\n                        });\\n                        return;\\n                    }\\n\\n                    loadAsFile(path.join(x, '/index'), pkg, cb);\\n                });\\n            });\\n        });\\n    }\\n\\n    function processDirs(cb, dirs) {\\n        if (dirs.length === 0) return cb(null, undefined);\\n        var dir = dirs[0];\\n\\n        isDirectory(path.dirname(dir), isdir);\\n\\n        function isdir(err, isdir) {\\n            if (err) return cb(err);\\n            if (!isdir) return processDirs(cb, dirs.slice(1));\\n            loadAsFile(dir, opts.package, onfile);\\n        }\\n\\n        function onfile(err, m, pkg) {\\n            if (err) return cb(err);\\n            if (m) return cb(null, m, pkg);\\n            loadAsDirectory(dir, opts.package, ondir);\\n        }\\n\\n        function ondir(err, n, pkg) {\\n            if (err) return cb(err);\\n            if (n) return cb(null, n, pkg);\\n            processDirs(cb, dirs.slice(1));\\n        }\\n    }\\n    function loadNodeModules(x, start, cb) {\\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\\n        processDirs(\\n            cb,\\n            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()\\n        );\\n    }\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/async.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = function () {\\n    // see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\\n    var origPrepareStackTrace = Error.prepareStackTrace;\\n    Error.prepareStackTrace = function (_, stack) { return stack; };\\n    var stack = (new Error()).stack;\\n    Error.prepareStackTrace = origPrepareStackTrace;\\n    return stack[2].getFileName();\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/caller.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var isCoreModule = require('is-core-module');\\n\\nmodule.exports = function isCore(x) {\\n    return isCoreModule(x);\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/is-core.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var current = (process.versions && process.versions.node && process.versions.node.split('.')) || [];\\n\\nfunction specifierIncluded(specifier) {\\n    var parts = specifier.split(' ');\\n    var op = parts.length > 1 ? parts[0] : '=';\\n    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\\n\\n    for (var i = 0; i < 3; ++i) {\\n        var cur = parseInt(current[i] || 0, 10);\\n        var ver = parseInt(versionParts[i] || 0, 10);\\n        if (cur === ver) {\\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\\n        }\\n        if (op === '<') {\\n            return cur < ver;\\n        } else if (op === '>=') {\\n            return cur >= ver;\\n        }\\n        return false;\\n    }\\n    return op === '>=';\\n}\\n\\nfunction matchesRange(range) {\\n    var specifiers = range.split(/ ?&& ?/);\\n    if (specifiers.length === 0) { return false; }\\n    for (var i = 0; i < specifiers.length; ++i) {\\n        if (!specifierIncluded(specifiers[i])) { return false; }\\n    }\\n    return true;\\n}\\n\\nfunction versionIncluded(specifierValue) {\\n    if (typeof specifierValue === 'boolean') { return specifierValue; }\\n    if (specifierValue && typeof specifierValue === 'object') {\\n        for (var i = 0; i < specifierValue.length; ++i) {\\n            if (matchesRange(specifierValue[i])) { return true; }\\n        }\\n        return false;\\n    }\\n    return matchesRange(specifierValue);\\n}\\n\\nvar data = require('./core.json');\\n\\nvar core = {};\\nfor (var mod in data) { // eslint-disable-line no-restricted-syntax\\n    if (Object.prototype.hasOwnProperty.call(data, mod)) {\\n        core[mod] = versionIncluded(data[mod]);\\n    }\\n}\\nmodule.exports = core;\\n\",\"filename\":\"/node_modules/resolve/lib/core.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar os = require('os');\\n\\n// adapted from https://github.com/sindresorhus/os-homedir/blob/11e089f4754db38bb535e5a8416320c4446e8cfd/index.js\\n\\nmodule.exports = os.homedir || function homedir() {\\n    var home = process.env.HOME;\\n    var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;\\n\\n    if (process.platform === 'win32') {\\n        return process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null;\\n    }\\n\\n    if (process.platform === 'darwin') {\\n        return home || (user ? '/Users/' + user : null);\\n    }\\n\\n    if (process.platform === 'linux') {\\n        return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null)); // eslint-disable-line no-extra-parens\\n    }\\n\\n    return home || null;\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/homedir.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var test = require('tape');\\nvar keys = require('object-keys');\\nvar semver = require('semver');\\n\\nvar resolve = require('../');\\n\\nvar brokenNode = semver.satisfies(process.version, '11.11 - 11.13');\\n\\ntest('core modules', function (t) {\\n    t.test('isCore()', function (st) {\\n        st.ok(resolve.isCore('fs'));\\n        st.ok(resolve.isCore('net'));\\n        st.ok(resolve.isCore('http'));\\n\\n        st.ok(!resolve.isCore('seq'));\\n        st.ok(!resolve.isCore('../'));\\n\\n        st.ok(!resolve.isCore('toString'));\\n\\n        st.end();\\n    });\\n\\n    t.test('core list', function (st) {\\n        var cores = keys(resolve.core);\\n        st.plan(cores.length);\\n\\n        for (var i = 0; i < cores.length; ++i) {\\n            var mod = cores[i];\\n            // note: this must be require, not require.resolve, due to https://github.com/nodejs/node/issues/43274\\n            var requireFunc = function () { require(mod); }; // eslint-disable-line no-loop-func\\n            t.comment(mod + ': ' + resolve.core[mod]);\\n            if (resolve.core[mod]) {\\n                st.doesNotThrow(requireFunc, mod + ' supported; requiring does not throw');\\n            } else if (brokenNode) {\\n                st.ok(true, 'this version of node is broken: attempting to require things that fail to resolve breaks \\\"home_paths\\\" tests');\\n            } else {\\n                st.throws(requireFunc, mod + ' not supported; requiring throws');\\n            }\\n        }\\n\\n        st.end();\\n    });\\n\\n    t.test('core via repl module', { skip: !resolve.core.repl }, function (st) {\\n        var libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle\\n        if (!libs) {\\n            st.skip('module.builtinModules does not exist');\\n            return st.end();\\n        }\\n        for (var i = 0; i < libs.length; ++i) {\\n            var mod = libs[i];\\n            st.ok(resolve.core[mod], mod + ' is a core module');\\n            st.doesNotThrow(\\n                function () { require(mod); }, // eslint-disable-line no-loop-func\\n                'requiring ' + mod + ' does not throw'\\n            );\\n        }\\n        st.end();\\n    });\\n\\n    t.test('core via builtinModules list', { skip: !resolve.core.module }, function (st) {\\n        var libs = require('module').builtinModules;\\n        if (!libs) {\\n            st.skip('module.builtinModules does not exist');\\n            return st.end();\\n        }\\n        var blacklist = [\\n            '_debug_agent',\\n            'v8/tools/tickprocessor-driver',\\n            'v8/tools/SourceMap',\\n            'v8/tools/tickprocessor',\\n            'v8/tools/profile'\\n        ];\\n        for (var i = 0; i < libs.length; ++i) {\\n            var mod = libs[i];\\n            if (blacklist.indexOf(mod) === -1) {\\n                st.ok(resolve.core[mod], mod + ' is a core module');\\n                st.doesNotThrow(\\n                    function () { require(mod); }, // eslint-disable-line no-loop-func\\n                    'requiring ' + mod + ' does not throw'\\n                );\\n            }\\n        }\\n        st.end();\\n    });\\n\\n    t.end();\\n});\\n\",\"filename\":\"/node_modules/resolve/test/core.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var isCore = require('is-core-module');\\nvar fs = require('fs');\\nvar path = require('path');\\nvar getHomedir = require('./homedir');\\nvar caller = require('./caller');\\nvar nodeModulesPaths = require('./node-modules-paths');\\nvar normalizeOptions = require('./normalize-options');\\n\\nvar realpathFS = process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;\\n\\nvar homedir = getHomedir();\\nvar defaultPaths = function () {\\n    return [\\n        path.join(homedir, '.node_modules'),\\n        path.join(homedir, '.node_libraries')\\n    ];\\n};\\n\\nvar defaultIsFile = function isFile(file) {\\n    try {\\n        var stat = fs.statSync(file, { throwIfNoEntry: false });\\n    } catch (e) {\\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\\n        throw e;\\n    }\\n    return !!stat && (stat.isFile() || stat.isFIFO());\\n};\\n\\nvar defaultIsDir = function isDirectory(dir) {\\n    try {\\n        var stat = fs.statSync(dir, { throwIfNoEntry: false });\\n    } catch (e) {\\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\\n        throw e;\\n    }\\n    return !!stat && stat.isDirectory();\\n};\\n\\nvar defaultRealpathSync = function realpathSync(x) {\\n    try {\\n        return realpathFS(x);\\n    } catch (realpathErr) {\\n        if (realpathErr.code !== 'ENOENT') {\\n            throw realpathErr;\\n        }\\n    }\\n    return x;\\n};\\n\\nvar maybeRealpathSync = function maybeRealpathSync(realpathSync, x, opts) {\\n    if (opts && opts.preserveSymlinks === false) {\\n        return realpathSync(x);\\n    }\\n    return x;\\n};\\n\\nvar defaultReadPackageSync = function defaultReadPackageSync(readFileSync, pkgfile) {\\n    var body = readFileSync(pkgfile);\\n    try {\\n        var pkg = JSON.parse(body);\\n        return pkg;\\n    } catch (jsonErr) {}\\n};\\n\\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\\n    var dirs = nodeModulesPaths(start, opts, x);\\n    for (var i = 0; i < dirs.length; i++) {\\n        dirs[i] = path.join(dirs[i], x);\\n    }\\n    return dirs;\\n};\\n\\nmodule.exports = function resolveSync(x, options) {\\n    if (typeof x !== 'string') {\\n        throw new TypeError('Path must be a string.');\\n    }\\n    var opts = normalizeOptions(x, options);\\n\\n    var isFile = opts.isFile || defaultIsFile;\\n    var readFileSync = opts.readFileSync || fs.readFileSync;\\n    var isDirectory = opts.isDirectory || defaultIsDir;\\n    var realpathSync = opts.realpathSync || defaultRealpathSync;\\n    var readPackageSync = opts.readPackageSync || defaultReadPackageSync;\\n    if (opts.readFileSync && opts.readPackageSync) {\\n        throw new TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');\\n    }\\n    var packageIterator = opts.packageIterator;\\n\\n    var extensions = opts.extensions || ['.js'];\\n    var includeCoreModules = opts.includeCoreModules !== false;\\n    var basedir = opts.basedir || path.dirname(caller());\\n    var parent = opts.filename || basedir;\\n\\n    opts.paths = opts.paths || defaultPaths();\\n\\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\\n    var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);\\n\\n    if ((/^(?:\\\\.\\\\.?(?:\\\\/|$)|\\\\/|([A-Za-z]:)?[/\\\\\\\\])/).test(x)) {\\n        var res = path.resolve(absoluteStart, x);\\n        if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\\n        if (m) return maybeRealpathSync(realpathSync, m, opts);\\n    } else if (includeCoreModules && isCore(x)) {\\n        return x;\\n    } else {\\n        var n = loadNodeModulesSync(x, absoluteStart);\\n        if (n) return maybeRealpathSync(realpathSync, n, opts);\\n    }\\n\\n    var err = new Error(\\\"Cannot find module '\\\" + x + \\\"' from '\\\" + parent + \\\"'\\\");\\n    err.code = 'MODULE_NOT_FOUND';\\n    throw err;\\n\\n    function loadAsFileSync(x) {\\n        var pkg = loadpkg(path.dirname(x));\\n\\n        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {\\n            var rfile = path.relative(pkg.dir, x);\\n            var r = opts.pathFilter(pkg.pkg, x, rfile);\\n            if (r) {\\n                x = path.resolve(pkg.dir, r); // eslint-disable-line no-param-reassign\\n            }\\n        }\\n\\n        if (isFile(x)) {\\n            return x;\\n        }\\n\\n        for (var i = 0; i < extensions.length; i++) {\\n            var file = x + extensions[i];\\n            if (isFile(file)) {\\n                return file;\\n            }\\n        }\\n    }\\n\\n    function loadpkg(dir) {\\n        if (dir === '' || dir === '/') return;\\n        if (process.platform === 'win32' && (/^\\\\w:[/\\\\\\\\]*$/).test(dir)) {\\n            return;\\n        }\\n        if ((/[/\\\\\\\\]node_modules[/\\\\\\\\]*$/).test(dir)) return;\\n\\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');\\n\\n        if (!isFile(pkgfile)) {\\n            return loadpkg(path.dirname(dir));\\n        }\\n\\n        var pkg = readPackageSync(readFileSync, pkgfile);\\n\\n        if (pkg && opts.packageFilter) {\\n            // v2 will pass pkgfile\\n            pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment\\n        }\\n\\n        return { pkg: pkg, dir: dir };\\n    }\\n\\n    function loadAsDirectorySync(x) {\\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, x, opts), '/package.json');\\n        if (isFile(pkgfile)) {\\n            try {\\n                var pkg = readPackageSync(readFileSync, pkgfile);\\n            } catch (e) {}\\n\\n            if (pkg && opts.packageFilter) {\\n                // v2 will pass pkgfile\\n                pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment\\n            }\\n\\n            if (pkg && pkg.main) {\\n                if (typeof pkg.main !== 'string') {\\n                    var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\\n                    mainError.code = 'INVALID_PACKAGE_MAIN';\\n                    throw mainError;\\n                }\\n                if (pkg.main === '.' || pkg.main === './') {\\n                    pkg.main = 'index';\\n                }\\n                try {\\n                    var m = loadAsFileSync(path.resolve(x, pkg.main));\\n                    if (m) return m;\\n                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));\\n                    if (n) return n;\\n                } catch (e) {}\\n            }\\n        }\\n\\n        return loadAsFileSync(path.join(x, '/index'));\\n    }\\n\\n    function loadNodeModulesSync(x, start) {\\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\\n        var dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();\\n\\n        for (var i = 0; i < dirs.length; i++) {\\n            var dir = dirs[i];\\n            if (isDirectory(path.dirname(dir))) {\\n                var m = loadAsFileSync(dir);\\n                if (m) return m;\\n                var n = loadAsDirectorySync(dir);\\n                if (n) return n;\\n            }\\n        }\\n    }\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = function (x, opts) {\\n    /**\\n     * This file is purposefully a passthrough. It's expected that third-party\\n     * environments will override it at runtime in order to inject special logic\\n     * into `resolve` (by manipulating the options). One such example is the PnP\\n     * code path in Yarn.\\n     */\\n\\n    return opts || {};\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/normalize-options.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar parse = path.parse || require('path-parse'); // eslint-disable-line global-require\\n\\nvar getNodeModulesDirs = function getNodeModulesDirs(absoluteStart, modules) {\\n    var prefix = '/';\\n    if ((/^([A-Za-z]:)/).test(absoluteStart)) {\\n        prefix = '';\\n    } else if ((/^\\\\\\\\\\\\\\\\/).test(absoluteStart)) {\\n        prefix = '\\\\\\\\\\\\\\\\';\\n    }\\n\\n    var paths = [absoluteStart];\\n    var parsed = parse(absoluteStart);\\n    while (parsed.dir !== paths[paths.length - 1]) {\\n        paths.push(parsed.dir);\\n        parsed = parse(parsed.dir);\\n    }\\n\\n    return paths.reduce(function (dirs, aPath) {\\n        return dirs.concat(modules.map(function (moduleDir) {\\n            return path.resolve(prefix, aPath, moduleDir);\\n        }));\\n    }, []);\\n};\\n\\nmodule.exports = function nodeModulesPaths(start, opts, request) {\\n    var modules = opts && opts.moduleDirectory\\n        ? [].concat(opts.moduleDirectory)\\n        : ['node_modules'];\\n\\n    if (opts && typeof opts.paths === 'function') {\\n        return opts.paths(\\n            request,\\n            start,\\n            function () { return getNodeModulesDirs(start, modules); },\\n            opts\\n        );\\n    }\\n\\n    var dirs = getNodeModulesDirs(start, modules);\\n    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;\\n};\\n\",\"filename\":\"/node_modules/resolve/lib/node-modules-paths.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('filter', function (t) {\\n    t.plan(4);\\n    var dir = path.join(__dirname, 'resolver');\\n    var packageFilterArgs;\\n    resolve('./baz', {\\n        basedir: dir,\\n        packageFilter: function (pkg, pkgfile) {\\n            pkg.main = 'doom'; // eslint-disable-line no-param-reassign\\n            packageFilterArgs = [pkg, pkgfile];\\n            return pkg;\\n        }\\n    }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n\\n        t.equal(res, path.join(dir, 'baz/doom.js'), 'changing the package \\\"main\\\" works');\\n\\n        var packageData = packageFilterArgs[0];\\n        t.equal(pkg, packageData, 'first packageFilter argument is \\\"pkg\\\"');\\n        t.equal(packageData.main, 'doom', 'package \\\"main\\\" was altered');\\n\\n        var packageFile = packageFilterArgs[1];\\n        t.equal(\\n            packageFile,\\n            path.join(dir, 'baz/package.json'),\\n            'second packageFilter argument is \\\"pkgfile\\\"'\\n        );\\n\\n        t.end();\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/filter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('filter', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n    var packageFilterArgs;\\n    var res = resolve.sync('./baz', {\\n        basedir: dir,\\n        // NOTE: in v2.x, this will be `pkg, pkgfile, dir`, but must remain \\\"broken\\\" here in v1.x for compatibility\\n        packageFilter: function (pkg, /*pkgfile,*/ dir) { // eslint-disable-line spaced-comment\\n            pkg.main = 'doom'; // eslint-disable-line no-param-reassign\\n            packageFilterArgs = 'is 1.x' ? [pkg, dir] : [pkg, pkgfile, dir]; // eslint-disable-line no-constant-condition, no-undef\\n            return pkg;\\n        }\\n    });\\n\\n    t.equal(res, path.join(dir, 'baz/doom.js'), 'changing the package \\\"main\\\" works');\\n\\n    var packageData = packageFilterArgs[0];\\n    t.equal(packageData.main, 'doom', 'package \\\"main\\\" was altered');\\n\\n    if (!'is 1.x') { // eslint-disable-line no-constant-condition\\n        var packageFile = packageFilterArgs[1];\\n        t.equal(packageFile, path.join(dir, 'baz', 'package.json'), 'package.json path is correct');\\n    }\\n\\n    var packageDir = packageFilterArgs['is 1.x' ? 1 : 2]; // eslint-disable-line no-constant-condition\\n    // eslint-disable-next-line no-constant-condition\\n    t.equal(packageDir, path.join(dir, 'baz'), ('is 1.x' ? 'second' : 'third') + ' packageFilter argument is \\\"dir\\\"');\\n\\n    t.end();\\n});\\n\",\"filename\":\"/node_modules/resolve/test/filter_sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('dotdot', function (t) {\\n    t.plan(4);\\n    var dir = path.join(__dirname, '/dotdot/abc');\\n\\n    resolve('..', { basedir: dir }, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(__dirname, 'dotdot/index.js'));\\n    });\\n\\n    resolve('.', { basedir: dir }, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, 'index.js'));\\n    });\\n});\\n\\ntest('dotdot sync', function (t) {\\n    t.plan(2);\\n    var dir = path.join(__dirname, '/dotdot/abc');\\n\\n    var a = resolve.sync('..', { basedir: dir });\\n    t.equal(a, path.join(__dirname, 'dotdot/index.js'));\\n\\n    var b = resolve.sync('.', { basedir: dir });\\n    t.equal(b, path.join(dir, 'index.js'));\\n});\\n\",\"filename\":\"/node_modules/resolve/test/dotdot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var test = require('tape');\\nvar path = require('path');\\nvar resolve = require('../');\\n\\ntest('faulty basedir must produce error in windows', { skip: process.platform !== 'win32' }, function (t) {\\n    t.plan(1);\\n\\n    var resolverDir = 'C:\\\\\\\\a\\\\\\\\b\\\\\\\\c\\\\\\\\d';\\n\\n    resolve('tape/lib/test.js', { basedir: resolverDir }, function (err, res, pkg) {\\n        t.equal(!!err, true);\\n    });\\n});\\n\\ntest('non-existent basedir should not throw when preserveSymlinks is false', function (t) {\\n    t.plan(2);\\n\\n    var opts = {\\n        basedir: path.join(path.sep, 'unreal', 'path', 'that', 'does', 'not', 'exist'),\\n        preserveSymlinks: false\\n    };\\n\\n    var module = './dotdot/abc';\\n\\n    resolve(module, opts, function (err, res) {\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n        t.equal(res, undefined);\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/faulty_basedir.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar fs = require('fs');\\nvar homedir = require('../lib/homedir');\\nvar path = require('path');\\n\\nvar test = require('tape');\\nvar mkdirp = require('mkdirp');\\nvar rimraf = require('rimraf');\\nvar mv = require('mv');\\nvar copyDir = require('copy-dir');\\nvar tmp = require('tmp');\\n\\nvar HOME = homedir();\\n\\nvar hnm = path.join(HOME, '.node_modules');\\nvar hnl = path.join(HOME, '.node_libraries');\\n\\nvar resolve = require('../sync');\\n\\nfunction makeDir(t, dir, cb) {\\n    mkdirp(dir, function (err) {\\n        if (err) {\\n            cb(err);\\n        } else {\\n            t.teardown(function cleanup() {\\n                rimraf.sync(dir);\\n            });\\n            cb();\\n        }\\n    });\\n}\\n\\nfunction makeTempDir(t, dir, cb) {\\n    if (fs.existsSync(dir)) {\\n        var tmpResult = tmp.dirSync();\\n        t.teardown(tmpResult.removeCallback);\\n        var backup = path.join(tmpResult.name, path.basename(dir));\\n        mv(dir, backup, function (err) {\\n            if (err) {\\n                cb(err);\\n            } else {\\n                t.teardown(function () {\\n                    mv(backup, dir, cb);\\n                });\\n                makeDir(t, dir, cb);\\n            }\\n        });\\n    } else {\\n        makeDir(t, dir, cb);\\n    }\\n}\\n\\ntest('homedir module paths', function (t) {\\n    t.plan(7);\\n\\n    makeTempDir(t, hnm, function (err) {\\n        t.error(err, 'no error with HNM temp dir');\\n        if (err) {\\n            return t.end();\\n        }\\n\\n        var bazHNMDir = path.join(hnm, 'baz');\\n        var dotMainDir = path.join(hnm, 'dot_main');\\n        copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNMDir);\\n        copyDir.sync(path.join(__dirname, 'resolver/dot_main'), dotMainDir);\\n\\n        var bazHNMmain = path.join(bazHNMDir, 'quux.js');\\n        t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');\\n        var dotMainMain = path.join(dotMainDir, 'index.js');\\n        t.equal(require.resolve('dot_main'), dotMainMain, 'sanity check: require.resolve finds `dot_main`');\\n\\n        makeTempDir(t, hnl, function (err) {\\n            t.error(err, 'no error with HNL temp dir');\\n            if (err) {\\n                return t.end();\\n            }\\n            var bazHNLDir = path.join(hnl, 'baz');\\n            copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNLDir);\\n\\n            var dotSlashMainDir = path.join(hnl, 'dot_slash_main');\\n            var dotSlashMainMain = path.join(dotSlashMainDir, 'index.js');\\n            copyDir.sync(path.join(__dirname, 'resolver/dot_slash_main'), dotSlashMainDir);\\n\\n            t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');\\n            t.equal(require.resolve('dot_slash_main'), dotSlashMainMain, 'sanity check: require.resolve finds HNL `dot_slash_main`');\\n\\n            t.test('with temp dirs', function (st) {\\n                st.plan(3);\\n\\n                st.test('just in `$HOME/.node_modules`', function (s2t) {\\n                    s2t.plan(1);\\n\\n                    var res = resolve('dot_main');\\n                    s2t.equal(res, dotMainMain, '`dot_main` resolves in `$HOME/.node_modules`');\\n                });\\n\\n                st.test('just in `$HOME/.node_libraries`', function (s2t) {\\n                    s2t.plan(1);\\n\\n                    var res = resolve('dot_slash_main');\\n                    s2t.equal(res, dotSlashMainMain, '`dot_slash_main` resolves in `$HOME/.node_libraries`');\\n                });\\n\\n                st.test('in `$HOME/.node_libraries` and `$HOME/.node_modules`', function (s2t) {\\n                    s2t.plan(1);\\n\\n                    var res = resolve('baz');\\n                    s2t.equal(res, bazHNMmain, '`baz` resolves in `$HOME/.node_modules` when in both');\\n                });\\n            });\\n        });\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/home_paths_sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar fs = require('fs');\\nvar homedir = require('../lib/homedir');\\nvar path = require('path');\\n\\nvar test = require('tape');\\nvar mkdirp = require('mkdirp');\\nvar rimraf = require('rimraf');\\nvar mv = require('mv');\\nvar copyDir = require('copy-dir');\\nvar tmp = require('tmp');\\n\\nvar HOME = homedir();\\n\\nvar hnm = path.join(HOME, '.node_modules');\\nvar hnl = path.join(HOME, '.node_libraries');\\n\\nvar resolve = require('../async');\\n\\nfunction makeDir(t, dir, cb) {\\n    mkdirp(dir, function (err) {\\n        if (err) {\\n            cb(err);\\n        } else {\\n            t.teardown(function cleanup() {\\n                rimraf.sync(dir);\\n            });\\n            cb();\\n        }\\n    });\\n}\\n\\nfunction makeTempDir(t, dir, cb) {\\n    if (fs.existsSync(dir)) {\\n        var tmpResult = tmp.dirSync();\\n        t.teardown(tmpResult.removeCallback);\\n        var backup = path.join(tmpResult.name, path.basename(dir));\\n        mv(dir, backup, function (err) {\\n            if (err) {\\n                cb(err);\\n            } else {\\n                t.teardown(function () {\\n                    mv(backup, dir, cb);\\n                });\\n                makeDir(t, dir, cb);\\n            }\\n        });\\n    } else {\\n        makeDir(t, dir, cb);\\n    }\\n}\\n\\ntest('homedir module paths', function (t) {\\n    t.plan(7);\\n\\n    makeTempDir(t, hnm, function (err) {\\n        t.error(err, 'no error with HNM temp dir');\\n        if (err) {\\n            return t.end();\\n        }\\n\\n        var bazHNMDir = path.join(hnm, 'baz');\\n        var dotMainDir = path.join(hnm, 'dot_main');\\n        copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNMDir);\\n        copyDir.sync(path.join(__dirname, 'resolver/dot_main'), dotMainDir);\\n\\n        var bazPkg = { name: 'baz', main: 'quux.js' };\\n        var dotMainPkg = { main: 'index' };\\n\\n        var bazHNMmain = path.join(bazHNMDir, 'quux.js');\\n        t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');\\n        var dotMainMain = path.join(dotMainDir, 'index.js');\\n        t.equal(require.resolve('dot_main'), dotMainMain, 'sanity check: require.resolve finds `dot_main`');\\n\\n        makeTempDir(t, hnl, function (err) {\\n            t.error(err, 'no error with HNL temp dir');\\n            if (err) {\\n                return t.end();\\n            }\\n            var bazHNLDir = path.join(hnl, 'baz');\\n            copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNLDir);\\n\\n            var dotSlashMainDir = path.join(hnl, 'dot_slash_main');\\n            var dotSlashMainMain = path.join(dotSlashMainDir, 'index.js');\\n            var dotSlashMainPkg = { main: 'index' };\\n            copyDir.sync(path.join(__dirname, 'resolver/dot_slash_main'), dotSlashMainDir);\\n\\n            t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');\\n            t.equal(require.resolve('dot_slash_main'), dotSlashMainMain, 'sanity check: require.resolve finds HNL `dot_slash_main`');\\n\\n            t.test('with temp dirs', function (st) {\\n                st.plan(3);\\n\\n                st.test('just in `$HOME/.node_modules`', function (s2t) {\\n                    s2t.plan(3);\\n\\n                    resolve('dot_main', function (err, res, pkg) {\\n                        s2t.error(err, 'no error resolving `dot_main`');\\n                        s2t.equal(res, dotMainMain, '`dot_main` resolves in `$HOME/.node_modules`');\\n                        s2t.deepEqual(pkg, dotMainPkg);\\n                    });\\n                });\\n\\n                st.test('just in `$HOME/.node_libraries`', function (s2t) {\\n                    s2t.plan(3);\\n\\n                    resolve('dot_slash_main', function (err, res, pkg) {\\n                        s2t.error(err, 'no error resolving `dot_slash_main`');\\n                        s2t.equal(res, dotSlashMainMain, '`dot_slash_main` resolves in `$HOME/.node_libraries`');\\n                        s2t.deepEqual(pkg, dotSlashMainPkg);\\n                    });\\n                });\\n\\n                st.test('in `$HOME/.node_libraries` and `$HOME/.node_modules`', function (s2t) {\\n                    s2t.plan(3);\\n\\n                    resolve('baz', function (err, res, pkg) {\\n                        s2t.error(err, 'no error resolving `baz`');\\n                        s2t.equal(res, bazHNMmain, '`baz` resolves in `$HOME/.node_modules` when in both');\\n                        s2t.deepEqual(pkg, bazPkg);\\n                    });\\n                });\\n            });\\n        });\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/home_paths.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('moduleDirectory strings', function (t) {\\n    t.plan(4);\\n    var dir = path.join(__dirname, 'module_dir');\\n    var xopts = {\\n        basedir: dir,\\n        moduleDirectory: 'xmodules'\\n    };\\n    resolve('aaa', xopts, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, '/xmodules/aaa/index.js'));\\n    });\\n\\n    var yopts = {\\n        basedir: dir,\\n        moduleDirectory: 'ymodules'\\n    };\\n    resolve('aaa', yopts, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, '/ymodules/aaa/index.js'));\\n    });\\n});\\n\\ntest('moduleDirectory array', function (t) {\\n    t.plan(6);\\n    var dir = path.join(__dirname, 'module_dir');\\n    var aopts = {\\n        basedir: dir,\\n        moduleDirectory: ['xmodules', 'ymodules', 'zmodules']\\n    };\\n    resolve('aaa', aopts, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, '/xmodules/aaa/index.js'));\\n    });\\n\\n    var bopts = {\\n        basedir: dir,\\n        moduleDirectory: ['zmodules', 'ymodules', 'xmodules']\\n    };\\n    resolve('aaa', bopts, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, '/ymodules/aaa/index.js'));\\n    });\\n\\n    var copts = {\\n        basedir: dir,\\n        moduleDirectory: ['xmodules', 'ymodules', 'zmodules']\\n    };\\n    resolve('bbb', copts, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, '/zmodules/bbb/main.js'));\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/module_dir.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('mock', function (t) {\\n    t.plan(4);\\n\\n    var files = {};\\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo/bar')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file) {\\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\\n            },\\n            isDirectory: function (dir) {\\n                return !!dirs[path.resolve(dir)];\\n            },\\n            readFileSync: function (file) {\\n                return files[path.resolve(file)];\\n            },\\n            realpathSync: function (file) {\\n                return file;\\n            }\\n        };\\n    }\\n\\n    t.equal(\\n        resolve.sync('./baz', opts('/foo/bar')),\\n        path.resolve('/foo/bar/baz.js')\\n    );\\n\\n    t.equal(\\n        resolve.sync('./baz.js', opts('/foo/bar')),\\n        path.resolve('/foo/bar/baz.js')\\n    );\\n\\n    t.throws(function () {\\n        resolve.sync('baz', opts('/foo/bar'));\\n    });\\n\\n    t.throws(function () {\\n        resolve.sync('../baz', opts('/foo/bar'));\\n    });\\n});\\n\\ntest('mock package', function (t) {\\n    t.plan(1);\\n\\n    var files = {};\\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';\\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\\n        main: './baz.js'\\n    });\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo')] = true;\\n    dirs[path.resolve('/foo/node_modules')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file) {\\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\\n            },\\n            isDirectory: function (dir) {\\n                return !!dirs[path.resolve(dir)];\\n            },\\n            readFileSync: function (file) {\\n                return files[path.resolve(file)];\\n            },\\n            realpathSync: function (file) {\\n                return file;\\n            }\\n        };\\n    }\\n\\n    t.equal(\\n        resolve.sync('bar', opts('/foo')),\\n        path.resolve('/foo/node_modules/bar/baz.js')\\n    );\\n});\\n\\ntest('symlinked', function (t) {\\n    t.plan(2);\\n\\n    var files = {};\\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\\n    files[path.resolve('/foo/bar/symlinked/baz.js')] = 'beep';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo/bar')] = true;\\n    dirs[path.resolve('/foo/bar/symlinked')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            preserveSymlinks: false,\\n            basedir: path.resolve(basedir),\\n            isFile: function (file) {\\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\\n            },\\n            isDirectory: function (dir) {\\n                return !!dirs[path.resolve(dir)];\\n            },\\n            readFileSync: function (file) {\\n                return files[path.resolve(file)];\\n            },\\n            realpathSync: function (file) {\\n                var resolved = path.resolve(file);\\n\\n                if (resolved.indexOf('symlinked') >= 0) {\\n                    return resolved;\\n                }\\n\\n                var ext = path.extname(resolved);\\n\\n                if (ext) {\\n                    var dir = path.dirname(resolved);\\n                    var base = path.basename(resolved);\\n                    return path.join(dir, 'symlinked', base);\\n                }\\n                return path.join(resolved, 'symlinked');\\n            }\\n        };\\n    }\\n\\n    t.equal(\\n        resolve.sync('./baz', opts('/foo/bar')),\\n        path.resolve('/foo/bar/symlinked/baz.js')\\n    );\\n\\n    t.equal(\\n        resolve.sync('./baz.js', opts('/foo/bar')),\\n        path.resolve('/foo/bar/symlinked/baz.js')\\n    );\\n});\\n\\ntest('readPackageSync', function (t) {\\n    t.plan(3);\\n\\n    var files = {};\\n    files[path.resolve('/foo/node_modules/bar/something-else.js')] = 'beep';\\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\\n        main: './baz.js'\\n    });\\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'boop';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo')] = true;\\n    dirs[path.resolve('/foo/node_modules')] = true;\\n\\n    function opts(basedir, useReadPackage) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file) {\\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\\n            },\\n            isDirectory: function (dir) {\\n                return !!dirs[path.resolve(dir)];\\n            },\\n            readFileSync: useReadPackage ? null : function (file) {\\n                return files[path.resolve(file)];\\n            },\\n            realpathSync: function (file) {\\n                return file;\\n            }\\n        };\\n    }\\n    t.test('with readFile', function (st) {\\n        st.plan(1);\\n\\n        st.equal(\\n            resolve.sync('bar', opts('/foo')),\\n            path.resolve('/foo/node_modules/bar/baz.js')\\n        );\\n    });\\n\\n    var readPackageSync = function (readFileSync, file) {\\n        if (file.indexOf(path.join('bar', 'package.json')) >= 0) {\\n            return { main: './something-else.js' };\\n        }\\n        return JSON.parse(files[path.resolve(file)]);\\n    };\\n\\n    t.test('with readPackage', function (st) {\\n        st.plan(1);\\n\\n        var options = opts('/foo');\\n        delete options.readFileSync;\\n        options.readPackageSync = readPackageSync;\\n\\n        st.equal(\\n            resolve.sync('bar', options),\\n            path.resolve('/foo/node_modules/bar/something-else.js')\\n        );\\n    });\\n\\n    t.test('with readFile and readPackage', function (st) {\\n        st.plan(1);\\n\\n        var options = opts('/foo');\\n        options.readPackageSync = readPackageSync;\\n        st.throws(\\n            function () { resolve.sync('bar', options); },\\n            TypeError,\\n            'errors when both readFile and readPackage are provided'\\n        );\\n    });\\n});\\n\\n\",\"filename\":\"/node_modules/resolve/test/mock_sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('mock', function (t) {\\n    t.plan(8);\\n\\n    var files = {};\\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo/bar')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file, cb) {\\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\\n            },\\n            isDirectory: function (dir, cb) {\\n                cb(null, !!dirs[path.resolve(dir)]);\\n            },\\n            readFile: function (file, cb) {\\n                cb(null, files[path.resolve(file)]);\\n            },\\n            realpath: function (file, cb) {\\n                cb(null, file);\\n            }\\n        };\\n    }\\n\\n    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('baz', opts('/foo/bar'), function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module 'baz' from '\\\" + path.resolve('/foo/bar') + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n\\n    resolve('../baz', opts('/foo/bar'), function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module '../baz' from '\\\" + path.resolve('/foo/bar') + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n});\\n\\ntest('mock from package', function (t) {\\n    t.plan(8);\\n\\n    var files = {};\\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo/bar')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file, cb) {\\n                cb(null, Object.prototype.hasOwnProperty.call(files, file));\\n            },\\n            isDirectory: function (dir, cb) {\\n                cb(null, !!dirs[path.resolve(dir)]);\\n            },\\n            'package': { main: 'bar' },\\n            readFile: function (file, cb) {\\n                cb(null, files[file]);\\n            },\\n            realpath: function (file, cb) {\\n                cb(null, file);\\n            }\\n        };\\n    }\\n\\n    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\\n        t.equal(pkg && pkg.main, 'bar');\\n    });\\n\\n    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\\n        t.equal(pkg && pkg.main, 'bar');\\n    });\\n\\n    resolve('baz', opts('/foo/bar'), function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module 'baz' from '\\\" + path.resolve('/foo/bar') + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n\\n    resolve('../baz', opts('/foo/bar'), function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module '../baz' from '\\\" + path.resolve('/foo/bar') + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n});\\n\\ntest('mock package', function (t) {\\n    t.plan(2);\\n\\n    var files = {};\\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';\\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\\n        main: './baz.js'\\n    });\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo')] = true;\\n    dirs[path.resolve('/foo/node_modules')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file, cb) {\\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\\n            },\\n            isDirectory: function (dir, cb) {\\n                cb(null, !!dirs[path.resolve(dir)]);\\n            },\\n            readFile: function (file, cb) {\\n                cb(null, files[path.resolve(file)]);\\n            },\\n            realpath: function (file, cb) {\\n                cb(null, file);\\n            }\\n        };\\n    }\\n\\n    resolve('bar', opts('/foo'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));\\n        t.equal(pkg && pkg.main, './baz.js');\\n    });\\n});\\n\\ntest('mock package from package', function (t) {\\n    t.plan(2);\\n\\n    var files = {};\\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';\\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\\n        main: './baz.js'\\n    });\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo')] = true;\\n    dirs[path.resolve('/foo/node_modules')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file, cb) {\\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\\n            },\\n            isDirectory: function (dir, cb) {\\n                cb(null, !!dirs[path.resolve(dir)]);\\n            },\\n            'package': { main: 'bar' },\\n            readFile: function (file, cb) {\\n                cb(null, files[path.resolve(file)]);\\n            },\\n            realpath: function (file, cb) {\\n                cb(null, file);\\n            }\\n        };\\n    }\\n\\n    resolve('bar', opts('/foo'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));\\n        t.equal(pkg && pkg.main, './baz.js');\\n    });\\n});\\n\\ntest('symlinked', function (t) {\\n    t.plan(4);\\n\\n    var files = {};\\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\\n    files[path.resolve('/foo/bar/symlinked/baz.js')] = 'beep';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo/bar')] = true;\\n    dirs[path.resolve('/foo/bar/symlinked')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            preserveSymlinks: false,\\n            basedir: path.resolve(basedir),\\n            isFile: function (file, cb) {\\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\\n            },\\n            isDirectory: function (dir, cb) {\\n                cb(null, !!dirs[path.resolve(dir)]);\\n            },\\n            readFile: function (file, cb) {\\n                cb(null, files[path.resolve(file)]);\\n            },\\n            realpath: function (file, cb) {\\n                var resolved = path.resolve(file);\\n\\n                if (resolved.indexOf('symlinked') >= 0) {\\n                    cb(null, resolved);\\n                    return;\\n                }\\n\\n                var ext = path.extname(resolved);\\n\\n                if (ext) {\\n                    var dir = path.dirname(resolved);\\n                    var base = path.basename(resolved);\\n                    cb(null, path.join(dir, 'symlinked', base));\\n                } else {\\n                    cb(null, path.join(resolved, 'symlinked'));\\n                }\\n            }\\n        };\\n    }\\n\\n    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/bar/symlinked/baz.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {\\n        if (err) return t.fail(err);\\n        t.equal(res, path.resolve('/foo/bar/symlinked/baz.js'));\\n        t.equal(pkg, undefined);\\n    });\\n});\\n\\ntest('readPackage', function (t) {\\n    t.plan(3);\\n\\n    var files = {};\\n    files[path.resolve('/foo/node_modules/bar/something-else.js')] = 'beep';\\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\\n        main: './baz.js'\\n    });\\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'boop';\\n\\n    var dirs = {};\\n    dirs[path.resolve('/foo')] = true;\\n    dirs[path.resolve('/foo/node_modules')] = true;\\n\\n    function opts(basedir) {\\n        return {\\n            basedir: path.resolve(basedir),\\n            isFile: function (file, cb) {\\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\\n            },\\n            isDirectory: function (dir, cb) {\\n                cb(null, !!dirs[path.resolve(dir)]);\\n            },\\n            'package': { main: 'bar' },\\n            readFile: function (file, cb) {\\n                cb(null, files[path.resolve(file)]);\\n            },\\n            realpath: function (file, cb) {\\n                cb(null, file);\\n            }\\n        };\\n    }\\n\\n    t.test('with readFile', function (st) {\\n        st.plan(3);\\n\\n        resolve('bar', opts('/foo'), function (err, res, pkg) {\\n            st.error(err);\\n            st.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));\\n            st.equal(pkg && pkg.main, './baz.js');\\n        });\\n    });\\n\\n    var readPackage = function (readFile, file, cb) {\\n        var barPackage = path.join('bar', 'package.json');\\n        if (file.slice(-barPackage.length) === barPackage) {\\n            cb(null, { main: './something-else.js' });\\n        } else {\\n            cb(null, JSON.parse(files[path.resolve(file)]));\\n        }\\n    };\\n\\n    t.test('with readPackage', function (st) {\\n        st.plan(3);\\n\\n        var options = opts('/foo');\\n        delete options.readFile;\\n        options.readPackage = readPackage;\\n        resolve('bar', options, function (err, res, pkg) {\\n            st.error(err);\\n            st.equal(res, path.resolve('/foo/node_modules/bar/something-else.js'));\\n            st.equal(pkg && pkg.main, './something-else.js');\\n        });\\n    });\\n\\n    t.test('with readFile and readPackage', function (st) {\\n        st.plan(1);\\n\\n        var options = opts('/foo');\\n        options.readPackage = readPackage;\\n        resolve('bar', options, function (err) {\\n            st.throws(function () { throw err; }, TypeError, 'errors when both readFile and readPackage are provided');\\n        });\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/mock.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var test = require('tape');\\nvar path = require('path');\\nvar parse = path.parse || require('path-parse');\\nvar keys = require('object-keys');\\n\\nvar nodeModulesPaths = require('../lib/node-modules-paths');\\n\\nvar verifyDirs = function verifyDirs(t, start, dirs, moduleDirectories, paths) {\\n    var moduleDirs = [].concat(moduleDirectories || 'node_modules');\\n    if (paths) {\\n        for (var k = 0; k < paths.length; ++k) {\\n            moduleDirs.push(path.basename(paths[k]));\\n        }\\n    }\\n\\n    var foundModuleDirs = {};\\n    var uniqueDirs = {};\\n    var parsedDirs = {};\\n    for (var i = 0; i < dirs.length; ++i) {\\n        var parsed = parse(dirs[i]);\\n        if (!foundModuleDirs[parsed.base]) { foundModuleDirs[parsed.base] = 0; }\\n        foundModuleDirs[parsed.base] += 1;\\n        parsedDirs[parsed.dir] = true;\\n        uniqueDirs[dirs[i]] = true;\\n    }\\n    t.equal(keys(parsedDirs).length >= start.split(path.sep).length, true, 'there are >= dirs than \\\"start\\\" has');\\n    var foundModuleDirNames = keys(foundModuleDirs);\\n    t.deepEqual(foundModuleDirNames, moduleDirs, 'all desired module dirs were found');\\n    t.equal(keys(uniqueDirs).length, dirs.length, 'all dirs provided were unique');\\n\\n    var counts = {};\\n    for (var j = 0; j < foundModuleDirNames.length; ++j) {\\n        counts[foundModuleDirs[j]] = true;\\n    }\\n    t.equal(keys(counts).length, 1, 'all found module directories had the same count');\\n};\\n\\ntest('node-modules-paths', function (t) {\\n    t.test('no options', function (t) {\\n        var start = path.join(__dirname, 'resolver');\\n        var dirs = nodeModulesPaths(start);\\n\\n        verifyDirs(t, start, dirs);\\n\\n        t.end();\\n    });\\n\\n    t.test('empty options', function (t) {\\n        var start = path.join(__dirname, 'resolver');\\n        var dirs = nodeModulesPaths(start, {});\\n\\n        verifyDirs(t, start, dirs);\\n\\n        t.end();\\n    });\\n\\n    t.test('with paths=array option', function (t) {\\n        var start = path.join(__dirname, 'resolver');\\n        var paths = ['a', 'b'];\\n        var dirs = nodeModulesPaths(start, { paths: paths });\\n\\n        verifyDirs(t, start, dirs, null, paths);\\n\\n        t.end();\\n    });\\n\\n    t.test('with paths=function option', function (t) {\\n        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\\n            return getNodeModulesDirs().concat(path.join(absoluteStart, 'not node modules', request));\\n        };\\n\\n        var start = path.join(__dirname, 'resolver');\\n        var dirs = nodeModulesPaths(start, { paths: paths }, 'pkg');\\n\\n        verifyDirs(t, start, dirs, null, [path.join(start, 'not node modules', 'pkg')]);\\n\\n        t.end();\\n    });\\n\\n    t.test('with paths=function skipping node modules resolution', function (t) {\\n        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\\n            return [];\\n        };\\n        var start = path.join(__dirname, 'resolver');\\n        var dirs = nodeModulesPaths(start, { paths: paths });\\n        t.deepEqual(dirs, [], 'no node_modules was computed');\\n        t.end();\\n    });\\n\\n    t.test('with moduleDirectory option', function (t) {\\n        var start = path.join(__dirname, 'resolver');\\n        var moduleDirectory = 'not node modules';\\n        var dirs = nodeModulesPaths(start, { moduleDirectory: moduleDirectory });\\n\\n        verifyDirs(t, start, dirs, moduleDirectory);\\n\\n        t.end();\\n    });\\n\\n    t.test('with 1 moduleDirectory and paths options', function (t) {\\n        var start = path.join(__dirname, 'resolver');\\n        var paths = ['a', 'b'];\\n        var moduleDirectory = 'not node modules';\\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectory });\\n\\n        verifyDirs(t, start, dirs, moduleDirectory, paths);\\n\\n        t.end();\\n    });\\n\\n    t.test('with 1+ moduleDirectory and paths options', function (t) {\\n        var start = path.join(__dirname, 'resolver');\\n        var paths = ['a', 'b'];\\n        var moduleDirectories = ['not node modules', 'other modules'];\\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\\n\\n        verifyDirs(t, start, dirs, moduleDirectories, paths);\\n\\n        t.end();\\n    });\\n\\n    t.test('combine paths correctly on Windows', function (t) {\\n        var start = 'C:\\\\\\\\Users\\\\\\\\username\\\\\\\\myProject\\\\\\\\src';\\n        var paths = [];\\n        var moduleDirectories = ['node_modules', start];\\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\\n\\n        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\\n\\n        t.end();\\n    });\\n\\n    t.test('combine paths correctly on non-Windows', { skip: process.platform === 'win32' }, function (t) {\\n        var start = '/Users/username/git/myProject/src';\\n        var paths = [];\\n        var moduleDirectories = ['node_modules', '/Users/username/git/myProject/src'];\\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\\n\\n        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\\n\\n        t.end();\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/node-modules-paths.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\nvar resolverDir = path.join(__dirname, '/pathfilter/deep_ref');\\n\\nvar pathFilterFactory = function (t) {\\n    return function (pkg, x, remainder) {\\n        t.equal(pkg.version, '1.2.3');\\n        t.equal(x, path.join(resolverDir, 'node_modules/deep/ref'));\\n        t.equal(remainder, 'ref');\\n        return 'alt';\\n    };\\n};\\n\\ntest('#62: deep module references and the pathFilter', function (t) {\\n    t.test('deep/ref.js', function (st) {\\n        st.plan(3);\\n\\n        resolve('deep/ref', { basedir: resolverDir }, function (err, res, pkg) {\\n            if (err) st.fail(err);\\n\\n            st.equal(pkg.version, '1.2.3');\\n            st.equal(res, path.join(resolverDir, 'node_modules/deep/ref.js'));\\n        });\\n\\n        var res = resolve.sync('deep/ref', { basedir: resolverDir });\\n        st.equal(res, path.join(resolverDir, 'node_modules/deep/ref.js'));\\n    });\\n\\n    t.test('deep/deeper/ref', function (st) {\\n        st.plan(4);\\n\\n        resolve(\\n            'deep/deeper/ref',\\n            { basedir: resolverDir },\\n            function (err, res, pkg) {\\n                if (err) t.fail(err);\\n                st.notEqual(pkg, undefined);\\n                st.equal(pkg.version, '1.2.3');\\n                st.equal(res, path.join(resolverDir, 'node_modules/deep/deeper/ref.js'));\\n            }\\n        );\\n\\n        var res = resolve.sync(\\n            'deep/deeper/ref',\\n            { basedir: resolverDir }\\n        );\\n        st.equal(res, path.join(resolverDir, 'node_modules/deep/deeper/ref.js'));\\n    });\\n\\n    t.test('deep/ref alt', function (st) {\\n        st.plan(8);\\n\\n        var pathFilter = pathFilterFactory(st);\\n\\n        var res = resolve.sync(\\n            'deep/ref',\\n            { basedir: resolverDir, pathFilter: pathFilter }\\n        );\\n        st.equal(res, path.join(resolverDir, 'node_modules/deep/alt.js'));\\n\\n        resolve(\\n            'deep/ref',\\n            { basedir: resolverDir, pathFilter: pathFilter },\\n            function (err, res, pkg) {\\n                if (err) st.fail(err);\\n                st.equal(res, path.join(resolverDir, 'node_modules/deep/alt.js'));\\n                st.end();\\n            }\\n        );\\n    });\\n\\n    t.end();\\n});\\n\",\"filename\":\"/node_modules/resolve/test/pathfilter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var test = require('tape');\\nvar resolve = require('../');\\n\\ntest('nonstring', function (t) {\\n    t.plan(1);\\n    resolve(555, function (err, res, pkg) {\\n        t.ok(err);\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/nonstring.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var fs = require('fs');\\nvar path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('$NODE_PATH', function (t) {\\n    t.plan(8);\\n\\n    var isDir = function (dir, cb) {\\n        if (dir === '/node_path' || dir === 'node_path/x') {\\n            return cb(null, true);\\n        }\\n        fs.stat(dir, function (err, stat) {\\n            if (!err) {\\n                return cb(null, stat.isDirectory());\\n            }\\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\\n            return cb(err);\\n        });\\n    };\\n\\n    resolve('aaa', {\\n        paths: [\\n            path.join(__dirname, '/node_path/x'),\\n            path.join(__dirname, '/node_path/y')\\n        ],\\n        basedir: __dirname,\\n        isDirectory: isDir\\n    }, function (err, res) {\\n        t.error(err);\\n        t.equal(res, path.join(__dirname, '/node_path/x/aaa/index.js'), 'aaa resolves');\\n    });\\n\\n    resolve('bbb', {\\n        paths: [\\n            path.join(__dirname, '/node_path/x'),\\n            path.join(__dirname, '/node_path/y')\\n        ],\\n        basedir: __dirname,\\n        isDirectory: isDir\\n    }, function (err, res) {\\n        t.error(err);\\n        t.equal(res, path.join(__dirname, '/node_path/y/bbb/index.js'), 'bbb resolves');\\n    });\\n\\n    resolve('ccc', {\\n        paths: [\\n            path.join(__dirname, '/node_path/x'),\\n            path.join(__dirname, '/node_path/y')\\n        ],\\n        basedir: __dirname,\\n        isDirectory: isDir\\n    }, function (err, res) {\\n        t.error(err);\\n        t.equal(res, path.join(__dirname, '/node_path/x/ccc/index.js'), 'ccc resolves');\\n    });\\n\\n    // ensure that relative paths still resolve against the regular `node_modules` correctly\\n    resolve('tap', {\\n        paths: [\\n            'node_path'\\n        ],\\n        basedir: path.join(__dirname, 'node_path/x'),\\n        isDirectory: isDir\\n    }, function (err, res) {\\n        var root = require('tap/package.json').main; // eslint-disable-line global-require\\n        t.error(err);\\n        t.equal(res, path.resolve(__dirname, '..', 'node_modules/tap', root), 'tap resolves');\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/node_path.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\n\\ntest('precedence', function (t) {\\n    t.plan(3);\\n    var dir = path.join(__dirname, 'precedence/aaa');\\n\\n    resolve('./', { basedir: dir }, function (err, res, pkg) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, 'index.js'));\\n        t.equal(pkg.name, 'resolve');\\n    });\\n});\\n\\ntest('./ should not load ${dir}.js', function (t) { // eslint-disable-line no-template-curly-in-string\\n    t.plan(1);\\n    var dir = path.join(__dirname, 'precedence/bbb');\\n\\n    resolve('./', { basedir: dir }, function (err, res, pkg) {\\n        t.ok(err);\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/precedence.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar test = require('tape');\\nvar resolve = require('../');\\nvar async = require('../async');\\n\\ntest('`./async` entry point', function (t) {\\n    t.equal(resolve, async, '`./async` entry point is the same as `main`');\\n    t.end();\\n});\\n\\ntest('async foo', function (t) {\\n    t.plan(12);\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('./foo', { basedir: dir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'foo.js'));\\n        t.equal(pkg && pkg.name, 'resolve');\\n    });\\n\\n    resolve('./foo.js', { basedir: dir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'foo.js'));\\n        t.equal(pkg && pkg.name, 'resolve');\\n    });\\n\\n    resolve('./foo', { basedir: dir, 'package': { main: 'resolver' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'foo.js'));\\n        t.equal(pkg && pkg.main, 'resolver');\\n    });\\n\\n    resolve('./foo.js', { basedir: dir, 'package': { main: 'resolver' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'foo.js'));\\n        t.equal(pkg.main, 'resolver');\\n    });\\n\\n    resolve('./foo', { basedir: dir, filename: path.join(dir, 'baz.js') }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'foo.js'));\\n    });\\n\\n    resolve('foo', { basedir: dir }, function (err) {\\n        t.equal(err.message, \\\"Cannot find module 'foo' from '\\\" + path.resolve(dir) + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n\\n    // Test that filename is reported as the \\\"from\\\" value when passed.\\n    resolve('foo', { basedir: dir, filename: path.join(dir, 'baz.js') }, function (err) {\\n        t.equal(err.message, \\\"Cannot find module 'foo' from '\\\" + path.join(dir, 'baz.js') + \\\"'\\\");\\n    });\\n});\\n\\ntest('bar', function (t) {\\n    t.plan(6);\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('foo', { basedir: dir + '/bar' }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'bar/node_modules/foo/index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('foo', { basedir: dir + '/bar' }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'bar/node_modules/foo/index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('foo', { basedir: dir + '/bar', 'package': { main: 'bar' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'bar/node_modules/foo/index.js'));\\n        t.equal(pkg.main, 'bar');\\n    });\\n});\\n\\ntest('baz', function (t) {\\n    t.plan(4);\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('./baz', { basedir: dir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'baz/quux.js'));\\n        t.equal(pkg.main, 'quux.js');\\n    });\\n\\n    resolve('./baz', { basedir: dir, 'package': { main: 'resolver' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'baz/quux.js'));\\n        t.equal(pkg.main, 'quux.js');\\n    });\\n});\\n\\ntest('biz', function (t) {\\n    t.plan(24);\\n    var dir = path.join(__dirname, 'resolver/biz/node_modules');\\n\\n    resolve('./grux', { basedir: dir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'grux/index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('./grux', { basedir: dir, 'package': { main: 'biz' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'grux/index.js'));\\n        t.equal(pkg.main, 'biz');\\n    });\\n\\n    resolve('./garply', { basedir: dir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'garply/lib/index.js'));\\n        t.equal(pkg.main, './lib');\\n    });\\n\\n    resolve('./garply', { basedir: dir, 'package': { main: 'biz' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'garply/lib/index.js'));\\n        t.equal(pkg.main, './lib');\\n    });\\n\\n    resolve('tiv', { basedir: dir + '/grux' }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'tiv/index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('tiv', { basedir: dir + '/grux', 'package': { main: 'grux' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'tiv/index.js'));\\n        t.equal(pkg.main, 'grux');\\n    });\\n\\n    resolve('tiv', { basedir: dir + '/garply' }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'tiv/index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('tiv', { basedir: dir + '/garply', 'package': { main: './lib' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'tiv/index.js'));\\n        t.equal(pkg.main, './lib');\\n    });\\n\\n    resolve('grux', { basedir: dir + '/tiv' }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'grux/index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n\\n    resolve('grux', { basedir: dir + '/tiv', 'package': { main: 'tiv' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'grux/index.js'));\\n        t.equal(pkg.main, 'tiv');\\n    });\\n\\n    resolve('garply', { basedir: dir + '/tiv' }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'garply/lib/index.js'));\\n        t.equal(pkg.main, './lib');\\n    });\\n\\n    resolve('garply', { basedir: dir + '/tiv', 'package': { main: 'tiv' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'garply/lib/index.js'));\\n        t.equal(pkg.main, './lib');\\n    });\\n});\\n\\ntest('quux', function (t) {\\n    t.plan(2);\\n    var dir = path.join(__dirname, 'resolver/quux');\\n\\n    resolve('./foo', { basedir: dir, 'package': { main: 'quux' } }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'foo/index.js'));\\n        t.equal(pkg.main, 'quux');\\n    });\\n});\\n\\ntest('normalize', function (t) {\\n    t.plan(2);\\n    var dir = path.join(__dirname, 'resolver/biz/node_modules/grux');\\n\\n    resolve('../grux', { basedir: dir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'index.js'));\\n        t.equal(pkg, undefined);\\n    });\\n});\\n\\ntest('cup', function (t) {\\n    t.plan(5);\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('./cup', { basedir: dir, extensions: ['.js', '.coffee'] }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'cup.coffee'));\\n    });\\n\\n    resolve('./cup.coffee', { basedir: dir }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'cup.coffee'));\\n    });\\n\\n    resolve('./cup', { basedir: dir, extensions: ['.js'] }, function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module './cup' from '\\\" + path.resolve(dir) + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n\\n    // Test that filename is reported as the \\\"from\\\" value when passed.\\n    resolve('./cup', { basedir: dir, extensions: ['.js'], filename: path.join(dir, 'cupboard.js') }, function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module './cup' from '\\\" + path.join(dir, 'cupboard.js') + \\\"'\\\");\\n    });\\n});\\n\\ntest('mug', function (t) {\\n    t.plan(3);\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('./mug', { basedir: dir }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'mug.js'));\\n    });\\n\\n    resolve('./mug', { basedir: dir, extensions: ['.coffee', '.js'] }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, '/mug.coffee'));\\n    });\\n\\n    resolve('./mug', { basedir: dir, extensions: ['.js', '.coffee'] }, function (err, res) {\\n        t.equal(res, path.join(dir, '/mug.js'));\\n    });\\n});\\n\\ntest('other path', function (t) {\\n    t.plan(6);\\n    var resolverDir = path.join(__dirname, 'resolver');\\n    var dir = path.join(resolverDir, 'bar');\\n    var otherDir = path.join(resolverDir, 'other_path');\\n\\n    resolve('root', { basedir: dir, paths: [otherDir] }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(resolverDir, 'other_path/root.js'));\\n    });\\n\\n    resolve('lib/other-lib', { basedir: dir, paths: [otherDir] }, function (err, res) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(resolverDir, 'other_path/lib/other-lib.js'));\\n    });\\n\\n    resolve('root', { basedir: dir }, function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module 'root' from '\\\" + path.resolve(dir) + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n\\n    resolve('zzz', { basedir: dir, paths: [otherDir] }, function (err, res) {\\n        t.equal(err.message, \\\"Cannot find module 'zzz' from '\\\" + path.resolve(dir) + \\\"'\\\");\\n        t.equal(err.code, 'MODULE_NOT_FOUND');\\n    });\\n});\\n\\ntest('path iterator', function (t) {\\n    t.plan(2);\\n\\n    var resolverDir = path.join(__dirname, 'resolver');\\n\\n    var exactIterator = function (x, start, getPackageCandidates, opts) {\\n        return [path.join(resolverDir, x)];\\n    };\\n\\n    resolve('baz', { packageIterator: exactIterator }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(resolverDir, 'baz/quux.js'));\\n        t.equal(pkg && pkg.name, 'baz');\\n    });\\n});\\n\\ntest('incorrect main', function (t) {\\n    t.plan(1);\\n\\n    var resolverDir = path.join(__dirname, 'resolver');\\n    var dir = path.join(resolverDir, 'incorrect_main');\\n\\n    resolve('./incorrect_main', { basedir: resolverDir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'index.js'));\\n    });\\n});\\n\\ntest('missing index', function (t) {\\n    t.plan(2);\\n\\n    var resolverDir = path.join(__dirname, 'resolver');\\n    resolve('./missing_index', { basedir: resolverDir }, function (err, res, pkg) {\\n        t.ok(err instanceof Error);\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n    });\\n});\\n\\ntest('missing main', function (t) {\\n    t.plan(1);\\n\\n    var resolverDir = path.join(__dirname, 'resolver');\\n\\n    resolve('./missing_main', { basedir: resolverDir }, function (err, res, pkg) {\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n    });\\n});\\n\\ntest('null main', function (t) {\\n    t.plan(1);\\n\\n    var resolverDir = path.join(__dirname, 'resolver');\\n\\n    resolve('./null_main', { basedir: resolverDir }, function (err, res, pkg) {\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n    });\\n});\\n\\ntest('main: false', function (t) {\\n    t.plan(2);\\n\\n    var basedir = path.join(__dirname, 'resolver');\\n    var dir = path.join(basedir, 'false_main');\\n    resolve('./false_main', { basedir: basedir }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(\\n            res,\\n            path.join(dir, 'index.js'),\\n            '`\\\"main\\\": false`: resolves to `index.js`'\\n        );\\n        t.deepEqual(pkg, {\\n            name: 'false_main',\\n            main: false\\n        });\\n    });\\n});\\n\\ntest('without basedir', function (t) {\\n    t.plan(1);\\n\\n    var dir = path.join(__dirname, 'resolver/without_basedir');\\n    var tester = require(path.join(dir, 'main.js')); // eslint-disable-line global-require\\n\\n    tester(t, function (err, res, pkg) {\\n        if (err) {\\n            t.fail(err);\\n        } else {\\n            t.equal(res, path.join(dir, 'node_modules/mymodule.js'));\\n        }\\n    });\\n});\\n\\ntest('#52 - incorrectly resolves module-paths like \\\"./someFolder/\\\" when there is a file of the same name', function (t) {\\n    t.plan(2);\\n\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('./foo', { basedir: path.join(dir, 'same_names') }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'same_names/foo.js'));\\n    });\\n\\n    resolve('./foo/', { basedir: path.join(dir, 'same_names') }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'same_names/foo/index.js'));\\n    });\\n});\\n\\ntest('#211 - incorrectly resolves module-paths like \\\".\\\" when from inside a folder with a sibling file of the same name', function (t) {\\n    t.plan(2);\\n\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    resolve('./', { basedir: path.join(dir, 'same_names/foo') }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'same_names/foo/index.js'));\\n    });\\n\\n    resolve('.', { basedir: path.join(dir, 'same_names/foo') }, function (err, res, pkg) {\\n        if (err) t.fail(err);\\n        t.equal(res, path.join(dir, 'same_names/foo/index.js'));\\n    });\\n});\\n\\ntest('async: #121 - treating an existing file as a dir when no basedir', function (t) {\\n    var testFile = path.basename(__filename);\\n\\n    t.test('sanity check', function (st) {\\n        st.plan(1);\\n        resolve('./' + testFile, function (err, res, pkg) {\\n            if (err) t.fail(err);\\n            st.equal(res, __filename, 'sanity check');\\n        });\\n    });\\n\\n    t.test('with a fake directory', function (st) {\\n        st.plan(4);\\n\\n        resolve('./' + testFile + '/blah', function (err, res, pkg) {\\n            st.ok(err, 'there is an error');\\n            st.notOk(res, 'no result');\\n\\n            st.equal(err && err.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');\\n            st.equal(\\n                err && err.message,\\n                'Cannot find module \\\\'./' + testFile + '/blah\\\\' from \\\\'' + __dirname + '\\\\'',\\n                'can not find nonexistent module'\\n            );\\n            st.end();\\n        });\\n    });\\n\\n    t.end();\\n});\\n\\ntest('async dot main', function (t) {\\n    var start = new Date();\\n    t.plan(3);\\n    resolve('./resolver/dot_main', function (err, ret) {\\n        t.notOk(err);\\n        t.equal(ret, path.join(__dirname, 'resolver/dot_main/index.js'));\\n        t.ok(new Date() - start < 50, 'resolve.sync timedout');\\n        t.end();\\n    });\\n});\\n\\ntest('async dot slash main', function (t) {\\n    var start = new Date();\\n    t.plan(3);\\n    resolve('./resolver/dot_slash_main', function (err, ret) {\\n        t.notOk(err);\\n        t.equal(ret, path.join(__dirname, 'resolver/dot_slash_main/index.js'));\\n        t.ok(new Date() - start < 50, 'resolve.sync timedout');\\n        t.end();\\n    });\\n});\\n\\ntest('not a directory', function (t) {\\n    t.plan(6);\\n    var path = './foo';\\n    resolve(path, { basedir: __filename }, function (err, res, pkg) {\\n        t.ok(err, 'a non-directory errors');\\n        t.equal(arguments.length, 1);\\n        t.equal(res, undefined);\\n        t.equal(pkg, undefined);\\n\\n        t.equal(err && err.message, 'Cannot find module \\\\'' + path + '\\\\' from \\\\'' + __filename + '\\\\'');\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND');\\n    });\\n});\\n\\ntest('non-string \\\"main\\\" field in package.json', function (t) {\\n    t.plan(5);\\n\\n    var dir = path.join(__dirname, 'resolver');\\n    resolve('./invalid_main', { basedir: dir }, function (err, res, pkg) {\\n        t.ok(err, 'errors on non-string main');\\n        t.equal(err.message, 'package “invalid_main” `main` must be a string');\\n        t.equal(err.code, 'INVALID_PACKAGE_MAIN');\\n        t.equal(res, undefined, 'res is undefined');\\n        t.equal(pkg, undefined, 'pkg is undefined');\\n    });\\n});\\n\\ntest('non-string \\\"main\\\" field in package.json', function (t) {\\n    t.plan(5);\\n\\n    var dir = path.join(__dirname, 'resolver');\\n    resolve('./invalid_main', { basedir: dir }, function (err, res, pkg) {\\n        t.ok(err, 'errors on non-string main');\\n        t.equal(err.message, 'package “invalid_main” `main` must be a string');\\n        t.equal(err.code, 'INVALID_PACKAGE_MAIN');\\n        t.equal(res, undefined, 'res is undefined');\\n        t.equal(pkg, undefined, 'pkg is undefined');\\n    });\\n});\\n\\ntest('browser field in package.json', function (t) {\\n    t.plan(3);\\n\\n    var dir = path.join(__dirname, 'resolver');\\n    resolve(\\n        './browser_field',\\n        {\\n            basedir: dir,\\n            packageFilter: function packageFilter(pkg) {\\n                if (pkg.browser) {\\n                    pkg.main = pkg.browser; // eslint-disable-line no-param-reassign\\n                    delete pkg.browser; // eslint-disable-line no-param-reassign\\n                }\\n                return pkg;\\n            }\\n        },\\n        function (err, res, pkg) {\\n            if (err) t.fail(err);\\n            t.equal(res, path.join(dir, 'browser_field', 'b.js'));\\n            t.equal(pkg && pkg.main, 'b');\\n            t.equal(pkg && pkg.browser, undefined);\\n        }\\n    );\\n});\\n\\ntest('absolute paths', function (t) {\\n    t.plan(4);\\n\\n    var extensionless = __filename.slice(0, -path.extname(__filename).length);\\n\\n    resolve(__filename, function (err, res) {\\n        t.equal(\\n            res,\\n            __filename,\\n            'absolute path to this file resolves'\\n        );\\n    });\\n    resolve(extensionless, function (err, res) {\\n        t.equal(\\n            res,\\n            __filename,\\n            'extensionless absolute path to this file resolves'\\n        );\\n    });\\n    resolve(__filename, { basedir: process.cwd() }, function (err, res) {\\n        t.equal(\\n            res,\\n            __filename,\\n            'absolute path to this file with a basedir resolves'\\n        );\\n    });\\n    resolve(extensionless, { basedir: process.cwd() }, function (err, res) {\\n        t.equal(\\n            res,\\n            __filename,\\n            'extensionless absolute path to this file with a basedir resolves'\\n        );\\n    });\\n});\\n\\ntest('malformed package.json', function (t) {\\n    /* eslint operator-linebreak: [\\\"error\\\", \\\"before\\\"], function-paren-newline: \\\"off\\\" */\\n    t.plan(\\n        (3 * 3) // 3 sets of 3 assertions in the final callback\\n        + 2 // 1 readPackage call with malformed package.json\\n    );\\n\\n    var basedir = path.join(__dirname, 'resolver/malformed_package_json');\\n    var expected = path.join(basedir, 'index.js');\\n\\n    resolve('./index.js', { basedir: basedir }, function (err, res, pkg) {\\n        t.error(err, 'no error');\\n        t.equal(res, expected, 'malformed package.json is silently ignored');\\n        t.equal(pkg, undefined, 'malformed package.json gives an undefined `pkg` argument');\\n    });\\n\\n    resolve(\\n        './index.js',\\n        {\\n            basedir: basedir,\\n            packageFilter: function (pkg, pkgfile, dir) {\\n                t.fail('should not reach here');\\n            }\\n        },\\n        function (err, res, pkg) {\\n            t.error(err, 'with packageFilter: no error');\\n            t.equal(res, expected, 'with packageFilter: malformed package.json is silently ignored');\\n            t.equal(pkg, undefined, 'with packageFilter: malformed package.json gives an undefined `pkg` argument');\\n        }\\n    );\\n\\n    resolve(\\n        './index.js',\\n        {\\n            basedir: basedir,\\n            readPackage: function (readFile, pkgfile, cb) {\\n                t.equal(pkgfile, path.join(basedir, 'package.json'), 'readPackageSync: `pkgfile` is package.json path');\\n                readFile(pkgfile, function (err, result) {\\n                    try {\\n                        cb(null, JSON.parse(result));\\n                    } catch (e) {\\n                        t.ok(e instanceof SyntaxError, 'readPackage: malformed package.json parses as a syntax error');\\n                        cb(null);\\n                    }\\n                });\\n            }\\n        },\\n        function (err, res, pkg) {\\n            t.error(err, 'with readPackage: no error');\\n            t.equal(res, expected, 'with readPackage: malformed package.json is silently ignored');\\n            t.equal(pkg, undefined, 'with readPackage: malformed package.json gives an undefined `pkg` argument');\\n        }\\n    );\\n});\\n\",\"filename\":\"/node_modules/resolve/test/resolver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar fs = require('fs');\\nvar test = require('tape');\\n\\nvar resolve = require('../');\\nvar sync = require('../sync');\\n\\nvar requireResolveSupportsPaths = require.resolve.length > 1\\n    && !(/^v12\\\\.[012]\\\\./).test(process.version); // broken in v12.0-12.2, see https://github.com/nodejs/node/issues/27794\\n\\ntest('`./sync` entry point', function (t) {\\n    t.equal(resolve.sync, sync, '`./sync` entry point is the same as `.sync` on `main`');\\n    t.end();\\n});\\n\\ntest('foo', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    t.equal(\\n        resolve.sync('./foo', { basedir: dir }),\\n        path.join(dir, 'foo.js'),\\n        './foo'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./foo', { basedir: dir }),\\n            require.resolve('./foo', { paths: [dir] }),\\n            './foo: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.equal(\\n        resolve.sync('./foo.js', { basedir: dir }),\\n        path.join(dir, 'foo.js'),\\n        './foo.js'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./foo.js', { basedir: dir }),\\n            require.resolve('./foo.js', { paths: [dir] }),\\n            './foo.js: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.equal(\\n        resolve.sync('./foo.js', { basedir: dir, filename: path.join(dir, 'bar.js') }),\\n        path.join(dir, 'foo.js')\\n    );\\n\\n    t.throws(function () {\\n        resolve.sync('foo', { basedir: dir });\\n    });\\n\\n    // Test that filename is reported as the \\\"from\\\" value when passed.\\n    t.throws(\\n        function () {\\n            resolve.sync('foo', { basedir: dir, filename: path.join(dir, 'bar.js') });\\n        },\\n        {\\n            name: 'Error',\\n            message: \\\"Cannot find module 'foo' from '\\\" + path.join(dir, 'bar.js') + \\\"'\\\"\\n        }\\n    );\\n\\n    t.end();\\n});\\n\\ntest('bar', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    var basedir = path.join(dir, 'bar');\\n\\n    t.equal(\\n        resolve.sync('foo', { basedir: basedir }),\\n        path.join(dir, 'bar/node_modules/foo/index.js'),\\n        'foo in bar'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('foo', { basedir: basedir }),\\n            require.resolve('foo', { paths: [basedir] }),\\n            'foo in bar: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('baz', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    t.equal(\\n        resolve.sync('./baz', { basedir: dir }),\\n        path.join(dir, 'baz/quux.js'),\\n        './baz'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./baz', { basedir: dir }),\\n            require.resolve('./baz', { paths: [dir] }),\\n            './baz: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('biz', function (t) {\\n    var dir = path.join(__dirname, 'resolver/biz/node_modules');\\n\\n    t.equal(\\n        resolve.sync('./grux', { basedir: dir }),\\n        path.join(dir, 'grux/index.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./grux', { basedir: dir }),\\n            require.resolve('./grux', { paths: [dir] }),\\n            './grux: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    var tivDir = path.join(dir, 'grux');\\n    t.equal(\\n        resolve.sync('tiv', { basedir: tivDir }),\\n        path.join(dir, 'tiv/index.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('tiv', { basedir: tivDir }),\\n            require.resolve('tiv', { paths: [tivDir] }),\\n            'tiv: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    var gruxDir = path.join(dir, 'tiv');\\n    t.equal(\\n        resolve.sync('grux', { basedir: gruxDir }),\\n        path.join(dir, 'grux/index.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('grux', { basedir: gruxDir }),\\n            require.resolve('grux', { paths: [gruxDir] }),\\n            'grux: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('normalize', function (t) {\\n    var dir = path.join(__dirname, 'resolver/biz/node_modules/grux');\\n\\n    t.equal(\\n        resolve.sync('../grux', { basedir: dir }),\\n        path.join(dir, 'index.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('../grux', { basedir: dir }),\\n            require.resolve('../grux', { paths: [dir] }),\\n            '../grux: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('cup', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    t.equal(\\n        resolve.sync('./cup', {\\n            basedir: dir,\\n            extensions: ['.js', '.coffee']\\n        }),\\n        path.join(dir, 'cup.coffee'),\\n        './cup -> ./cup.coffee'\\n    );\\n\\n    t.equal(\\n        resolve.sync('./cup.coffee', { basedir: dir }),\\n        path.join(dir, 'cup.coffee'),\\n        './cup.coffee'\\n    );\\n\\n    t.throws(function () {\\n        resolve.sync('./cup', {\\n            basedir: dir,\\n            extensions: ['.js']\\n        });\\n    });\\n\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./cup.coffee', { basedir: dir, extensions: ['.js', '.coffee'] }),\\n            require.resolve('./cup.coffee', { paths: [dir] }),\\n            './cup.coffee: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('mug', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    t.equal(\\n        resolve.sync('./mug', { basedir: dir }),\\n        path.join(dir, 'mug.js'),\\n        './mug -> ./mug.js'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./mug', { basedir: dir }),\\n            require.resolve('./mug', { paths: [dir] }),\\n            './mug: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.equal(\\n        resolve.sync('./mug', {\\n            basedir: dir,\\n            extensions: ['.coffee', '.js']\\n        }),\\n        path.join(dir, 'mug.coffee'),\\n        './mug -> ./mug.coffee'\\n    );\\n\\n    t.equal(\\n        resolve.sync('./mug', {\\n            basedir: dir,\\n            extensions: ['.js', '.coffee']\\n        }),\\n        path.join(dir, 'mug.js'),\\n        './mug -> ./mug.js'\\n    );\\n\\n    t.end();\\n});\\n\\ntest('other path', function (t) {\\n    var resolverDir = path.join(__dirname, 'resolver');\\n    var dir = path.join(resolverDir, 'bar');\\n    var otherDir = path.join(resolverDir, 'other_path');\\n\\n    t.equal(\\n        resolve.sync('root', {\\n            basedir: dir,\\n            paths: [otherDir]\\n        }),\\n        path.join(resolverDir, 'other_path/root.js')\\n    );\\n\\n    t.equal(\\n        resolve.sync('lib/other-lib', {\\n            basedir: dir,\\n            paths: [otherDir]\\n        }),\\n        path.join(resolverDir, 'other_path/lib/other-lib.js')\\n    );\\n\\n    t.throws(function () {\\n        resolve.sync('root', { basedir: dir });\\n    });\\n\\n    t.throws(function () {\\n        resolve.sync('zzz', {\\n            basedir: dir,\\n            paths: [otherDir]\\n        });\\n    });\\n\\n    t.end();\\n});\\n\\ntest('path iterator', function (t) {\\n    var resolverDir = path.join(__dirname, 'resolver');\\n\\n    var exactIterator = function (x, start, getPackageCandidates, opts) {\\n        return [path.join(resolverDir, x)];\\n    };\\n\\n    t.equal(\\n        resolve.sync('baz', { packageIterator: exactIterator }),\\n        path.join(resolverDir, 'baz/quux.js')\\n    );\\n\\n    t.end();\\n});\\n\\ntest('incorrect main', function (t) {\\n    var resolverDir = path.join(__dirname, 'resolver');\\n    var dir = path.join(resolverDir, 'incorrect_main');\\n\\n    t.equal(\\n        resolve.sync('./incorrect_main', { basedir: resolverDir }),\\n        path.join(dir, 'index.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./incorrect_main', { basedir: resolverDir }),\\n            require.resolve('./incorrect_main', { paths: [resolverDir] }),\\n            './incorrect_main: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('missing index', function (t) {\\n    t.plan(requireResolveSupportsPaths ? 2 : 1);\\n\\n    var resolverDir = path.join(__dirname, 'resolver');\\n    try {\\n        resolve.sync('./missing_index', { basedir: resolverDir });\\n        t.fail('did not fail');\\n    } catch (err) {\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n    }\\n    if (requireResolveSupportsPaths) {\\n        try {\\n            require.resolve('./missing_index', { basedir: resolverDir });\\n            t.fail('require.resolve did not fail');\\n        } catch (err) {\\n            t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n        }\\n    }\\n});\\n\\ntest('missing main', function (t) {\\n    var resolverDir = path.join(__dirname, 'resolver');\\n\\n    try {\\n        resolve.sync('./missing_main', { basedir: resolverDir });\\n        t.fail('require.resolve did not fail');\\n    } catch (err) {\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n    }\\n    if (requireResolveSupportsPaths) {\\n        try {\\n            resolve.sync('./missing_main', { basedir: resolverDir });\\n            t.fail('require.resolve did not fail');\\n        } catch (err) {\\n            t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n        }\\n    }\\n\\n    t.end();\\n});\\n\\ntest('null main', function (t) {\\n    var resolverDir = path.join(__dirname, 'resolver');\\n\\n    try {\\n        resolve.sync('./null_main', { basedir: resolverDir });\\n        t.fail('require.resolve did not fail');\\n    } catch (err) {\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n    }\\n    if (requireResolveSupportsPaths) {\\n        try {\\n            resolve.sync('./null_main', { basedir: resolverDir });\\n            t.fail('require.resolve did not fail');\\n        } catch (err) {\\n            t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');\\n        }\\n    }\\n\\n    t.end();\\n});\\n\\ntest('main: false', function (t) {\\n    var basedir = path.join(__dirname, 'resolver');\\n    var dir = path.join(basedir, 'false_main');\\n    t.equal(\\n        resolve.sync('./false_main', { basedir: basedir }),\\n        path.join(dir, 'index.js'),\\n        '`\\\"main\\\": false`: resolves to `index.js`'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./false_main', { basedir: basedir }),\\n            require.resolve('./false_main', { paths: [basedir] }),\\n            '`\\\"main\\\": false`: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\nvar stubStatSync = function stubStatSync(fn) {\\n    var statSync = fs.statSync;\\n    try {\\n        fs.statSync = function () {\\n            throw new EvalError('Unknown Error');\\n        };\\n        return fn();\\n    } finally {\\n        fs.statSync = statSync;\\n    }\\n};\\n\\ntest('#79 - re-throw non ENOENT errors from stat', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n\\n    stubStatSync(function () {\\n        t.throws(function () {\\n            resolve.sync('foo', { basedir: dir });\\n        }, /Unknown Error/);\\n    });\\n\\n    t.end();\\n});\\n\\ntest('#52 - incorrectly resolves module-paths like \\\"./someFolder/\\\" when there is a file of the same name', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n    var basedir = path.join(dir, 'same_names');\\n\\n    t.equal(\\n        resolve.sync('./foo', { basedir: basedir }),\\n        path.join(dir, 'same_names/foo.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./foo', { basedir: basedir }),\\n            require.resolve('./foo', { paths: [basedir] }),\\n            './foo: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.equal(\\n        resolve.sync('./foo/', { basedir: basedir }),\\n        path.join(dir, 'same_names/foo/index.js')\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./foo/', { basedir: basedir }),\\n            require.resolve('./foo/', { paths: [basedir] }),\\n            './foo/: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('#211 - incorrectly resolves module-paths like \\\".\\\" when from inside a folder with a sibling file of the same name', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n    var basedir = path.join(dir, 'same_names/foo');\\n\\n    t.equal(\\n        resolve.sync('./', { basedir: basedir }),\\n        path.join(dir, 'same_names/foo/index.js'),\\n        './'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./', { basedir: basedir }),\\n            require.resolve('./', { paths: [basedir] }),\\n            './: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.equal(\\n        resolve.sync('.', { basedir: basedir }),\\n        path.join(dir, 'same_names/foo/index.js'),\\n        '.'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('.', { basedir: basedir }),\\n            require.resolve('.', { paths: [basedir] }),\\n            '.: resolve.sync === require.resolve',\\n            { todo: true }\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('sync: #121 - treating an existing file as a dir when no basedir', function (t) {\\n    var testFile = path.basename(__filename);\\n\\n    t.test('sanity check', function (st) {\\n        st.equal(\\n            resolve.sync('./' + testFile),\\n            __filename,\\n            'sanity check'\\n        );\\n        st.equal(\\n            resolve.sync('./' + testFile),\\n            require.resolve('./' + testFile),\\n            'sanity check: resolve.sync === require.resolve'\\n        );\\n\\n        st.end();\\n    });\\n\\n    t.test('with a fake directory', function (st) {\\n        function run() { return resolve.sync('./' + testFile + '/blah'); }\\n\\n        st.throws(run, 'throws an error');\\n\\n        try {\\n            run();\\n        } catch (e) {\\n            st.equal(e.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');\\n            st.equal(\\n                e.message,\\n                'Cannot find module \\\\'./' + testFile + '/blah\\\\' from \\\\'' + __dirname + '\\\\'',\\n                'can not find nonexistent module'\\n            );\\n        }\\n\\n        st.end();\\n    });\\n\\n    t.end();\\n});\\n\\ntest('sync dot main', function (t) {\\n    var start = new Date();\\n\\n    t.equal(\\n        resolve.sync('./resolver/dot_main'),\\n        path.join(__dirname, 'resolver/dot_main/index.js'),\\n        './resolver/dot_main'\\n    );\\n    t.equal(\\n        resolve.sync('./resolver/dot_main'),\\n        require.resolve('./resolver/dot_main'),\\n        './resolver/dot_main: resolve.sync === require.resolve'\\n    );\\n\\n    t.ok(new Date() - start < 50, 'resolve.sync timedout');\\n\\n    t.end();\\n});\\n\\ntest('sync dot slash main', function (t) {\\n    var start = new Date();\\n\\n    t.equal(\\n        resolve.sync('./resolver/dot_slash_main'),\\n        path.join(__dirname, 'resolver/dot_slash_main/index.js')\\n    );\\n    t.equal(\\n        resolve.sync('./resolver/dot_slash_main'),\\n        require.resolve('./resolver/dot_slash_main'),\\n        './resolver/dot_slash_main: resolve.sync === require.resolve'\\n    );\\n\\n    t.ok(new Date() - start < 50, 'resolve.sync timedout');\\n\\n    t.end();\\n});\\n\\ntest('not a directory', function (t) {\\n    var path = './foo';\\n    try {\\n        resolve.sync(path, { basedir: __filename });\\n        t.fail();\\n    } catch (err) {\\n        t.ok(err, 'a non-directory errors');\\n        t.equal(err && err.message, 'Cannot find module \\\\'' + path + \\\"' from '\\\" + __filename + \\\"'\\\");\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND');\\n    }\\n    t.end();\\n});\\n\\ntest('non-string \\\"main\\\" field in package.json', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n    try {\\n        var result = resolve.sync('./invalid_main', { basedir: dir });\\n        t.equal(result, undefined, 'result should not exist');\\n        t.fail('should not get here');\\n    } catch (err) {\\n        t.ok(err, 'errors on non-string main');\\n        t.equal(err.message, 'package “invalid_main” `main` must be a string');\\n        t.equal(err.code, 'INVALID_PACKAGE_MAIN');\\n    }\\n    t.end();\\n});\\n\\ntest('non-string \\\"main\\\" field in package.json', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n    try {\\n        var result = resolve.sync('./invalid_main', { basedir: dir });\\n        t.equal(result, undefined, 'result should not exist');\\n        t.fail('should not get here');\\n    } catch (err) {\\n        t.ok(err, 'errors on non-string main');\\n        t.equal(err.message, 'package “invalid_main” `main` must be a string');\\n        t.equal(err.code, 'INVALID_PACKAGE_MAIN');\\n    }\\n    t.end();\\n});\\n\\ntest('browser field in package.json', function (t) {\\n    var dir = path.join(__dirname, 'resolver');\\n    var res = resolve.sync('./browser_field', {\\n        basedir: dir,\\n        packageFilter: function packageFilter(pkg) {\\n            if (pkg.browser) {\\n                pkg.main = pkg.browser; // eslint-disable-line no-param-reassign\\n                delete pkg.browser; // eslint-disable-line no-param-reassign\\n            }\\n            return pkg;\\n        }\\n    });\\n    t.equal(res, path.join(dir, 'browser_field', 'b.js'));\\n    t.end();\\n});\\n\\ntest('absolute paths', function (t) {\\n    var extensionless = __filename.slice(0, -path.extname(__filename).length);\\n\\n    t.equal(\\n        resolve.sync(__filename),\\n        __filename,\\n        'absolute path to this file resolves'\\n    );\\n    t.equal(\\n        resolve.sync(__filename),\\n        require.resolve(__filename),\\n        'absolute path to this file: resolve.sync === require.resolve'\\n    );\\n\\n    t.equal(\\n        resolve.sync(extensionless),\\n        __filename,\\n        'extensionless absolute path to this file resolves'\\n    );\\n    t.equal(\\n        resolve.sync(__filename),\\n        require.resolve(__filename),\\n        'absolute path to this file: resolve.sync === require.resolve'\\n    );\\n\\n    t.equal(\\n        resolve.sync(__filename, { basedir: process.cwd() }),\\n        __filename,\\n        'absolute path to this file with a basedir resolves'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync(__filename, { basedir: process.cwd() }),\\n            require.resolve(__filename, { paths: [process.cwd()] }),\\n            'absolute path to this file + basedir: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.equal(\\n        resolve.sync(extensionless, { basedir: process.cwd() }),\\n        __filename,\\n        'extensionless absolute path to this file with a basedir resolves'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync(extensionless, { basedir: process.cwd() }),\\n            require.resolve(extensionless, { paths: [process.cwd()] }),\\n            'extensionless absolute path to this file + basedir: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    t.end();\\n});\\n\\ntest('malformed package.json', function (t) {\\n    t.plan(5 + (requireResolveSupportsPaths ? 1 : 0));\\n\\n    var basedir = path.join(__dirname, 'resolver/malformed_package_json');\\n    var expected = path.join(basedir, 'index.js');\\n\\n    t.equal(\\n        resolve.sync('./index.js', { basedir: basedir }),\\n        expected,\\n        'malformed package.json is silently ignored'\\n    );\\n    if (requireResolveSupportsPaths) {\\n        t.equal(\\n            resolve.sync('./index.js', { basedir: basedir }),\\n            require.resolve('./index.js', { paths: [basedir] }),\\n            'malformed package.json: resolve.sync === require.resolve'\\n        );\\n    }\\n\\n    var res1 = resolve.sync(\\n        './index.js',\\n        {\\n            basedir: basedir,\\n            packageFilter: function (pkg, pkgfile, dir) {\\n                t.fail('should not reach here');\\n            }\\n        }\\n    );\\n\\n    t.equal(\\n        res1,\\n        expected,\\n        'with packageFilter: malformed package.json is silently ignored'\\n    );\\n\\n    var res2 = resolve.sync(\\n        './index.js',\\n        {\\n            basedir: basedir,\\n            readPackageSync: function (readFileSync, pkgfile) {\\n                t.equal(pkgfile, path.join(basedir, 'package.json'), 'readPackageSync: `pkgfile` is package.json path');\\n                var result = String(readFileSync(pkgfile));\\n                try {\\n                    return JSON.parse(result);\\n                } catch (e) {\\n                    t.ok(e instanceof SyntaxError, 'readPackageSync: malformed package.json parses as a syntax error');\\n                }\\n            }\\n        }\\n    );\\n\\n    t.equal(\\n        res2,\\n        expected,\\n        'with readPackageSync: malformed package.json is silently ignored'\\n    );\\n});\\n\",\"filename\":\"/node_modules/resolve/test/resolver_sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/*! For license information please see signal-js.min.js.LICENSE.txt */\\n!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports.signal=t():e.signal=t()}(self,(function(){return(()=>{\\\"use strict\\\";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})}},t={};e.r(t),e.d(t,{default:()=>a});const r=Symbol(\\\"events\\\");class n extends Error{}function o(e,t){return new n(`.${e}: ${t}`)}const s=e=>\\\"function\\\"==typeof e,i=e=>null!=e&&(e=>\\\"string\\\"==typeof e)(e)||Number.isFinite(e)||(e=>\\\"symbol\\\"==typeof e)(e),f=Object.assign(Object.create(null),{on(e,t){if(!i(e))throw o(\\\"on\\\",\\\"requires event name\\\");if(!s(t))throw o(\\\"on\\\",\\\"requires callback\\\");const n=this[r];return(n.has(e)?n.get(e):n.set(e,new Set).get(e)).add(t),this},off(e,t){if(!i(e))throw o(\\\"off\\\",\\\"requires event name\\\");const n=this[r];if(!n.has(e))return this;if(t){const r=n.get(e);return r.has(t)&&r.delete(t),0===r.size&&n.delete(e),this}return n.delete(e),this},once(e,t){if(!i(e))throw o(\\\"once\\\",\\\"requires an event name\\\");if(!s(t))throw o(\\\"once\\\",\\\"requires a function\\\");const r=(...n)=>{this.off(e,r),t(...n)};return this.on(e,r)},emit(e,t){if(!i(e))throw o(\\\"emit\\\",\\\"requires an event name\\\");const n=this[r];if(!n.has(e))return this;const s=n.get(e);if(!s.size)return this;const f=arguments,u=f.length;if(u<=2)return((e,t)=>{for(const r of e)r(t)})(s,t),this;let c=1;const a=new Array(u-1);for(;c<u;c+=1)a[c-1]=f[c];return((e,t)=>{for(const r of e)r(...t)})(s,a),this},listeners(e){const t=this[r];return void 0!==e?t.has(e)?Array.from(t.get(e)):[]:Array.from(t.values()).map((e=>Array.from(e))).flat()},names(){const e=this[r];return Array.from(e.keys())},size(e){const t=this[r];return i(e)?t.has(e)?t.get(e).size:0:Array.from(t.values()).reduce(((e,t)=>e+t.size),0)},clear(e){const t=this[r];return i(e)?(t.has(e)&&t.get(e).clear(),this):(this[r].clear(),this)}});f.addListener=f.subscribe=f.bind=f.on,f.removeListender=f.unsubscribe=f.unbind=f.off,f.trigger=f.dispatch=f.emit;const u=f,c=function(){const e=function(){return c()};return e[r]=new Map,e.__proto__=u,e},a=c();return t})()}));\\n//# sourceMappingURL=signal-js.min.js.map\",\"filename\":\"/node_modules/signal-js/dist/signal-js.min.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var test = require('tape');\\nvar resolve = require('../');\\nvar path = require('path');\\n\\ntest('shadowed core modules still return core module', function (t) {\\n    t.plan(2);\\n\\n    resolve('util', { basedir: path.join(__dirname, 'shadowed_core') }, function (err, res) {\\n        t.ifError(err);\\n        t.equal(res, 'util');\\n    });\\n});\\n\\ntest('shadowed core modules still return core module [sync]', function (t) {\\n    t.plan(1);\\n\\n    var res = resolve.sync('util', { basedir: path.join(__dirname, 'shadowed_core') });\\n\\n    t.equal(res, 'util');\\n});\\n\\ntest('shadowed core modules return shadow when appending `/`', function (t) {\\n    t.plan(2);\\n\\n    resolve('util/', { basedir: path.join(__dirname, 'shadowed_core') }, function (err, res) {\\n        t.ifError(err);\\n        t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));\\n    });\\n});\\n\\ntest('shadowed core modules return shadow when appending `/` [sync]', function (t) {\\n    t.plan(1);\\n\\n    var res = resolve.sync('util/', { basedir: path.join(__dirname, 'shadowed_core') });\\n\\n    t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));\\n});\\n\\ntest('shadowed core modules return shadow with `includeCoreModules: false`', function (t) {\\n    t.plan(2);\\n\\n    resolve('util', { basedir: path.join(__dirname, 'shadowed_core'), includeCoreModules: false }, function (err, res) {\\n        t.ifError(err);\\n        t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));\\n    });\\n});\\n\\ntest('shadowed core modules return shadow with `includeCoreModules: false` [sync]', function (t) {\\n    t.plan(1);\\n\\n    var res = resolve.sync('util', { basedir: path.join(__dirname, 'shadowed_core'), includeCoreModules: false });\\n\\n    t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));\\n});\\n\",\"filename\":\"/node_modules/resolve/test/shadowed_core.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var test = require('tape');\\nvar resolve = require('../');\\nvar path = require('path');\\n\\ntest('subdirs', function (t) {\\n    t.plan(2);\\n\\n    var dir = path.join(__dirname, '/subdirs');\\n    resolve('a/b/c/x.json', { basedir: dir }, function (err, res) {\\n        t.ifError(err);\\n        t.equal(res, path.join(dir, 'node_modules/a/b/c/x.json'));\\n    });\\n});\\n\",\"filename\":\"/node_modules/resolve/test/subdirs.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var path = require('path');\\nvar fs = require('fs');\\nvar test = require('tape');\\nvar map = require('array.prototype.map');\\nvar resolve = require('../');\\n\\nvar symlinkDir = path.join(__dirname, 'resolver', 'symlinked', 'symlink');\\nvar packageDir = path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'package');\\nvar modADir = path.join(__dirname, 'symlinks', 'source', 'node_modules', 'mod-a');\\nvar symlinkModADir = path.join(__dirname, 'symlinks', 'dest', 'node_modules', 'mod-a');\\ntry {\\n    fs.unlinkSync(symlinkDir);\\n} catch (err) {}\\ntry {\\n    fs.unlinkSync(packageDir);\\n} catch (err) {}\\ntry {\\n    fs.unlinkSync(modADir);\\n} catch (err) {}\\ntry {\\n    fs.unlinkSync(symlinkModADir);\\n} catch (err) {}\\n\\ntry {\\n    fs.symlinkSync('./_/symlink_target', symlinkDir, 'dir');\\n} catch (err) {\\n    // if fails then it is probably on Windows and lets try to create a junction\\n    fs.symlinkSync(path.join(__dirname, 'resolver', 'symlinked', '_', 'symlink_target') + '\\\\\\\\', symlinkDir, 'junction');\\n}\\ntry {\\n    fs.symlinkSync('../../package', packageDir, 'dir');\\n} catch (err) {\\n    // if fails then it is probably on Windows and lets try to create a junction\\n    fs.symlinkSync(path.join(__dirname, '..', '..', 'package') + '\\\\\\\\', packageDir, 'junction');\\n}\\ntry {\\n    fs.symlinkSync('../../source/node_modules/mod-a', symlinkModADir, 'dir');\\n} catch (err) {\\n    // if fails then it is probably on Windows and lets try to create a junction\\n    fs.symlinkSync(path.join(__dirname, '..', '..', 'source', 'node_modules', 'mod-a') + '\\\\\\\\', symlinkModADir, 'junction');\\n}\\n\\ntest('symlink', function (t) {\\n    t.plan(2);\\n\\n    resolve('foo', { basedir: symlinkDir, preserveSymlinks: false }, function (err, res, pkg) {\\n        t.error(err);\\n        t.equal(res, path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js'));\\n    });\\n});\\n\\ntest('sync symlink when preserveSymlinks = true', function (t) {\\n    t.plan(4);\\n\\n    resolve('foo', { basedir: symlinkDir }, function (err, res, pkg) {\\n        t.ok(err, 'there is an error');\\n        t.notOk(res, 'no result');\\n\\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');\\n        t.equal(\\n            err && err.message,\\n            'Cannot find module \\\\'foo\\\\' from \\\\'' + symlinkDir + '\\\\'',\\n            'can not find nonexistent module'\\n        );\\n    });\\n});\\n\\ntest('sync symlink', function (t) {\\n    var start = new Date();\\n    t.doesNotThrow(function () {\\n        t.equal(\\n            resolve.sync('foo', { basedir: symlinkDir, preserveSymlinks: false }),\\n            path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js')\\n        );\\n    });\\n    t.ok(new Date() - start < 50, 'resolve.sync timedout');\\n    t.end();\\n});\\n\\ntest('sync symlink when preserveSymlinks = true', function (t) {\\n    t.throws(function () {\\n        resolve.sync('foo', { basedir: symlinkDir });\\n    }, /Cannot find module 'foo'/);\\n    t.end();\\n});\\n\\ntest('sync symlink from node_modules to other dir when preserveSymlinks = false', function (t) {\\n    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');\\n    var fn = resolve.sync('package', { basedir: basedir, preserveSymlinks: false });\\n\\n    t.equal(fn, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));\\n    t.end();\\n});\\n\\ntest('async symlink from node_modules to other dir when preserveSymlinks = false', function (t) {\\n    t.plan(2);\\n    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');\\n    resolve('package', { basedir: basedir, preserveSymlinks: false }, function (err, result) {\\n        t.notOk(err, 'no error');\\n        t.equal(result, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));\\n    });\\n});\\n\\ntest('packageFilter', function (t) {\\n    function relative(x) {\\n        return path.relative(__dirname, x);\\n    }\\n\\n    function testPackageFilter(preserveSymlinks) {\\n        return function (st) {\\n            st.plan('is 1.x' ? 3 : 5); // eslint-disable-line no-constant-condition\\n\\n            var destMain = 'symlinks/dest/node_modules/mod-a/index.js';\\n            var destPkg = 'symlinks/dest/node_modules/mod-a/package.json';\\n            var sourceMain = 'symlinks/source/node_modules/mod-a/index.js';\\n            var sourcePkg = 'symlinks/source/node_modules/mod-a/package.json';\\n            var destDir = path.join(__dirname, 'symlinks', 'dest');\\n\\n            /* eslint multiline-comment-style: 0 */\\n            /* v2.x will restore these tests\\n            var packageFilterPath = [];\\n            var actualPath = resolve.sync('mod-a', {\\n                basedir: destDir,\\n                preserveSymlinks: preserveSymlinks,\\n                packageFilter: function (pkg, pkgfile, dir) {\\n                    packageFilterPath.push(pkgfile);\\n                }\\n            });\\n            st.equal(\\n                relative(actualPath),\\n                path.normalize(preserveSymlinks ? destMain : sourceMain),\\n                'sync: actual path is correct'\\n            );\\n            st.deepEqual(\\n                map(packageFilterPath, relative),\\n                map(preserveSymlinks ? [destPkg, destPkg] : [sourcePkg, sourcePkg], path.normalize),\\n                'sync: packageFilter pkgfile arg is correct'\\n            );\\n            */\\n\\n            var asyncPackageFilterPath = [];\\n            resolve(\\n                'mod-a',\\n                {\\n                    basedir: destDir,\\n                    preserveSymlinks: preserveSymlinks,\\n                    packageFilter: function (pkg, pkgfile) {\\n                        asyncPackageFilterPath.push(pkgfile);\\n                    }\\n                },\\n                function (err, actualPath) {\\n                    st.error(err, 'no error');\\n                    st.equal(\\n                        relative(actualPath),\\n                        path.normalize(preserveSymlinks ? destMain : sourceMain),\\n                        'async: actual path is correct'\\n                    );\\n                    st.deepEqual(\\n                        map(asyncPackageFilterPath, relative),\\n                        map(\\n                            preserveSymlinks ? [destPkg, destPkg, destPkg] : [sourcePkg, sourcePkg, sourcePkg],\\n                            path.normalize\\n                        ),\\n                        'async: packageFilter pkgfile arg is correct'\\n                    );\\n                }\\n            );\\n        };\\n    }\\n\\n    t.test('preserveSymlinks: false', testPackageFilter(false));\\n\\n    t.test('preserveSymlinks: true', testPackageFilter(true));\\n\\n    t.end();\\n});\\n\",\"filename\":\"/node_modules/resolve/test/symlinks.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import Signal from './Signal.js';\\nimport key from './key.js';\\n\\nconst create = function() {\\n\\tconst signal = function signal() {\\n\\t\\treturn create();\\n\\t};\\n\\tsignal[key] = new Map();\\n\\tsignal.__proto__ = Signal;\\n\\treturn signal;\\n};\\n\\n// create a pub/sub to expose a signal singleton\\nconst signal = create();\\n\\n// expose\\nexport default signal;\",\"filename\":\"/node_modules/signal-js/src/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":257}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const multiple = (fns, args) => {\\n\\tfor (const fn of fns) fn(...args);\\n};\\n\\nexport const single = (fns, arg) => {\\n\\tfor (const fn of fns) fn(arg);\\n};\",\"filename\":\"/node_modules/signal-js/src/caller.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import key from './key.js';\\nimport SignalError from './SignalError.js';\\nimport { single, multiple } from './caller.js';\\nimport {\\n\\tisFunction,\\n\\tisString,\\n\\tisSymbol,\\n} from './utils.js';\\n\\nconst isValidKey = value => value != null && isString(value) || Number.isFinite(value) || isSymbol(value);\\n\\nconst proto = Object.assign(Object.create(null), {\\n\\t// on | off ************************************************\\n\\ton(name, fn) {\\n\\t\\tif (!isValidKey(name)) throw SignalError('on', 'requires event name');\\n\\t\\tif (!isFunction(fn)) throw SignalError('on', 'requires callback');\\n\\n\\t\\tconst location = this[key];\\n\\t\\tconst fns = location.has(name) ? location.get(name) : location.set(name, new Set()).get(name);\\n\\t\\tfns.add(fn);\\n\\t\\t\\n\\t\\treturn this;\\n\\t},\\n\\n\\toff(name, fn) {\\n\\t\\tif (!isValidKey(name)) throw SignalError('off', 'requires event name');\\n\\n\\t\\tconst location = this[key];  \\n\\n\\t\\tif (!location.has(name)) return this;\\n\\n\\t\\t// remove single\\n\\t\\tif (fn) {\\n\\t\\t\\tconst fns = location.get(name);\\n\\t\\t\\t\\n\\t\\t\\t// remove this function\\n\\t\\t\\tfns.has(fn) && fns.delete(fn);\\n\\n\\t\\t\\t// check size and delete location if empty\\n\\t\\t\\tfns.size === 0 && location.delete(name);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\t// remove all\\n\\t\\tlocation.delete(name);\\n\\t\\treturn this;\\n\\t},\\n\\n\\tonce(name, fn) {\\n\\t\\tif (!isValidKey(name)) throw SignalError('once', 'requires an event name');\\n\\t\\tif (!isFunction(fn)) throw SignalError('once', 'requires a function');\\n\\n\\t\\t// slow path the params...this is for flexibility\\n\\t\\t// and since these are single calls, the depotimization\\n\\t\\t// shouldn't be a concern\\n\\t\\tconst callback = (...parms) => {\\n\\t\\t\\tthis.off(name, callback);\\n\\t\\t\\tfn(...parms);\\n\\t\\t};\\n\\n\\t\\treturn this.on(name, callback);\\n\\t},\\n\\n\\t// emit ************************************************\\n\\temit(name, arg) {\\n\\t\\tif (!isValidKey(name)) throw SignalError('emit', 'requires an event name');\\n\\n\\t\\tconst location = this[key];\\n\\n\\t\\t// nothing at the location\\n\\t\\tif (!location.has(name)) return this;\\n\\n\\t\\tconst fns = location.get(name);\\n\\n\\t\\t// no events at the location\\n\\t\\tif (!fns.size) return this;\\n\\n\\t\\t// we have an array of functions to call\\n\\t\\tconst args = arguments;\\n\\t\\tconst numOfArgs = args.length;\\n\\t\\t\\n\\t\\t// fast path\\n\\t\\tif (numOfArgs <= 2) {\\n\\t\\t\\tsingle(fns, arg);\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\t// prevent this function from being de-optimized\\n\\t\\t// because of using the arguments:\\n\\t\\t// http://reefpoints.dockyard.com/2014/09/22/javascript-performance-for-the-win.html\\n\\t\\t// We only need the arguments after the event name\\n\\t\\tlet idx = 1;\\n\\t\\tconst argsArray = new Array(numOfArgs - 1);\\n\\t\\tfor (; idx < numOfArgs; idx += 1) {\\n\\t\\t\\targsArray[idx - 1] = args[idx];\\n\\t\\t}\\n\\n\\t\\tmultiple(fns, argsArray);\\n\\t\\treturn this;\\n\\t},\\n\\n\\t// listeners / names ************************************************\\n\\tlisteners(name) {\\n\\t\\tconst location = this[key];\\n\\n\\t\\t// make sure to always send an array and clean any \\n\\t\\t// references so that we cant mutate to undefined behavior\\n\\t\\t\\n\\t\\tif (name !== undefined) {\\n\\t\\t\\treturn location.has(name) ? \\n\\t\\t\\t\\tArray.from(location.get(name)) : \\n\\t\\t\\t\\t[];\\n\\t\\t}\\n\\n\\t\\treturn Array.from(location.values())\\n\\t\\t\\t\\t.map(set => Array.from(set))\\n\\t\\t\\t\\t.flat();\\n\\t},\\n\\t\\n\\tnames() {\\n\\t\\tconst location = this[key];\\n\\t\\treturn Array.from(location.keys());\\n\\t},\\n\\n\\tsize(name) {\\n\\t\\tconst location = this[key];\\n\\n\\t\\t// make sure to always send an array and clean any \\n\\t\\t// references so that we cant mutate to undefined behavior\\n\\t\\t\\n\\t\\tif (isValidKey(name)) {\\n\\t\\t\\treturn location.has(name) ? \\n\\t\\t\\t\\tlocation.get(name).size : \\n\\t\\t\\t\\t0;\\n\\t\\t}\\n\\n\\t\\treturn Array.from(location.values())\\n\\t\\t\\t.reduce((memo, set) => memo + set.size, 0);\\n\\t},\\n\\n\\t// clear ************************************************\\n\\tclear(name) {\\n\\t\\tconst location = this[key];\\n\\n\\t\\tif (isValidKey(name)) {\\n\\t\\t\\tlocation.has(name) && location.get(name).clear();\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tthis[key].clear();\\n\\t\\treturn this;\\n\\t},\\n});\\n\\n// proxy methods\\nproto.addListener = proto.subscribe = proto.bind = proto.on;\\nproto.removeListender = proto.unsubscribe = proto.unbind = proto.off;\\nproto.trigger = proto.dispatch = proto.emit;\\n\\nexport default proto;\",\"filename\":\"/node_modules/signal-js/src/Signal.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":259}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export default Symbol('events');\",\"filename\":\"/node_modules/signal-js/src/key.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst { EMPTY_BUFFER } = require('./constants');\\n\\n/**\\n * Merges an array of buffers into a new buffer.\\n *\\n * @param {Buffer[]} list The array of buffers to concat\\n * @param {Number} totalLength The total length of buffers in the list\\n * @return {Buffer} The resulting buffer\\n * @public\\n */\\nfunction concat(list, totalLength) {\\n  if (list.length === 0) return EMPTY_BUFFER;\\n  if (list.length === 1) return list[0];\\n\\n  const target = Buffer.allocUnsafe(totalLength);\\n  let offset = 0;\\n\\n  for (let i = 0; i < list.length; i++) {\\n    const buf = list[i];\\n    target.set(buf, offset);\\n    offset += buf.length;\\n  }\\n\\n  if (offset < totalLength) return target.slice(0, offset);\\n\\n  return target;\\n}\\n\\n/**\\n * Masks a buffer using the given mask.\\n *\\n * @param {Buffer} source The buffer to mask\\n * @param {Buffer} mask The mask to use\\n * @param {Buffer} output The buffer where to store the result\\n * @param {Number} offset The offset at which to start writing\\n * @param {Number} length The number of bytes to mask.\\n * @public\\n */\\nfunction _mask(source, mask, output, offset, length) {\\n  for (let i = 0; i < length; i++) {\\n    output[offset + i] = source[i] ^ mask[i & 3];\\n  }\\n}\\n\\n/**\\n * Unmasks a buffer using the given mask.\\n *\\n * @param {Buffer} buffer The buffer to unmask\\n * @param {Buffer} mask The mask to use\\n * @public\\n */\\nfunction _unmask(buffer, mask) {\\n  for (let i = 0; i < buffer.length; i++) {\\n    buffer[i] ^= mask[i & 3];\\n  }\\n}\\n\\n/**\\n * Converts a buffer to an `ArrayBuffer`.\\n *\\n * @param {Buffer} buf The buffer to convert\\n * @return {ArrayBuffer} Converted buffer\\n * @public\\n */\\nfunction toArrayBuffer(buf) {\\n  if (buf.byteLength === buf.buffer.byteLength) {\\n    return buf.buffer;\\n  }\\n\\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\\n}\\n\\n/**\\n * Converts `data` to a `Buffer`.\\n *\\n * @param {*} data The data to convert\\n * @return {Buffer} The buffer\\n * @throws {TypeError}\\n * @public\\n */\\nfunction toBuffer(data) {\\n  toBuffer.readOnly = true;\\n\\n  if (Buffer.isBuffer(data)) return data;\\n\\n  let buf;\\n\\n  if (data instanceof ArrayBuffer) {\\n    buf = Buffer.from(data);\\n  } else if (ArrayBuffer.isView(data)) {\\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\\n  } else {\\n    buf = Buffer.from(data);\\n    toBuffer.readOnly = false;\\n  }\\n\\n  return buf;\\n}\\n\\nmodule.exports = {\\n  concat,\\n  mask: _mask,\\n  toArrayBuffer,\\n  toBuffer,\\n  unmask: _unmask\\n};\\n\\n/* istanbul ignore else  */\\nif (!process.env.WS_NO_BUFFER_UTIL) {\\n  try {\\n    const bufferUtil = require('bufferutil');\\n\\n    module.exports.mask = function (source, mask, output, offset, length) {\\n      if (length < 48) _mask(source, mask, output, offset, length);\\n      else bufferUtil.mask(source, mask, output, offset, length);\\n    };\\n\\n    module.exports.unmask = function (buffer, mask) {\\n      if (buffer.length < 32) _unmask(buffer, mask);\\n      else bufferUtil.unmask(buffer, mask);\\n    };\\n  } catch (e) {\\n    // Continue regardless of the error.\\n  }\\n}\\n\",\"filename\":\"/node_modules/ws/lib/buffer-util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"class SignalError extends Error {}\\n\\nexport default function SignalErrorFactory(method, message) {\\n\\treturn new SignalError(`.${method}: ${message}`);\\n};\",\"filename\":\"/node_modules/signal-js/src/SignalError.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const isFunction = value => typeof value === 'function';\\n\\nexport const isString = value => typeof value === 'string';\\n\\nexport const isSymbol = value => typeof value === 'symbol';\",\"filename\":\"/node_modules/signal-js/src/utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst { kForOnEventAttribute, kListener } = require('./constants');\\n\\nconst kCode = Symbol('kCode');\\nconst kData = Symbol('kData');\\nconst kError = Symbol('kError');\\nconst kMessage = Symbol('kMessage');\\nconst kReason = Symbol('kReason');\\nconst kTarget = Symbol('kTarget');\\nconst kType = Symbol('kType');\\nconst kWasClean = Symbol('kWasClean');\\n\\n/**\\n * Class representing an event.\\n */\\nclass Event {\\n  /**\\n   * Create a new `Event`.\\n   *\\n   * @param {String} type The name of the event\\n   * @throws {TypeError} If the `type` argument is not specified\\n   */\\n  constructor(type) {\\n    this[kTarget] = null;\\n    this[kType] = type;\\n  }\\n\\n  /**\\n   * @type {*}\\n   */\\n  get target() {\\n    return this[kTarget];\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  get type() {\\n    return this[kType];\\n  }\\n}\\n\\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\\n\\n/**\\n * Class representing a close event.\\n *\\n * @extends Event\\n */\\nclass CloseEvent extends Event {\\n  /**\\n   * Create a new `CloseEvent`.\\n   *\\n   * @param {String} type The name of the event\\n   * @param {Object} [options] A dictionary object that allows for setting\\n   *     attributes via object members of the same name\\n   * @param {Number} [options.code=0] The status code explaining why the\\n   *     connection was closed\\n   * @param {String} [options.reason=''] A human-readable string explaining why\\n   *     the connection was closed\\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\\n   *     connection was cleanly closed\\n   */\\n  constructor(type, options = {}) {\\n    super(type);\\n\\n    this[kCode] = options.code === undefined ? 0 : options.code;\\n    this[kReason] = options.reason === undefined ? '' : options.reason;\\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\\n  }\\n\\n  /**\\n   * @type {Number}\\n   */\\n  get code() {\\n    return this[kCode];\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  get reason() {\\n    return this[kReason];\\n  }\\n\\n  /**\\n   * @type {Boolean}\\n   */\\n  get wasClean() {\\n    return this[kWasClean];\\n  }\\n}\\n\\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\\n\\n/**\\n * Class representing an error event.\\n *\\n * @extends Event\\n */\\nclass ErrorEvent extends Event {\\n  /**\\n   * Create a new `ErrorEvent`.\\n   *\\n   * @param {String} type The name of the event\\n   * @param {Object} [options] A dictionary object that allows for setting\\n   *     attributes via object members of the same name\\n   * @param {*} [options.error=null] The error that generated this event\\n   * @param {String} [options.message=''] The error message\\n   */\\n  constructor(type, options = {}) {\\n    super(type);\\n\\n    this[kError] = options.error === undefined ? null : options.error;\\n    this[kMessage] = options.message === undefined ? '' : options.message;\\n  }\\n\\n  /**\\n   * @type {*}\\n   */\\n  get error() {\\n    return this[kError];\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  get message() {\\n    return this[kMessage];\\n  }\\n}\\n\\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\\n\\n/**\\n * Class representing a message event.\\n *\\n * @extends Event\\n */\\nclass MessageEvent extends Event {\\n  /**\\n   * Create a new `MessageEvent`.\\n   *\\n   * @param {String} type The name of the event\\n   * @param {Object} [options] A dictionary object that allows for setting\\n   *     attributes via object members of the same name\\n   * @param {*} [options.data=null] The message content\\n   */\\n  constructor(type, options = {}) {\\n    super(type);\\n\\n    this[kData] = options.data === undefined ? null : options.data;\\n  }\\n\\n  /**\\n   * @type {*}\\n   */\\n  get data() {\\n    return this[kData];\\n  }\\n}\\n\\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\\n\\n/**\\n * This provides methods for emulating the `EventTarget` interface. It's not\\n * meant to be used directly.\\n *\\n * @mixin\\n */\\nconst EventTarget = {\\n  /**\\n   * Register an event listener.\\n   *\\n   * @param {String} type A string representing the event type to listen for\\n   * @param {(Function|Object)} handler The listener to add\\n   * @param {Object} [options] An options object specifies characteristics about\\n   *     the event listener\\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\\n   *     listener should be invoked at most once after being added. If `true`,\\n   *     the listener would be automatically removed when invoked.\\n   * @public\\n   */\\n  addEventListener(type, handler, options = {}) {\\n    for (const listener of this.listeners(type)) {\\n      if (\\n        !options[kForOnEventAttribute] &&\\n        listener[kListener] === handler &&\\n        !listener[kForOnEventAttribute]\\n      ) {\\n        return;\\n      }\\n    }\\n\\n    let wrapper;\\n\\n    if (type === 'message') {\\n      wrapper = function onMessage(data, isBinary) {\\n        const event = new MessageEvent('message', {\\n          data: isBinary ? data : data.toString()\\n        });\\n\\n        event[kTarget] = this;\\n        callListener(handler, this, event);\\n      };\\n    } else if (type === 'close') {\\n      wrapper = function onClose(code, message) {\\n        const event = new CloseEvent('close', {\\n          code,\\n          reason: message.toString(),\\n          wasClean: this._closeFrameReceived && this._closeFrameSent\\n        });\\n\\n        event[kTarget] = this;\\n        callListener(handler, this, event);\\n      };\\n    } else if (type === 'error') {\\n      wrapper = function onError(error) {\\n        const event = new ErrorEvent('error', {\\n          error,\\n          message: error.message\\n        });\\n\\n        event[kTarget] = this;\\n        callListener(handler, this, event);\\n      };\\n    } else if (type === 'open') {\\n      wrapper = function onOpen() {\\n        const event = new Event('open');\\n\\n        event[kTarget] = this;\\n        callListener(handler, this, event);\\n      };\\n    } else {\\n      return;\\n    }\\n\\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\\n    wrapper[kListener] = handler;\\n\\n    if (options.once) {\\n      this.once(type, wrapper);\\n    } else {\\n      this.on(type, wrapper);\\n    }\\n  },\\n\\n  /**\\n   * Remove an event listener.\\n   *\\n   * @param {String} type A string representing the event type to remove\\n   * @param {(Function|Object)} handler The listener to remove\\n   * @public\\n   */\\n  removeEventListener(type, handler) {\\n    for (const listener of this.listeners(type)) {\\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\\n        this.removeListener(type, listener);\\n        break;\\n      }\\n    }\\n  }\\n};\\n\\nmodule.exports = {\\n  CloseEvent,\\n  ErrorEvent,\\n  Event,\\n  EventTarget,\\n  MessageEvent\\n};\\n\\n/**\\n * Call an event listener\\n *\\n * @param {(Function|Object)} listener The listener to call\\n * @param {*} thisArg The value to use as `this`` when calling the listener\\n * @param {Event} event The event to pass to the listener\\n * @private\\n */\\nfunction callListener(listener, thisArg, event) {\\n  if (typeof listener === 'object' && listener.handleEvent) {\\n    listener.handleEvent.call(listener, event);\\n  } else {\\n    listener.call(thisArg, event);\\n  }\\n}\\n\",\"filename\":\"/node_modules/ws/lib/event-target.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nmodule.exports = {\\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\\n  EMPTY_BUFFER: Buffer.alloc(0),\\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\\n  kListener: Symbol('kListener'),\\n  kStatusCode: Symbol('status-code'),\\n  kWebSocket: Symbol('websocket'),\\n  NOOP: () => {}\\n};\\n\",\"filename\":\"/node_modules/ws/lib/constants.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst zlib = require('zlib');\\n\\nconst bufferUtil = require('./buffer-util');\\nconst Limiter = require('./limiter');\\nconst { kStatusCode } = require('./constants');\\n\\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\\nconst kPerMessageDeflate = Symbol('permessage-deflate');\\nconst kTotalLength = Symbol('total-length');\\nconst kCallback = Symbol('callback');\\nconst kBuffers = Symbol('buffers');\\nconst kError = Symbol('error');\\n\\n//\\n// We limit zlib concurrency, which prevents severe memory fragmentation\\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\\n// and https://github.com/websockets/ws/issues/1202\\n//\\n// Intentionally global; it's the global thread pool that's an issue.\\n//\\nlet zlibLimiter;\\n\\n/**\\n * permessage-deflate implementation.\\n */\\nclass PerMessageDeflate {\\n  /**\\n   * Creates a PerMessageDeflate instance.\\n   *\\n   * @param {Object} [options] Configuration options\\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\\n   *     for, or request, a custom client window size\\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\\n   *     acknowledge disabling of client context takeover\\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\\n   *     calls to zlib\\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\\n   *     use of a custom server window size\\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\\n   *     disabling of server context takeover\\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\\n   *     messages should not be compressed if context takeover is disabled\\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\\n   *     deflate\\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\\n   *     inflate\\n   * @param {Boolean} [isServer=false] Create the instance in either server or\\n   *     client mode\\n   * @param {Number} [maxPayload=0] The maximum allowed message length\\n   */\\n  constructor(options, isServer, maxPayload) {\\n    this._maxPayload = maxPayload | 0;\\n    this._options = options || {};\\n    this._threshold =\\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\\n    this._isServer = !!isServer;\\n    this._deflate = null;\\n    this._inflate = null;\\n\\n    this.params = null;\\n\\n    if (!zlibLimiter) {\\n      const concurrency =\\n        this._options.concurrencyLimit !== undefined\\n          ? this._options.concurrencyLimit\\n          : 10;\\n      zlibLimiter = new Limiter(concurrency);\\n    }\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  static get extensionName() {\\n    return 'permessage-deflate';\\n  }\\n\\n  /**\\n   * Create an extension negotiation offer.\\n   *\\n   * @return {Object} Extension parameters\\n   * @public\\n   */\\n  offer() {\\n    const params = {};\\n\\n    if (this._options.serverNoContextTakeover) {\\n      params.server_no_context_takeover = true;\\n    }\\n    if (this._options.clientNoContextTakeover) {\\n      params.client_no_context_takeover = true;\\n    }\\n    if (this._options.serverMaxWindowBits) {\\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\\n    }\\n    if (this._options.clientMaxWindowBits) {\\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\\n    } else if (this._options.clientMaxWindowBits == null) {\\n      params.client_max_window_bits = true;\\n    }\\n\\n    return params;\\n  }\\n\\n  /**\\n   * Accept an extension negotiation offer/response.\\n   *\\n   * @param {Array} configurations The extension negotiation offers/reponse\\n   * @return {Object} Accepted configuration\\n   * @public\\n   */\\n  accept(configurations) {\\n    configurations = this.normalizeParams(configurations);\\n\\n    this.params = this._isServer\\n      ? this.acceptAsServer(configurations)\\n      : this.acceptAsClient(configurations);\\n\\n    return this.params;\\n  }\\n\\n  /**\\n   * Releases all resources used by the extension.\\n   *\\n   * @public\\n   */\\n  cleanup() {\\n    if (this._inflate) {\\n      this._inflate.close();\\n      this._inflate = null;\\n    }\\n\\n    if (this._deflate) {\\n      const callback = this._deflate[kCallback];\\n\\n      this._deflate.close();\\n      this._deflate = null;\\n\\n      if (callback) {\\n        callback(\\n          new Error(\\n            'The deflate stream was closed while data was being processed'\\n          )\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   *  Accept an extension negotiation offer.\\n   *\\n   * @param {Array} offers The extension negotiation offers\\n   * @return {Object} Accepted configuration\\n   * @private\\n   */\\n  acceptAsServer(offers) {\\n    const opts = this._options;\\n    const accepted = offers.find((params) => {\\n      if (\\n        (opts.serverNoContextTakeover === false &&\\n          params.server_no_context_takeover) ||\\n        (params.server_max_window_bits &&\\n          (opts.serverMaxWindowBits === false ||\\n            (typeof opts.serverMaxWindowBits === 'number' &&\\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\\n        (typeof opts.clientMaxWindowBits === 'number' &&\\n          !params.client_max_window_bits)\\n      ) {\\n        return false;\\n      }\\n\\n      return true;\\n    });\\n\\n    if (!accepted) {\\n      throw new Error('None of the extension offers can be accepted');\\n    }\\n\\n    if (opts.serverNoContextTakeover) {\\n      accepted.server_no_context_takeover = true;\\n    }\\n    if (opts.clientNoContextTakeover) {\\n      accepted.client_no_context_takeover = true;\\n    }\\n    if (typeof opts.serverMaxWindowBits === 'number') {\\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\\n    }\\n    if (typeof opts.clientMaxWindowBits === 'number') {\\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\\n    } else if (\\n      accepted.client_max_window_bits === true ||\\n      opts.clientMaxWindowBits === false\\n    ) {\\n      delete accepted.client_max_window_bits;\\n    }\\n\\n    return accepted;\\n  }\\n\\n  /**\\n   * Accept the extension negotiation response.\\n   *\\n   * @param {Array} response The extension negotiation response\\n   * @return {Object} Accepted configuration\\n   * @private\\n   */\\n  acceptAsClient(response) {\\n    const params = response[0];\\n\\n    if (\\n      this._options.clientNoContextTakeover === false &&\\n      params.client_no_context_takeover\\n    ) {\\n      throw new Error('Unexpected parameter \\\"client_no_context_takeover\\\"');\\n    }\\n\\n    if (!params.client_max_window_bits) {\\n      if (typeof this._options.clientMaxWindowBits === 'number') {\\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\\n      }\\n    } else if (\\n      this._options.clientMaxWindowBits === false ||\\n      (typeof this._options.clientMaxWindowBits === 'number' &&\\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\\n    ) {\\n      throw new Error(\\n        'Unexpected or invalid parameter \\\"client_max_window_bits\\\"'\\n      );\\n    }\\n\\n    return params;\\n  }\\n\\n  /**\\n   * Normalize parameters.\\n   *\\n   * @param {Array} configurations The extension negotiation offers/reponse\\n   * @return {Array} The offers/response with normalized parameters\\n   * @private\\n   */\\n  normalizeParams(configurations) {\\n    configurations.forEach((params) => {\\n      Object.keys(params).forEach((key) => {\\n        let value = params[key];\\n\\n        if (value.length > 1) {\\n          throw new Error(`Parameter \\\"${key}\\\" must have only a single value`);\\n        }\\n\\n        value = value[0];\\n\\n        if (key === 'client_max_window_bits') {\\n          if (value !== true) {\\n            const num = +value;\\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\\n              throw new TypeError(\\n                `Invalid value for parameter \\\"${key}\\\": ${value}`\\n              );\\n            }\\n            value = num;\\n          } else if (!this._isServer) {\\n            throw new TypeError(\\n              `Invalid value for parameter \\\"${key}\\\": ${value}`\\n            );\\n          }\\n        } else if (key === 'server_max_window_bits') {\\n          const num = +value;\\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\\n            throw new TypeError(\\n              `Invalid value for parameter \\\"${key}\\\": ${value}`\\n            );\\n          }\\n          value = num;\\n        } else if (\\n          key === 'client_no_context_takeover' ||\\n          key === 'server_no_context_takeover'\\n        ) {\\n          if (value !== true) {\\n            throw new TypeError(\\n              `Invalid value for parameter \\\"${key}\\\": ${value}`\\n            );\\n          }\\n        } else {\\n          throw new Error(`Unknown parameter \\\"${key}\\\"`);\\n        }\\n\\n        params[key] = value;\\n      });\\n    });\\n\\n    return configurations;\\n  }\\n\\n  /**\\n   * Decompress data. Concurrency limited.\\n   *\\n   * @param {Buffer} data Compressed data\\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\\n   * @param {Function} callback Callback\\n   * @public\\n   */\\n  decompress(data, fin, callback) {\\n    zlibLimiter.add((done) => {\\n      this._decompress(data, fin, (err, result) => {\\n        done();\\n        callback(err, result);\\n      });\\n    });\\n  }\\n\\n  /**\\n   * Compress data. Concurrency limited.\\n   *\\n   * @param {(Buffer|String)} data Data to compress\\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\\n   * @param {Function} callback Callback\\n   * @public\\n   */\\n  compress(data, fin, callback) {\\n    zlibLimiter.add((done) => {\\n      this._compress(data, fin, (err, result) => {\\n        done();\\n        callback(err, result);\\n      });\\n    });\\n  }\\n\\n  /**\\n   * Decompress data.\\n   *\\n   * @param {Buffer} data Compressed data\\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\\n   * @param {Function} callback Callback\\n   * @private\\n   */\\n  _decompress(data, fin, callback) {\\n    const endpoint = this._isServer ? 'client' : 'server';\\n\\n    if (!this._inflate) {\\n      const key = `${endpoint}_max_window_bits`;\\n      const windowBits =\\n        typeof this.params[key] !== 'number'\\n          ? zlib.Z_DEFAULT_WINDOWBITS\\n          : this.params[key];\\n\\n      this._inflate = zlib.createInflateRaw({\\n        ...this._options.zlibInflateOptions,\\n        windowBits\\n      });\\n      this._inflate[kPerMessageDeflate] = this;\\n      this._inflate[kTotalLength] = 0;\\n      this._inflate[kBuffers] = [];\\n      this._inflate.on('error', inflateOnError);\\n      this._inflate.on('data', inflateOnData);\\n    }\\n\\n    this._inflate[kCallback] = callback;\\n\\n    this._inflate.write(data);\\n    if (fin) this._inflate.write(TRAILER);\\n\\n    this._inflate.flush(() => {\\n      const err = this._inflate[kError];\\n\\n      if (err) {\\n        this._inflate.close();\\n        this._inflate = null;\\n        callback(err);\\n        return;\\n      }\\n\\n      const data = bufferUtil.concat(\\n        this._inflate[kBuffers],\\n        this._inflate[kTotalLength]\\n      );\\n\\n      if (this._inflate._readableState.endEmitted) {\\n        this._inflate.close();\\n        this._inflate = null;\\n      } else {\\n        this._inflate[kTotalLength] = 0;\\n        this._inflate[kBuffers] = [];\\n\\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\\n          this._inflate.reset();\\n        }\\n      }\\n\\n      callback(null, data);\\n    });\\n  }\\n\\n  /**\\n   * Compress data.\\n   *\\n   * @param {(Buffer|String)} data Data to compress\\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\\n   * @param {Function} callback Callback\\n   * @private\\n   */\\n  _compress(data, fin, callback) {\\n    const endpoint = this._isServer ? 'server' : 'client';\\n\\n    if (!this._deflate) {\\n      const key = `${endpoint}_max_window_bits`;\\n      const windowBits =\\n        typeof this.params[key] !== 'number'\\n          ? zlib.Z_DEFAULT_WINDOWBITS\\n          : this.params[key];\\n\\n      this._deflate = zlib.createDeflateRaw({\\n        ...this._options.zlibDeflateOptions,\\n        windowBits\\n      });\\n\\n      this._deflate[kTotalLength] = 0;\\n      this._deflate[kBuffers] = [];\\n\\n      this._deflate.on('data', deflateOnData);\\n    }\\n\\n    this._deflate[kCallback] = callback;\\n\\n    this._deflate.write(data);\\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\\n      if (!this._deflate) {\\n        //\\n        // The deflate stream was closed while data was being processed.\\n        //\\n        return;\\n      }\\n\\n      let data = bufferUtil.concat(\\n        this._deflate[kBuffers],\\n        this._deflate[kTotalLength]\\n      );\\n\\n      if (fin) data = data.slice(0, data.length - 4);\\n\\n      //\\n      // Ensure that the callback will not be called again in\\n      // `PerMessageDeflate#cleanup()`.\\n      //\\n      this._deflate[kCallback] = null;\\n\\n      this._deflate[kTotalLength] = 0;\\n      this._deflate[kBuffers] = [];\\n\\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\\n        this._deflate.reset();\\n      }\\n\\n      callback(null, data);\\n    });\\n  }\\n}\\n\\nmodule.exports = PerMessageDeflate;\\n\\n/**\\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\\n *\\n * @param {Buffer} chunk A chunk of data\\n * @private\\n */\\nfunction deflateOnData(chunk) {\\n  this[kBuffers].push(chunk);\\n  this[kTotalLength] += chunk.length;\\n}\\n\\n/**\\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\\n *\\n * @param {Buffer} chunk A chunk of data\\n * @private\\n */\\nfunction inflateOnData(chunk) {\\n  this[kTotalLength] += chunk.length;\\n\\n  if (\\n    this[kPerMessageDeflate]._maxPayload < 1 ||\\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\\n  ) {\\n    this[kBuffers].push(chunk);\\n    return;\\n  }\\n\\n  this[kError] = new RangeError('Max payload size exceeded');\\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\\n  this[kError][kStatusCode] = 1009;\\n  this.removeListener('data', inflateOnData);\\n  this.reset();\\n}\\n\\n/**\\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\\n *\\n * @param {Error} err The emitted error\\n * @private\\n */\\nfunction inflateOnError(err) {\\n  //\\n  // There is no need to call `Zlib#close()` as the handle is automatically\\n  // closed when an error is emitted.\\n  //\\n  this[kPerMessageDeflate]._inflate = null;\\n  err[kStatusCode] = 1007;\\n  this[kCallback](err);\\n}\\n\",\"filename\":\"/node_modules/ws/lib/permessage-deflate.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst kDone = Symbol('kDone');\\nconst kRun = Symbol('kRun');\\n\\n/**\\n * A very simple job queue with adjustable concurrency. Adapted from\\n * https://github.com/STRML/async-limiter\\n */\\nclass Limiter {\\n  /**\\n   * Creates a new `Limiter`.\\n   *\\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\\n   *     to run concurrently\\n   */\\n  constructor(concurrency) {\\n    this[kDone] = () => {\\n      this.pending--;\\n      this[kRun]();\\n    };\\n    this.concurrency = concurrency || Infinity;\\n    this.jobs = [];\\n    this.pending = 0;\\n  }\\n\\n  /**\\n   * Adds a job to the queue.\\n   *\\n   * @param {Function} job The job to run\\n   * @public\\n   */\\n  add(job) {\\n    this.jobs.push(job);\\n    this[kRun]();\\n  }\\n\\n  /**\\n   * Removes a job from the queue and runs it if possible.\\n   *\\n   * @private\\n   */\\n  [kRun]() {\\n    if (this.pending === this.concurrency) return;\\n\\n    if (this.jobs.length) {\\n      const job = this.jobs.shift();\\n\\n      this.pending++;\\n      job(this[kDone]);\\n    }\\n  }\\n}\\n\\nmodule.exports = Limiter;\\n\",\"filename\":\"/node_modules/ws/lib/limiter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst { tokenChars } = require('./validation');\\n\\n/**\\n * Adds an offer to the map of extension offers or a parameter to the map of\\n * parameters.\\n *\\n * @param {Object} dest The map of extension offers or parameters\\n * @param {String} name The extension or parameter name\\n * @param {(Object|Boolean|String)} elem The extension parameters or the\\n *     parameter value\\n * @private\\n */\\nfunction push(dest, name, elem) {\\n  if (dest[name] === undefined) dest[name] = [elem];\\n  else dest[name].push(elem);\\n}\\n\\n/**\\n * Parses the `Sec-WebSocket-Extensions` header into an object.\\n *\\n * @param {String} header The field value of the header\\n * @return {Object} The parsed object\\n * @public\\n */\\nfunction parse(header) {\\n  const offers = Object.create(null);\\n  let params = Object.create(null);\\n  let mustUnescape = false;\\n  let isEscaping = false;\\n  let inQuotes = false;\\n  let extensionName;\\n  let paramName;\\n  let start = -1;\\n  let code = -1;\\n  let end = -1;\\n  let i = 0;\\n\\n  for (; i < header.length; i++) {\\n    code = header.charCodeAt(i);\\n\\n    if (extensionName === undefined) {\\n      if (end === -1 && tokenChars[code] === 1) {\\n        if (start === -1) start = i;\\n      } else if (\\n        i !== 0 &&\\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\\\t' */\\n      ) {\\n        if (end === -1 && start !== -1) end = i;\\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\\n        if (start === -1) {\\n          throw new SyntaxError(`Unexpected character at index ${i}`);\\n        }\\n\\n        if (end === -1) end = i;\\n        const name = header.slice(start, end);\\n        if (code === 0x2c) {\\n          push(offers, name, params);\\n          params = Object.create(null);\\n        } else {\\n          extensionName = name;\\n        }\\n\\n        start = end = -1;\\n      } else {\\n        throw new SyntaxError(`Unexpected character at index ${i}`);\\n      }\\n    } else if (paramName === undefined) {\\n      if (end === -1 && tokenChars[code] === 1) {\\n        if (start === -1) start = i;\\n      } else if (code === 0x20 || code === 0x09) {\\n        if (end === -1 && start !== -1) end = i;\\n      } else if (code === 0x3b || code === 0x2c) {\\n        if (start === -1) {\\n          throw new SyntaxError(`Unexpected character at index ${i}`);\\n        }\\n\\n        if (end === -1) end = i;\\n        push(params, header.slice(start, end), true);\\n        if (code === 0x2c) {\\n          push(offers, extensionName, params);\\n          params = Object.create(null);\\n          extensionName = undefined;\\n        }\\n\\n        start = end = -1;\\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\\n        paramName = header.slice(start, i);\\n        start = end = -1;\\n      } else {\\n        throw new SyntaxError(`Unexpected character at index ${i}`);\\n      }\\n    } else {\\n      //\\n      // The value of a quoted-string after unescaping must conform to the\\n      // token ABNF, so only token characters are valid.\\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\\n      //\\n      if (isEscaping) {\\n        if (tokenChars[code] !== 1) {\\n          throw new SyntaxError(`Unexpected character at index ${i}`);\\n        }\\n        if (start === -1) start = i;\\n        else if (!mustUnescape) mustUnescape = true;\\n        isEscaping = false;\\n      } else if (inQuotes) {\\n        if (tokenChars[code] === 1) {\\n          if (start === -1) start = i;\\n        } else if (code === 0x22 /* '\\\"' */ && start !== -1) {\\n          inQuotes = false;\\n          end = i;\\n        } else if (code === 0x5c /* '\\\\' */) {\\n          isEscaping = true;\\n        } else {\\n          throw new SyntaxError(`Unexpected character at index ${i}`);\\n        }\\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\\n        inQuotes = true;\\n      } else if (end === -1 && tokenChars[code] === 1) {\\n        if (start === -1) start = i;\\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\\n        if (end === -1) end = i;\\n      } else if (code === 0x3b || code === 0x2c) {\\n        if (start === -1) {\\n          throw new SyntaxError(`Unexpected character at index ${i}`);\\n        }\\n\\n        if (end === -1) end = i;\\n        let value = header.slice(start, end);\\n        if (mustUnescape) {\\n          value = value.replace(/\\\\\\\\/g, '');\\n          mustUnescape = false;\\n        }\\n        push(params, paramName, value);\\n        if (code === 0x2c) {\\n          push(offers, extensionName, params);\\n          params = Object.create(null);\\n          extensionName = undefined;\\n        }\\n\\n        paramName = undefined;\\n        start = end = -1;\\n      } else {\\n        throw new SyntaxError(`Unexpected character at index ${i}`);\\n      }\\n    }\\n  }\\n\\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\\n    throw new SyntaxError('Unexpected end of input');\\n  }\\n\\n  if (end === -1) end = i;\\n  const token = header.slice(start, end);\\n  if (extensionName === undefined) {\\n    push(offers, token, params);\\n  } else {\\n    if (paramName === undefined) {\\n      push(params, token, true);\\n    } else if (mustUnescape) {\\n      push(params, paramName, token.replace(/\\\\\\\\/g, ''));\\n    } else {\\n      push(params, paramName, token);\\n    }\\n    push(offers, extensionName, params);\\n  }\\n\\n  return offers;\\n}\\n\\n/**\\n * Builds the `Sec-WebSocket-Extensions` header field value.\\n *\\n * @param {Object} extensions The map of extensions and parameters to format\\n * @return {String} A string representing the given object\\n * @public\\n */\\nfunction format(extensions) {\\n  return Object.keys(extensions)\\n    .map((extension) => {\\n      let configurations = extensions[extension];\\n      if (!Array.isArray(configurations)) configurations = [configurations];\\n      return configurations\\n        .map((params) => {\\n          return [extension]\\n            .concat(\\n              Object.keys(params).map((k) => {\\n                let values = params[k];\\n                if (!Array.isArray(values)) values = [values];\\n                return values\\n                  .map((v) => (v === true ? k : `${k}=${v}`))\\n                  .join('; ');\\n              })\\n            )\\n            .join('; ');\\n        })\\n        .join(', ');\\n    })\\n    .join(', ');\\n}\\n\\nmodule.exports = { format, parse };\\n\",\"filename\":\"/node_modules/ws/lib/extension.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst { Writable } = require('stream');\\n\\nconst PerMessageDeflate = require('./permessage-deflate');\\nconst {\\n  BINARY_TYPES,\\n  EMPTY_BUFFER,\\n  kStatusCode,\\n  kWebSocket\\n} = require('./constants');\\nconst { concat, toArrayBuffer, unmask } = require('./buffer-util');\\nconst { isValidStatusCode, isValidUTF8 } = require('./validation');\\n\\nconst GET_INFO = 0;\\nconst GET_PAYLOAD_LENGTH_16 = 1;\\nconst GET_PAYLOAD_LENGTH_64 = 2;\\nconst GET_MASK = 3;\\nconst GET_DATA = 4;\\nconst INFLATING = 5;\\n\\n/**\\n * HyBi Receiver implementation.\\n *\\n * @extends Writable\\n */\\nclass Receiver extends Writable {\\n  /**\\n   * Creates a Receiver instance.\\n   *\\n   * @param {Object} [options] Options object\\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\\n   * @param {Object} [options.extensions] An object containing the negotiated\\n   *     extensions\\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\\n   *     client or server mode\\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\\n   *     not to skip UTF-8 validation for text and close messages\\n   */\\n  constructor(options = {}) {\\n    super();\\n\\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\\n    this._extensions = options.extensions || {};\\n    this._isServer = !!options.isServer;\\n    this._maxPayload = options.maxPayload | 0;\\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\\n    this[kWebSocket] = undefined;\\n\\n    this._bufferedBytes = 0;\\n    this._buffers = [];\\n\\n    this._compressed = false;\\n    this._payloadLength = 0;\\n    this._mask = undefined;\\n    this._fragmented = 0;\\n    this._masked = false;\\n    this._fin = false;\\n    this._opcode = 0;\\n\\n    this._totalPayloadLength = 0;\\n    this._messageLength = 0;\\n    this._fragments = [];\\n\\n    this._state = GET_INFO;\\n    this._loop = false;\\n  }\\n\\n  /**\\n   * Implements `Writable.prototype._write()`.\\n   *\\n   * @param {Buffer} chunk The chunk of data to write\\n   * @param {String} encoding The character encoding of `chunk`\\n   * @param {Function} cb Callback\\n   * @private\\n   */\\n  _write(chunk, encoding, cb) {\\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\\n\\n    this._bufferedBytes += chunk.length;\\n    this._buffers.push(chunk);\\n    this.startLoop(cb);\\n  }\\n\\n  /**\\n   * Consumes `n` bytes from the buffered data.\\n   *\\n   * @param {Number} n The number of bytes to consume\\n   * @return {Buffer} The consumed bytes\\n   * @private\\n   */\\n  consume(n) {\\n    this._bufferedBytes -= n;\\n\\n    if (n === this._buffers[0].length) return this._buffers.shift();\\n\\n    if (n < this._buffers[0].length) {\\n      const buf = this._buffers[0];\\n      this._buffers[0] = buf.slice(n);\\n      return buf.slice(0, n);\\n    }\\n\\n    const dst = Buffer.allocUnsafe(n);\\n\\n    do {\\n      const buf = this._buffers[0];\\n      const offset = dst.length - n;\\n\\n      if (n >= buf.length) {\\n        dst.set(this._buffers.shift(), offset);\\n      } else {\\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\\n        this._buffers[0] = buf.slice(n);\\n      }\\n\\n      n -= buf.length;\\n    } while (n > 0);\\n\\n    return dst;\\n  }\\n\\n  /**\\n   * Starts the parsing loop.\\n   *\\n   * @param {Function} cb Callback\\n   * @private\\n   */\\n  startLoop(cb) {\\n    let err;\\n    this._loop = true;\\n\\n    do {\\n      switch (this._state) {\\n        case GET_INFO:\\n          err = this.getInfo();\\n          break;\\n        case GET_PAYLOAD_LENGTH_16:\\n          err = this.getPayloadLength16();\\n          break;\\n        case GET_PAYLOAD_LENGTH_64:\\n          err = this.getPayloadLength64();\\n          break;\\n        case GET_MASK:\\n          this.getMask();\\n          break;\\n        case GET_DATA:\\n          err = this.getData(cb);\\n          break;\\n        default:\\n          // `INFLATING`\\n          this._loop = false;\\n          return;\\n      }\\n    } while (this._loop);\\n\\n    cb(err);\\n  }\\n\\n  /**\\n   * Reads the first two bytes of a frame.\\n   *\\n   * @return {(RangeError|undefined)} A possible error\\n   * @private\\n   */\\n  getInfo() {\\n    if (this._bufferedBytes < 2) {\\n      this._loop = false;\\n      return;\\n    }\\n\\n    const buf = this.consume(2);\\n\\n    if ((buf[0] & 0x30) !== 0x00) {\\n      this._loop = false;\\n      return error(\\n        RangeError,\\n        'RSV2 and RSV3 must be clear',\\n        true,\\n        1002,\\n        'WS_ERR_UNEXPECTED_RSV_2_3'\\n      );\\n    }\\n\\n    const compressed = (buf[0] & 0x40) === 0x40;\\n\\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\\n      this._loop = false;\\n      return error(\\n        RangeError,\\n        'RSV1 must be clear',\\n        true,\\n        1002,\\n        'WS_ERR_UNEXPECTED_RSV_1'\\n      );\\n    }\\n\\n    this._fin = (buf[0] & 0x80) === 0x80;\\n    this._opcode = buf[0] & 0x0f;\\n    this._payloadLength = buf[1] & 0x7f;\\n\\n    if (this._opcode === 0x00) {\\n      if (compressed) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          'RSV1 must be clear',\\n          true,\\n          1002,\\n          'WS_ERR_UNEXPECTED_RSV_1'\\n        );\\n      }\\n\\n      if (!this._fragmented) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          'invalid opcode 0',\\n          true,\\n          1002,\\n          'WS_ERR_INVALID_OPCODE'\\n        );\\n      }\\n\\n      this._opcode = this._fragmented;\\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\\n      if (this._fragmented) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          `invalid opcode ${this._opcode}`,\\n          true,\\n          1002,\\n          'WS_ERR_INVALID_OPCODE'\\n        );\\n      }\\n\\n      this._compressed = compressed;\\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\\n      if (!this._fin) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          'FIN must be set',\\n          true,\\n          1002,\\n          'WS_ERR_EXPECTED_FIN'\\n        );\\n      }\\n\\n      if (compressed) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          'RSV1 must be clear',\\n          true,\\n          1002,\\n          'WS_ERR_UNEXPECTED_RSV_1'\\n        );\\n      }\\n\\n      if (this._payloadLength > 0x7d) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          `invalid payload length ${this._payloadLength}`,\\n          true,\\n          1002,\\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\\n        );\\n      }\\n    } else {\\n      this._loop = false;\\n      return error(\\n        RangeError,\\n        `invalid opcode ${this._opcode}`,\\n        true,\\n        1002,\\n        'WS_ERR_INVALID_OPCODE'\\n      );\\n    }\\n\\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\\n    this._masked = (buf[1] & 0x80) === 0x80;\\n\\n    if (this._isServer) {\\n      if (!this._masked) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          'MASK must be set',\\n          true,\\n          1002,\\n          'WS_ERR_EXPECTED_MASK'\\n        );\\n      }\\n    } else if (this._masked) {\\n      this._loop = false;\\n      return error(\\n        RangeError,\\n        'MASK must be clear',\\n        true,\\n        1002,\\n        'WS_ERR_UNEXPECTED_MASK'\\n      );\\n    }\\n\\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\\n    else return this.haveLength();\\n  }\\n\\n  /**\\n   * Gets extended payload length (7+16).\\n   *\\n   * @return {(RangeError|undefined)} A possible error\\n   * @private\\n   */\\n  getPayloadLength16() {\\n    if (this._bufferedBytes < 2) {\\n      this._loop = false;\\n      return;\\n    }\\n\\n    this._payloadLength = this.consume(2).readUInt16BE(0);\\n    return this.haveLength();\\n  }\\n\\n  /**\\n   * Gets extended payload length (7+64).\\n   *\\n   * @return {(RangeError|undefined)} A possible error\\n   * @private\\n   */\\n  getPayloadLength64() {\\n    if (this._bufferedBytes < 8) {\\n      this._loop = false;\\n      return;\\n    }\\n\\n    const buf = this.consume(8);\\n    const num = buf.readUInt32BE(0);\\n\\n    //\\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\\n    // if payload length is greater than this number.\\n    //\\n    if (num > Math.pow(2, 53 - 32) - 1) {\\n      this._loop = false;\\n      return error(\\n        RangeError,\\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\\n        false,\\n        1009,\\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\\n      );\\n    }\\n\\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\\n    return this.haveLength();\\n  }\\n\\n  /**\\n   * Payload length has been read.\\n   *\\n   * @return {(RangeError|undefined)} A possible error\\n   * @private\\n   */\\n  haveLength() {\\n    if (this._payloadLength && this._opcode < 0x08) {\\n      this._totalPayloadLength += this._payloadLength;\\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\\n        this._loop = false;\\n        return error(\\n          RangeError,\\n          'Max payload size exceeded',\\n          false,\\n          1009,\\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\\n        );\\n      }\\n    }\\n\\n    if (this._masked) this._state = GET_MASK;\\n    else this._state = GET_DATA;\\n  }\\n\\n  /**\\n   * Reads mask bytes.\\n   *\\n   * @private\\n   */\\n  getMask() {\\n    if (this._bufferedBytes < 4) {\\n      this._loop = false;\\n      return;\\n    }\\n\\n    this._mask = this.consume(4);\\n    this._state = GET_DATA;\\n  }\\n\\n  /**\\n   * Reads data bytes.\\n   *\\n   * @param {Function} cb Callback\\n   * @return {(Error|RangeError|undefined)} A possible error\\n   * @private\\n   */\\n  getData(cb) {\\n    let data = EMPTY_BUFFER;\\n\\n    if (this._payloadLength) {\\n      if (this._bufferedBytes < this._payloadLength) {\\n        this._loop = false;\\n        return;\\n      }\\n\\n      data = this.consume(this._payloadLength);\\n\\n      if (\\n        this._masked &&\\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\\n      ) {\\n        unmask(data, this._mask);\\n      }\\n    }\\n\\n    if (this._opcode > 0x07) return this.controlMessage(data);\\n\\n    if (this._compressed) {\\n      this._state = INFLATING;\\n      this.decompress(data, cb);\\n      return;\\n    }\\n\\n    if (data.length) {\\n      //\\n      // This message is not compressed so its length is the sum of the payload\\n      // length of all fragments.\\n      //\\n      this._messageLength = this._totalPayloadLength;\\n      this._fragments.push(data);\\n    }\\n\\n    return this.dataMessage();\\n  }\\n\\n  /**\\n   * Decompresses data.\\n   *\\n   * @param {Buffer} data Compressed data\\n   * @param {Function} cb Callback\\n   * @private\\n   */\\n  decompress(data, cb) {\\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\\n\\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\\n      if (err) return cb(err);\\n\\n      if (buf.length) {\\n        this._messageLength += buf.length;\\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\\n          return cb(\\n            error(\\n              RangeError,\\n              'Max payload size exceeded',\\n              false,\\n              1009,\\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\\n            )\\n          );\\n        }\\n\\n        this._fragments.push(buf);\\n      }\\n\\n      const er = this.dataMessage();\\n      if (er) return cb(er);\\n\\n      this.startLoop(cb);\\n    });\\n  }\\n\\n  /**\\n   * Handles a data message.\\n   *\\n   * @return {(Error|undefined)} A possible error\\n   * @private\\n   */\\n  dataMessage() {\\n    if (this._fin) {\\n      const messageLength = this._messageLength;\\n      const fragments = this._fragments;\\n\\n      this._totalPayloadLength = 0;\\n      this._messageLength = 0;\\n      this._fragmented = 0;\\n      this._fragments = [];\\n\\n      if (this._opcode === 2) {\\n        let data;\\n\\n        if (this._binaryType === 'nodebuffer') {\\n          data = concat(fragments, messageLength);\\n        } else if (this._binaryType === 'arraybuffer') {\\n          data = toArrayBuffer(concat(fragments, messageLength));\\n        } else {\\n          data = fragments;\\n        }\\n\\n        this.emit('message', data, true);\\n      } else {\\n        const buf = concat(fragments, messageLength);\\n\\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\\n          this._loop = false;\\n          return error(\\n            Error,\\n            'invalid UTF-8 sequence',\\n            true,\\n            1007,\\n            'WS_ERR_INVALID_UTF8'\\n          );\\n        }\\n\\n        this.emit('message', buf, false);\\n      }\\n    }\\n\\n    this._state = GET_INFO;\\n  }\\n\\n  /**\\n   * Handles a control message.\\n   *\\n   * @param {Buffer} data Data to handle\\n   * @return {(Error|RangeError|undefined)} A possible error\\n   * @private\\n   */\\n  controlMessage(data) {\\n    if (this._opcode === 0x08) {\\n      this._loop = false;\\n\\n      if (data.length === 0) {\\n        this.emit('conclude', 1005, EMPTY_BUFFER);\\n        this.end();\\n      } else if (data.length === 1) {\\n        return error(\\n          RangeError,\\n          'invalid payload length 1',\\n          true,\\n          1002,\\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\\n        );\\n      } else {\\n        const code = data.readUInt16BE(0);\\n\\n        if (!isValidStatusCode(code)) {\\n          return error(\\n            RangeError,\\n            `invalid status code ${code}`,\\n            true,\\n            1002,\\n            'WS_ERR_INVALID_CLOSE_CODE'\\n          );\\n        }\\n\\n        const buf = data.slice(2);\\n\\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\\n          return error(\\n            Error,\\n            'invalid UTF-8 sequence',\\n            true,\\n            1007,\\n            'WS_ERR_INVALID_UTF8'\\n          );\\n        }\\n\\n        this.emit('conclude', code, buf);\\n        this.end();\\n      }\\n    } else if (this._opcode === 0x09) {\\n      this.emit('ping', data);\\n    } else {\\n      this.emit('pong', data);\\n    }\\n\\n    this._state = GET_INFO;\\n  }\\n}\\n\\nmodule.exports = Receiver;\\n\\n/**\\n * Builds an error object.\\n *\\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\\n * @param {String} message The error message\\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\\n *     `message`\\n * @param {Number} statusCode The status code\\n * @param {String} errorCode The exposed error code\\n * @return {(Error|RangeError)} The error\\n * @private\\n */\\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\\n  const err = new ErrorCtor(\\n    prefix ? `Invalid WebSocket frame: ${message}` : message\\n  );\\n\\n  Error.captureStackTrace(err, error);\\n  err.code = errorCode;\\n  err[kStatusCode] = statusCode;\\n  return err;\\n}\\n\",\"filename\":\"/node_modules/ws/lib/receiver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst { Duplex } = require('stream');\\n\\n/**\\n * Emits the `'close'` event on a stream.\\n *\\n * @param {Duplex} stream The stream.\\n * @private\\n */\\nfunction emitClose(stream) {\\n  stream.emit('close');\\n}\\n\\n/**\\n * The listener of the `'end'` event.\\n *\\n * @private\\n */\\nfunction duplexOnEnd() {\\n  if (!this.destroyed && this._writableState.finished) {\\n    this.destroy();\\n  }\\n}\\n\\n/**\\n * The listener of the `'error'` event.\\n *\\n * @param {Error} err The error\\n * @private\\n */\\nfunction duplexOnError(err) {\\n  this.removeListener('error', duplexOnError);\\n  this.destroy();\\n  if (this.listenerCount('error') === 0) {\\n    // Do not suppress the throwing behavior.\\n    this.emit('error', err);\\n  }\\n}\\n\\n/**\\n * Wraps a `WebSocket` in a duplex stream.\\n *\\n * @param {WebSocket} ws The `WebSocket` to wrap\\n * @param {Object} [options] The options for the `Duplex` constructor\\n * @return {Duplex} The duplex stream\\n * @public\\n */\\nfunction createWebSocketStream(ws, options) {\\n  let terminateOnDestroy = true;\\n\\n  const duplex = new Duplex({\\n    ...options,\\n    autoDestroy: false,\\n    emitClose: false,\\n    objectMode: false,\\n    writableObjectMode: false\\n  });\\n\\n  ws.on('message', function message(msg, isBinary) {\\n    const data =\\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\\n\\n    if (!duplex.push(data)) ws.pause();\\n  });\\n\\n  ws.once('error', function error(err) {\\n    if (duplex.destroyed) return;\\n\\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\\n    //\\n    // - If the `'error'` event is emitted before the `'open'` event, then\\n    //   `ws.terminate()` is a noop as no socket is assigned.\\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\\n    //   event of the `Receiver` object. The listener already closes the\\n    //   connection by calling `ws.close()`. This allows a close frame to be\\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\\n    //   then the close frame might not be sent.\\n    terminateOnDestroy = false;\\n    duplex.destroy(err);\\n  });\\n\\n  ws.once('close', function close() {\\n    if (duplex.destroyed) return;\\n\\n    duplex.push(null);\\n  });\\n\\n  duplex._destroy = function (err, callback) {\\n    if (ws.readyState === ws.CLOSED) {\\n      callback(err);\\n      process.nextTick(emitClose, duplex);\\n      return;\\n    }\\n\\n    let called = false;\\n\\n    ws.once('error', function error(err) {\\n      called = true;\\n      callback(err);\\n    });\\n\\n    ws.once('close', function close() {\\n      if (!called) callback(err);\\n      process.nextTick(emitClose, duplex);\\n    });\\n\\n    if (terminateOnDestroy) ws.terminate();\\n  };\\n\\n  duplex._final = function (callback) {\\n    if (ws.readyState === ws.CONNECTING) {\\n      ws.once('open', function open() {\\n        duplex._final(callback);\\n      });\\n      return;\\n    }\\n\\n    // If the value of the `_socket` property is `null` it means that `ws` is a\\n    // client websocket and the handshake failed. In fact, when this happens, a\\n    // socket is never assigned to the websocket. Wait for the `'error'` event\\n    // that will be emitted by the websocket.\\n    if (ws._socket === null) return;\\n\\n    if (ws._socket._writableState.finished) {\\n      callback();\\n      if (duplex._readableState.endEmitted) duplex.destroy();\\n    } else {\\n      ws._socket.once('finish', function finish() {\\n        // `duplex` is not destroyed here because the `'end'` event will be\\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\\n        callback();\\n      });\\n      ws.close();\\n    }\\n  };\\n\\n  duplex._read = function () {\\n    if (ws.isPaused) ws.resume();\\n  };\\n\\n  duplex._write = function (chunk, encoding, callback) {\\n    if (ws.readyState === ws.CONNECTING) {\\n      ws.once('open', function open() {\\n        duplex._write(chunk, encoding, callback);\\n      });\\n      return;\\n    }\\n\\n    ws.send(chunk, callback);\\n  };\\n\\n  duplex.on('end', duplexOnEnd);\\n  duplex.on('error', duplexOnError);\\n  return duplex;\\n}\\n\\nmodule.exports = createWebSocketStream;\\n\",\"filename\":\"/node_modules/ws/lib/stream.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint no-unused-vars: [\\\"error\\\", { \\\"varsIgnorePattern\\\": \\\"^net|tls$\\\" }] */\\n\\n'use strict';\\n\\nconst net = require('net');\\nconst tls = require('tls');\\nconst { randomFillSync } = require('crypto');\\n\\nconst PerMessageDeflate = require('./permessage-deflate');\\nconst { EMPTY_BUFFER } = require('./constants');\\nconst { isValidStatusCode } = require('./validation');\\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\\n\\nconst kByteLength = Symbol('kByteLength');\\nconst maskBuffer = Buffer.alloc(4);\\n\\n/**\\n * HyBi Sender implementation.\\n */\\nclass Sender {\\n  /**\\n   * Creates a Sender instance.\\n   *\\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\\n   * @param {Object} [extensions] An object containing the negotiated extensions\\n   * @param {Function} [generateMask] The function used to generate the masking\\n   *     key\\n   */\\n  constructor(socket, extensions, generateMask) {\\n    this._extensions = extensions || {};\\n\\n    if (generateMask) {\\n      this._generateMask = generateMask;\\n      this._maskBuffer = Buffer.alloc(4);\\n    }\\n\\n    this._socket = socket;\\n\\n    this._firstFragment = true;\\n    this._compress = false;\\n\\n    this._bufferedBytes = 0;\\n    this._deflating = false;\\n    this._queue = [];\\n  }\\n\\n  /**\\n   * Frames a piece of data according to the HyBi WebSocket protocol.\\n   *\\n   * @param {(Buffer|String)} data The data to frame\\n   * @param {Object} options Options object\\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\\n   *     FIN bit\\n   * @param {Function} [options.generateMask] The function used to generate the\\n   *     masking key\\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\\n   *     `data`\\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\\n   *     key\\n   * @param {Number} options.opcode The opcode\\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\\n   *     modified\\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\\n   *     RSV1 bit\\n   * @return {(Buffer|String)[]} The framed data\\n   * @public\\n   */\\n  static frame(data, options) {\\n    let mask;\\n    let merge = false;\\n    let offset = 2;\\n    let skipMasking = false;\\n\\n    if (options.mask) {\\n      mask = options.maskBuffer || maskBuffer;\\n\\n      if (options.generateMask) {\\n        options.generateMask(mask);\\n      } else {\\n        randomFillSync(mask, 0, 4);\\n      }\\n\\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\\n      offset = 6;\\n    }\\n\\n    let dataLength;\\n\\n    if (typeof data === 'string') {\\n      if (\\n        (!options.mask || skipMasking) &&\\n        options[kByteLength] !== undefined\\n      ) {\\n        dataLength = options[kByteLength];\\n      } else {\\n        data = Buffer.from(data);\\n        dataLength = data.length;\\n      }\\n    } else {\\n      dataLength = data.length;\\n      merge = options.mask && options.readOnly && !skipMasking;\\n    }\\n\\n    let payloadLength = dataLength;\\n\\n    if (dataLength >= 65536) {\\n      offset += 8;\\n      payloadLength = 127;\\n    } else if (dataLength > 125) {\\n      offset += 2;\\n      payloadLength = 126;\\n    }\\n\\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\\n\\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\\n    if (options.rsv1) target[0] |= 0x40;\\n\\n    target[1] = payloadLength;\\n\\n    if (payloadLength === 126) {\\n      target.writeUInt16BE(dataLength, 2);\\n    } else if (payloadLength === 127) {\\n      target[2] = target[3] = 0;\\n      target.writeUIntBE(dataLength, 4, 6);\\n    }\\n\\n    if (!options.mask) return [target, data];\\n\\n    target[1] |= 0x80;\\n    target[offset - 4] = mask[0];\\n    target[offset - 3] = mask[1];\\n    target[offset - 2] = mask[2];\\n    target[offset - 1] = mask[3];\\n\\n    if (skipMasking) return [target, data];\\n\\n    if (merge) {\\n      applyMask(data, mask, target, offset, dataLength);\\n      return [target];\\n    }\\n\\n    applyMask(data, mask, data, 0, dataLength);\\n    return [target, data];\\n  }\\n\\n  /**\\n   * Sends a close message to the other peer.\\n   *\\n   * @param {Number} [code] The status code component of the body\\n   * @param {(String|Buffer)} [data] The message component of the body\\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\\n   * @param {Function} [cb] Callback\\n   * @public\\n   */\\n  close(code, data, mask, cb) {\\n    let buf;\\n\\n    if (code === undefined) {\\n      buf = EMPTY_BUFFER;\\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\\n      throw new TypeError('First argument must be a valid error code number');\\n    } else if (data === undefined || !data.length) {\\n      buf = Buffer.allocUnsafe(2);\\n      buf.writeUInt16BE(code, 0);\\n    } else {\\n      const length = Buffer.byteLength(data);\\n\\n      if (length > 123) {\\n        throw new RangeError('The message must not be greater than 123 bytes');\\n      }\\n\\n      buf = Buffer.allocUnsafe(2 + length);\\n      buf.writeUInt16BE(code, 0);\\n\\n      if (typeof data === 'string') {\\n        buf.write(data, 2);\\n      } else {\\n        buf.set(data, 2);\\n      }\\n    }\\n\\n    const options = {\\n      [kByteLength]: buf.length,\\n      fin: true,\\n      generateMask: this._generateMask,\\n      mask,\\n      maskBuffer: this._maskBuffer,\\n      opcode: 0x08,\\n      readOnly: false,\\n      rsv1: false\\n    };\\n\\n    if (this._deflating) {\\n      this.enqueue([this.dispatch, buf, false, options, cb]);\\n    } else {\\n      this.sendFrame(Sender.frame(buf, options), cb);\\n    }\\n  }\\n\\n  /**\\n   * Sends a ping message to the other peer.\\n   *\\n   * @param {*} data The message to send\\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\\n   * @param {Function} [cb] Callback\\n   * @public\\n   */\\n  ping(data, mask, cb) {\\n    let byteLength;\\n    let readOnly;\\n\\n    if (typeof data === 'string') {\\n      byteLength = Buffer.byteLength(data);\\n      readOnly = false;\\n    } else {\\n      data = toBuffer(data);\\n      byteLength = data.length;\\n      readOnly = toBuffer.readOnly;\\n    }\\n\\n    if (byteLength > 125) {\\n      throw new RangeError('The data size must not be greater than 125 bytes');\\n    }\\n\\n    const options = {\\n      [kByteLength]: byteLength,\\n      fin: true,\\n      generateMask: this._generateMask,\\n      mask,\\n      maskBuffer: this._maskBuffer,\\n      opcode: 0x09,\\n      readOnly,\\n      rsv1: false\\n    };\\n\\n    if (this._deflating) {\\n      this.enqueue([this.dispatch, data, false, options, cb]);\\n    } else {\\n      this.sendFrame(Sender.frame(data, options), cb);\\n    }\\n  }\\n\\n  /**\\n   * Sends a pong message to the other peer.\\n   *\\n   * @param {*} data The message to send\\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\\n   * @param {Function} [cb] Callback\\n   * @public\\n   */\\n  pong(data, mask, cb) {\\n    let byteLength;\\n    let readOnly;\\n\\n    if (typeof data === 'string') {\\n      byteLength = Buffer.byteLength(data);\\n      readOnly = false;\\n    } else {\\n      data = toBuffer(data);\\n      byteLength = data.length;\\n      readOnly = toBuffer.readOnly;\\n    }\\n\\n    if (byteLength > 125) {\\n      throw new RangeError('The data size must not be greater than 125 bytes');\\n    }\\n\\n    const options = {\\n      [kByteLength]: byteLength,\\n      fin: true,\\n      generateMask: this._generateMask,\\n      mask,\\n      maskBuffer: this._maskBuffer,\\n      opcode: 0x0a,\\n      readOnly,\\n      rsv1: false\\n    };\\n\\n    if (this._deflating) {\\n      this.enqueue([this.dispatch, data, false, options, cb]);\\n    } else {\\n      this.sendFrame(Sender.frame(data, options), cb);\\n    }\\n  }\\n\\n  /**\\n   * Sends a data message to the other peer.\\n   *\\n   * @param {*} data The message to send\\n   * @param {Object} options Options object\\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\\n   *     or text\\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\\n   *     compress `data`\\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\\n   *     last one\\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\\n   *     `data`\\n   * @param {Function} [cb] Callback\\n   * @public\\n   */\\n  send(data, options, cb) {\\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\\n    let opcode = options.binary ? 2 : 1;\\n    let rsv1 = options.compress;\\n\\n    let byteLength;\\n    let readOnly;\\n\\n    if (typeof data === 'string') {\\n      byteLength = Buffer.byteLength(data);\\n      readOnly = false;\\n    } else {\\n      data = toBuffer(data);\\n      byteLength = data.length;\\n      readOnly = toBuffer.readOnly;\\n    }\\n\\n    if (this._firstFragment) {\\n      this._firstFragment = false;\\n      if (\\n        rsv1 &&\\n        perMessageDeflate &&\\n        perMessageDeflate.params[\\n          perMessageDeflate._isServer\\n            ? 'server_no_context_takeover'\\n            : 'client_no_context_takeover'\\n        ]\\n      ) {\\n        rsv1 = byteLength >= perMessageDeflate._threshold;\\n      }\\n      this._compress = rsv1;\\n    } else {\\n      rsv1 = false;\\n      opcode = 0;\\n    }\\n\\n    if (options.fin) this._firstFragment = true;\\n\\n    if (perMessageDeflate) {\\n      const opts = {\\n        [kByteLength]: byteLength,\\n        fin: options.fin,\\n        generateMask: this._generateMask,\\n        mask: options.mask,\\n        maskBuffer: this._maskBuffer,\\n        opcode,\\n        readOnly,\\n        rsv1\\n      };\\n\\n      if (this._deflating) {\\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\\n      } else {\\n        this.dispatch(data, this._compress, opts, cb);\\n      }\\n    } else {\\n      this.sendFrame(\\n        Sender.frame(data, {\\n          [kByteLength]: byteLength,\\n          fin: options.fin,\\n          generateMask: this._generateMask,\\n          mask: options.mask,\\n          maskBuffer: this._maskBuffer,\\n          opcode,\\n          readOnly,\\n          rsv1: false\\n        }),\\n        cb\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Dispatches a message.\\n   *\\n   * @param {(Buffer|String)} data The message to send\\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\\n   *     `data`\\n   * @param {Object} options Options object\\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\\n   *     FIN bit\\n   * @param {Function} [options.generateMask] The function used to generate the\\n   *     masking key\\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\\n   *     `data`\\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\\n   *     key\\n   * @param {Number} options.opcode The opcode\\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\\n   *     modified\\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\\n   *     RSV1 bit\\n   * @param {Function} [cb] Callback\\n   * @private\\n   */\\n  dispatch(data, compress, options, cb) {\\n    if (!compress) {\\n      this.sendFrame(Sender.frame(data, options), cb);\\n      return;\\n    }\\n\\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\\n\\n    this._bufferedBytes += options[kByteLength];\\n    this._deflating = true;\\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\\n      if (this._socket.destroyed) {\\n        const err = new Error(\\n          'The socket was closed while data was being compressed'\\n        );\\n\\n        if (typeof cb === 'function') cb(err);\\n\\n        for (let i = 0; i < this._queue.length; i++) {\\n          const params = this._queue[i];\\n          const callback = params[params.length - 1];\\n\\n          if (typeof callback === 'function') callback(err);\\n        }\\n\\n        return;\\n      }\\n\\n      this._bufferedBytes -= options[kByteLength];\\n      this._deflating = false;\\n      options.readOnly = false;\\n      this.sendFrame(Sender.frame(buf, options), cb);\\n      this.dequeue();\\n    });\\n  }\\n\\n  /**\\n   * Executes queued send operations.\\n   *\\n   * @private\\n   */\\n  dequeue() {\\n    while (!this._deflating && this._queue.length) {\\n      const params = this._queue.shift();\\n\\n      this._bufferedBytes -= params[3][kByteLength];\\n      Reflect.apply(params[0], this, params.slice(1));\\n    }\\n  }\\n\\n  /**\\n   * Enqueues a send operation.\\n   *\\n   * @param {Array} params Send operation parameters.\\n   * @private\\n   */\\n  enqueue(params) {\\n    this._bufferedBytes += params[3][kByteLength];\\n    this._queue.push(params);\\n  }\\n\\n  /**\\n   * Sends a frame.\\n   *\\n   * @param {Buffer[]} list The frame to send\\n   * @param {Function} [cb] Callback\\n   * @private\\n   */\\n  sendFrame(list, cb) {\\n    if (list.length === 2) {\\n      this._socket.cork();\\n      this._socket.write(list[0]);\\n      this._socket.write(list[1], cb);\\n      this._socket.uncork();\\n    } else {\\n      this._socket.write(list[0], cb);\\n    }\\n  }\\n}\\n\\nmodule.exports = Sender;\\n\",\"filename\":\"/node_modules/ws/lib/sender.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\n//\\n// Allowed token characters:\\n//\\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\\n//\\n// tokenChars[32] === 0 // ' '\\n// tokenChars[33] === 1 // '!'\\n// tokenChars[34] === 0 // '\\\"'\\n// ...\\n//\\n// prettier-ignore\\nconst tokenChars = [\\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\\n];\\n\\n/**\\n * Checks if a status code is allowed in a close frame.\\n *\\n * @param {Number} code The status code\\n * @return {Boolean} `true` if the status code is valid, else `false`\\n * @public\\n */\\nfunction isValidStatusCode(code) {\\n  return (\\n    (code >= 1000 &&\\n      code <= 1014 &&\\n      code !== 1004 &&\\n      code !== 1005 &&\\n      code !== 1006) ||\\n    (code >= 3000 && code <= 4999)\\n  );\\n}\\n\\n/**\\n * Checks if a given buffer contains only correct UTF-8.\\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\\n * Markus Kuhn.\\n *\\n * @param {Buffer} buf The buffer to check\\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\\n * @public\\n */\\nfunction _isValidUTF8(buf) {\\n  const len = buf.length;\\n  let i = 0;\\n\\n  while (i < len) {\\n    if ((buf[i] & 0x80) === 0) {\\n      // 0xxxxxxx\\n      i++;\\n    } else if ((buf[i] & 0xe0) === 0xc0) {\\n      // 110xxxxx 10xxxxxx\\n      if (\\n        i + 1 === len ||\\n        (buf[i + 1] & 0xc0) !== 0x80 ||\\n        (buf[i] & 0xfe) === 0xc0 // Overlong\\n      ) {\\n        return false;\\n      }\\n\\n      i += 2;\\n    } else if ((buf[i] & 0xf0) === 0xe0) {\\n      // 1110xxxx 10xxxxxx 10xxxxxx\\n      if (\\n        i + 2 >= len ||\\n        (buf[i + 1] & 0xc0) !== 0x80 ||\\n        (buf[i + 2] & 0xc0) !== 0x80 ||\\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\\n      ) {\\n        return false;\\n      }\\n\\n      i += 3;\\n    } else if ((buf[i] & 0xf8) === 0xf0) {\\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\\n      if (\\n        i + 3 >= len ||\\n        (buf[i + 1] & 0xc0) !== 0x80 ||\\n        (buf[i + 2] & 0xc0) !== 0x80 ||\\n        (buf[i + 3] & 0xc0) !== 0x80 ||\\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\\n        buf[i] > 0xf4 // > U+10FFFF\\n      ) {\\n        return false;\\n      }\\n\\n      i += 4;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n\\nmodule.exports = {\\n  isValidStatusCode,\\n  isValidUTF8: _isValidUTF8,\\n  tokenChars\\n};\\n\\n/* istanbul ignore else  */\\nif (!process.env.WS_NO_UTF_8_VALIDATE) {\\n  try {\\n    const isValidUTF8 = require('utf-8-validate');\\n\\n    module.exports.isValidUTF8 = function (buf) {\\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\\n    };\\n  } catch (e) {\\n    // Continue regardless of the error.\\n  }\\n}\\n\",\"filename\":\"/node_modules/ws/lib/validation.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nconst { tokenChars } = require('./validation');\\n\\n/**\\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\\n *\\n * @param {String} header The field value of the header\\n * @return {Set} The subprotocol names\\n * @public\\n */\\nfunction parse(header) {\\n  const protocols = new Set();\\n  let start = -1;\\n  let end = -1;\\n  let i = 0;\\n\\n  for (i; i < header.length; i++) {\\n    const code = header.charCodeAt(i);\\n\\n    if (end === -1 && tokenChars[code] === 1) {\\n      if (start === -1) start = i;\\n    } else if (\\n      i !== 0 &&\\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\\\t' */\\n    ) {\\n      if (end === -1 && start !== -1) end = i;\\n    } else if (code === 0x2c /* ',' */) {\\n      if (start === -1) {\\n        throw new SyntaxError(`Unexpected character at index ${i}`);\\n      }\\n\\n      if (end === -1) end = i;\\n\\n      const protocol = header.slice(start, end);\\n\\n      if (protocols.has(protocol)) {\\n        throw new SyntaxError(`The \\\"${protocol}\\\" subprotocol is duplicated`);\\n      }\\n\\n      protocols.add(protocol);\\n      start = end = -1;\\n    } else {\\n      throw new SyntaxError(`Unexpected character at index ${i}`);\\n    }\\n  }\\n\\n  if (start === -1 || end !== -1) {\\n    throw new SyntaxError('Unexpected end of input');\\n  }\\n\\n  const protocol = header.slice(start, i);\\n\\n  if (protocols.has(protocol)) {\\n    throw new SyntaxError(`The \\\"${protocol}\\\" subprotocol is duplicated`);\\n  }\\n\\n  protocols.add(protocol);\\n  return protocols;\\n}\\n\\nmodule.exports = { parse };\\n\",\"filename\":\"/node_modules/ws/lib/subprotocol.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint no-unused-vars: [\\\"error\\\", { \\\"varsIgnorePattern\\\": \\\"^net|tls|https$\\\" }] */\\n\\n'use strict';\\n\\nconst EventEmitter = require('events');\\nconst http = require('http');\\nconst https = require('https');\\nconst net = require('net');\\nconst tls = require('tls');\\nconst { createHash } = require('crypto');\\n\\nconst extension = require('./extension');\\nconst PerMessageDeflate = require('./permessage-deflate');\\nconst subprotocol = require('./subprotocol');\\nconst WebSocket = require('./websocket');\\nconst { GUID, kWebSocket } = require('./constants');\\n\\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\\n\\nconst RUNNING = 0;\\nconst CLOSING = 1;\\nconst CLOSED = 2;\\n\\n/**\\n * Class representing a WebSocket server.\\n *\\n * @extends EventEmitter\\n */\\nclass WebSocketServer extends EventEmitter {\\n  /**\\n   * Create a `WebSocketServer` instance.\\n   *\\n   * @param {Object} options Configuration options\\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\\n   *     pending connections\\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\\n   *     track clients\\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\\n   * @param {String} [options.host] The hostname where to bind the server\\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\\n   *     size\\n   * @param {Boolean} [options.noServer=false] Enable no server mode\\n   * @param {String} [options.path] Accept only connections matching this path\\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\\n   *     permessage-deflate\\n   * @param {Number} [options.port] The port where to bind the server\\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\\n   *     server to use\\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\\n   *     not to skip UTF-8 validation for text and close messages\\n   * @param {Function} [options.verifyClient] A hook to reject connections\\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\\n   *     class to use. It must be the `WebSocket` class or class that extends it\\n   * @param {Function} [callback] A listener for the `listening` event\\n   */\\n  constructor(options, callback) {\\n    super();\\n\\n    options = {\\n      maxPayload: 100 * 1024 * 1024,\\n      skipUTF8Validation: false,\\n      perMessageDeflate: false,\\n      handleProtocols: null,\\n      clientTracking: true,\\n      verifyClient: null,\\n      noServer: false,\\n      backlog: null, // use default (511 as implemented in net.js)\\n      server: null,\\n      host: null,\\n      path: null,\\n      port: null,\\n      WebSocket,\\n      ...options\\n    };\\n\\n    if (\\n      (options.port == null && !options.server && !options.noServer) ||\\n      (options.port != null && (options.server || options.noServer)) ||\\n      (options.server && options.noServer)\\n    ) {\\n      throw new TypeError(\\n        'One and only one of the \\\"port\\\", \\\"server\\\", or \\\"noServer\\\" options ' +\\n          'must be specified'\\n      );\\n    }\\n\\n    if (options.port != null) {\\n      this._server = http.createServer((req, res) => {\\n        const body = http.STATUS_CODES[426];\\n\\n        res.writeHead(426, {\\n          'Content-Length': body.length,\\n          'Content-Type': 'text/plain'\\n        });\\n        res.end(body);\\n      });\\n      this._server.listen(\\n        options.port,\\n        options.host,\\n        options.backlog,\\n        callback\\n      );\\n    } else if (options.server) {\\n      this._server = options.server;\\n    }\\n\\n    if (this._server) {\\n      const emitConnection = this.emit.bind(this, 'connection');\\n\\n      this._removeListeners = addListeners(this._server, {\\n        listening: this.emit.bind(this, 'listening'),\\n        error: this.emit.bind(this, 'error'),\\n        upgrade: (req, socket, head) => {\\n          this.handleUpgrade(req, socket, head, emitConnection);\\n        }\\n      });\\n    }\\n\\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\\n    if (options.clientTracking) {\\n      this.clients = new Set();\\n      this._shouldEmitClose = false;\\n    }\\n\\n    this.options = options;\\n    this._state = RUNNING;\\n  }\\n\\n  /**\\n   * Returns the bound address, the address family name, and port of the server\\n   * as reported by the operating system if listening on an IP socket.\\n   * If the server is listening on a pipe or UNIX domain socket, the name is\\n   * returned as a string.\\n   *\\n   * @return {(Object|String|null)} The address of the server\\n   * @public\\n   */\\n  address() {\\n    if (this.options.noServer) {\\n      throw new Error('The server is operating in \\\"noServer\\\" mode');\\n    }\\n\\n    if (!this._server) return null;\\n    return this._server.address();\\n  }\\n\\n  /**\\n   * Stop the server from accepting new connections and emit the `'close'` event\\n   * when all existing connections are closed.\\n   *\\n   * @param {Function} [cb] A one-time listener for the `'close'` event\\n   * @public\\n   */\\n  close(cb) {\\n    if (this._state === CLOSED) {\\n      if (cb) {\\n        this.once('close', () => {\\n          cb(new Error('The server is not running'));\\n        });\\n      }\\n\\n      process.nextTick(emitClose, this);\\n      return;\\n    }\\n\\n    if (cb) this.once('close', cb);\\n\\n    if (this._state === CLOSING) return;\\n    this._state = CLOSING;\\n\\n    if (this.options.noServer || this.options.server) {\\n      if (this._server) {\\n        this._removeListeners();\\n        this._removeListeners = this._server = null;\\n      }\\n\\n      if (this.clients) {\\n        if (!this.clients.size) {\\n          process.nextTick(emitClose, this);\\n        } else {\\n          this._shouldEmitClose = true;\\n        }\\n      } else {\\n        process.nextTick(emitClose, this);\\n      }\\n    } else {\\n      const server = this._server;\\n\\n      this._removeListeners();\\n      this._removeListeners = this._server = null;\\n\\n      //\\n      // The HTTP/S server was created internally. Close it, and rely on its\\n      // `'close'` event.\\n      //\\n      server.close(() => {\\n        emitClose(this);\\n      });\\n    }\\n  }\\n\\n  /**\\n   * See if a given request should be handled by this server instance.\\n   *\\n   * @param {http.IncomingMessage} req Request object to inspect\\n   * @return {Boolean} `true` if the request is valid, else `false`\\n   * @public\\n   */\\n  shouldHandle(req) {\\n    if (this.options.path) {\\n      const index = req.url.indexOf('?');\\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\\n\\n      if (pathname !== this.options.path) return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Handle a HTTP Upgrade request.\\n   *\\n   * @param {http.IncomingMessage} req The request object\\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\\n   *     server and client\\n   * @param {Buffer} head The first packet of the upgraded stream\\n   * @param {Function} cb Callback\\n   * @public\\n   */\\n  handleUpgrade(req, socket, head, cb) {\\n    socket.on('error', socketOnError);\\n\\n    const key = req.headers['sec-websocket-key'];\\n    const version = +req.headers['sec-websocket-version'];\\n\\n    if (req.method !== 'GET') {\\n      const message = 'Invalid HTTP method';\\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\\n      return;\\n    }\\n\\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\\n      const message = 'Invalid Upgrade header';\\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\\n      return;\\n    }\\n\\n    if (!key || !keyRegex.test(key)) {\\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\\n      return;\\n    }\\n\\n    if (version !== 8 && version !== 13) {\\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\\n      return;\\n    }\\n\\n    if (!this.shouldHandle(req)) {\\n      abortHandshake(socket, 400);\\n      return;\\n    }\\n\\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\\n    let protocols = new Set();\\n\\n    if (secWebSocketProtocol !== undefined) {\\n      try {\\n        protocols = subprotocol.parse(secWebSocketProtocol);\\n      } catch (err) {\\n        const message = 'Invalid Sec-WebSocket-Protocol header';\\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\\n        return;\\n      }\\n    }\\n\\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\\n    const extensions = {};\\n\\n    if (\\n      this.options.perMessageDeflate &&\\n      secWebSocketExtensions !== undefined\\n    ) {\\n      const perMessageDeflate = new PerMessageDeflate(\\n        this.options.perMessageDeflate,\\n        true,\\n        this.options.maxPayload\\n      );\\n\\n      try {\\n        const offers = extension.parse(secWebSocketExtensions);\\n\\n        if (offers[PerMessageDeflate.extensionName]) {\\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\\n        }\\n      } catch (err) {\\n        const message =\\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\\n        return;\\n      }\\n    }\\n\\n    //\\n    // Optionally call external client verification handler.\\n    //\\n    if (this.options.verifyClient) {\\n      const info = {\\n        origin:\\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\\n        secure: !!(req.socket.authorized || req.socket.encrypted),\\n        req\\n      };\\n\\n      if (this.options.verifyClient.length === 2) {\\n        this.options.verifyClient(info, (verified, code, message, headers) => {\\n          if (!verified) {\\n            return abortHandshake(socket, code || 401, message, headers);\\n          }\\n\\n          this.completeUpgrade(\\n            extensions,\\n            key,\\n            protocols,\\n            req,\\n            socket,\\n            head,\\n            cb\\n          );\\n        });\\n        return;\\n      }\\n\\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\\n    }\\n\\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\\n  }\\n\\n  /**\\n   * Upgrade the connection to WebSocket.\\n   *\\n   * @param {Object} extensions The accepted extensions\\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\\n   * @param {Set} protocols The subprotocols\\n   * @param {http.IncomingMessage} req The request object\\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\\n   *     server and client\\n   * @param {Buffer} head The first packet of the upgraded stream\\n   * @param {Function} cb Callback\\n   * @throws {Error} If called more than once with the same socket\\n   * @private\\n   */\\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\\n    //\\n    // Destroy the socket if the client has already sent a FIN packet.\\n    //\\n    if (!socket.readable || !socket.writable) return socket.destroy();\\n\\n    if (socket[kWebSocket]) {\\n      throw new Error(\\n        'server.handleUpgrade() was called more than once with the same ' +\\n          'socket, possibly due to a misconfiguration'\\n      );\\n    }\\n\\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\\n\\n    const digest = createHash('sha1')\\n      .update(key + GUID)\\n      .digest('base64');\\n\\n    const headers = [\\n      'HTTP/1.1 101 Switching Protocols',\\n      'Upgrade: websocket',\\n      'Connection: Upgrade',\\n      `Sec-WebSocket-Accept: ${digest}`\\n    ];\\n\\n    const ws = new this.options.WebSocket(null);\\n\\n    if (protocols.size) {\\n      //\\n      // Optionally call external protocol selection handler.\\n      //\\n      const protocol = this.options.handleProtocols\\n        ? this.options.handleProtocols(protocols, req)\\n        : protocols.values().next().value;\\n\\n      if (protocol) {\\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\\n        ws._protocol = protocol;\\n      }\\n    }\\n\\n    if (extensions[PerMessageDeflate.extensionName]) {\\n      const params = extensions[PerMessageDeflate.extensionName].params;\\n      const value = extension.format({\\n        [PerMessageDeflate.extensionName]: [params]\\n      });\\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\\n      ws._extensions = extensions;\\n    }\\n\\n    //\\n    // Allow external modification/inspection of handshake headers.\\n    //\\n    this.emit('headers', headers, req);\\n\\n    socket.write(headers.concat('\\\\r\\\\n').join('\\\\r\\\\n'));\\n    socket.removeListener('error', socketOnError);\\n\\n    ws.setSocket(socket, head, {\\n      maxPayload: this.options.maxPayload,\\n      skipUTF8Validation: this.options.skipUTF8Validation\\n    });\\n\\n    if (this.clients) {\\n      this.clients.add(ws);\\n      ws.on('close', () => {\\n        this.clients.delete(ws);\\n\\n        if (this._shouldEmitClose && !this.clients.size) {\\n          process.nextTick(emitClose, this);\\n        }\\n      });\\n    }\\n\\n    cb(ws, req);\\n  }\\n}\\n\\nmodule.exports = WebSocketServer;\\n\\n/**\\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\\n * pairs.\\n *\\n * @param {EventEmitter} server The event emitter\\n * @param {Object.<String, Function>} map The listeners to add\\n * @return {Function} A function that will remove the added listeners when\\n *     called\\n * @private\\n */\\nfunction addListeners(server, map) {\\n  for (const event of Object.keys(map)) server.on(event, map[event]);\\n\\n  return function removeListeners() {\\n    for (const event of Object.keys(map)) {\\n      server.removeListener(event, map[event]);\\n    }\\n  };\\n}\\n\\n/**\\n * Emit a `'close'` event on an `EventEmitter`.\\n *\\n * @param {EventEmitter} server The event emitter\\n * @private\\n */\\nfunction emitClose(server) {\\n  server._state = CLOSED;\\n  server.emit('close');\\n}\\n\\n/**\\n * Handle socket errors.\\n *\\n * @private\\n */\\nfunction socketOnError() {\\n  this.destroy();\\n}\\n\\n/**\\n * Close the connection when preconditions are not fulfilled.\\n *\\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\\n * @param {Number} code The HTTP response status code\\n * @param {String} [message] The HTTP response body\\n * @param {Object} [headers] Additional HTTP response headers\\n * @private\\n */\\nfunction abortHandshake(socket, code, message, headers) {\\n  //\\n  // The socket is writable unless the user destroyed or ended it before calling\\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\\n  // error. Handling this does not make much sense as the worst that can happen\\n  // is that some of the data written by the user might be discarded due to the\\n  // call to `socket.end()` below, which triggers an `'error'` event that in\\n  // turn causes the socket to be destroyed.\\n  //\\n  message = message || http.STATUS_CODES[code];\\n  headers = {\\n    Connection: 'close',\\n    'Content-Type': 'text/html',\\n    'Content-Length': Buffer.byteLength(message),\\n    ...headers\\n  };\\n\\n  socket.once('finish', socket.destroy);\\n\\n  socket.end(\\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\\\r\\\\n` +\\n      Object.keys(headers)\\n        .map((h) => `${h}: ${headers[h]}`)\\n        .join('\\\\r\\\\n') +\\n      '\\\\r\\\\n\\\\r\\\\n' +\\n      message\\n  );\\n}\\n\\n/**\\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\\n * one listener for it, otherwise call `abortHandshake()`.\\n *\\n * @param {WebSocketServer} server The WebSocket server\\n * @param {http.IncomingMessage} req The request object\\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\\n * @param {Number} code The HTTP response status code\\n * @param {String} message The HTTP response body\\n * @private\\n */\\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\\n  if (server.listenerCount('wsClientError')) {\\n    const err = new Error(message);\\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\\n\\n    server.emit('wsClientError', err, socket, req);\\n  } else {\\n    abortHandshake(socket, code, message);\\n  }\\n}\\n\",\"filename\":\"/node_modules/ws/lib/websocket-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* eslint no-unused-vars: [\\\"error\\\", { \\\"varsIgnorePattern\\\": \\\"^Readable$\\\" }] */\\n\\n'use strict';\\n\\nconst EventEmitter = require('events');\\nconst https = require('https');\\nconst http = require('http');\\nconst net = require('net');\\nconst tls = require('tls');\\nconst { randomBytes, createHash } = require('crypto');\\nconst { Readable } = require('stream');\\nconst { URL } = require('url');\\n\\nconst PerMessageDeflate = require('./permessage-deflate');\\nconst Receiver = require('./receiver');\\nconst Sender = require('./sender');\\nconst {\\n  BINARY_TYPES,\\n  EMPTY_BUFFER,\\n  GUID,\\n  kForOnEventAttribute,\\n  kListener,\\n  kStatusCode,\\n  kWebSocket,\\n  NOOP\\n} = require('./constants');\\nconst {\\n  EventTarget: { addEventListener, removeEventListener }\\n} = require('./event-target');\\nconst { format, parse } = require('./extension');\\nconst { toBuffer } = require('./buffer-util');\\n\\nconst closeTimeout = 30 * 1000;\\nconst kAborted = Symbol('kAborted');\\nconst protocolVersions = [8, 13];\\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\\nconst subprotocolRegex = /^[!#$%&'*+\\\\-.0-9A-Z^_`|a-z~]+$/;\\n\\n/**\\n * Class representing a WebSocket.\\n *\\n * @extends EventEmitter\\n */\\nclass WebSocket extends EventEmitter {\\n  /**\\n   * Create a new `WebSocket`.\\n   *\\n   * @param {(String|URL)} address The URL to which to connect\\n   * @param {(String|String[])} [protocols] The subprotocols\\n   * @param {Object} [options] Connection options\\n   */\\n  constructor(address, protocols, options) {\\n    super();\\n\\n    this._binaryType = BINARY_TYPES[0];\\n    this._closeCode = 1006;\\n    this._closeFrameReceived = false;\\n    this._closeFrameSent = false;\\n    this._closeMessage = EMPTY_BUFFER;\\n    this._closeTimer = null;\\n    this._extensions = {};\\n    this._paused = false;\\n    this._protocol = '';\\n    this._readyState = WebSocket.CONNECTING;\\n    this._receiver = null;\\n    this._sender = null;\\n    this._socket = null;\\n\\n    if (address !== null) {\\n      this._bufferedAmount = 0;\\n      this._isServer = false;\\n      this._redirects = 0;\\n\\n      if (protocols === undefined) {\\n        protocols = [];\\n      } else if (!Array.isArray(protocols)) {\\n        if (typeof protocols === 'object' && protocols !== null) {\\n          options = protocols;\\n          protocols = [];\\n        } else {\\n          protocols = [protocols];\\n        }\\n      }\\n\\n      initAsClient(this, address, protocols, options);\\n    } else {\\n      this._isServer = true;\\n    }\\n  }\\n\\n  /**\\n   * This deviates from the WHATWG interface since ws doesn't support the\\n   * required default \\\"blob\\\" type (instead we define a custom \\\"nodebuffer\\\"\\n   * type).\\n   *\\n   * @type {String}\\n   */\\n  get binaryType() {\\n    return this._binaryType;\\n  }\\n\\n  set binaryType(type) {\\n    if (!BINARY_TYPES.includes(type)) return;\\n\\n    this._binaryType = type;\\n\\n    //\\n    // Allow to change `binaryType` on the fly.\\n    //\\n    if (this._receiver) this._receiver._binaryType = type;\\n  }\\n\\n  /**\\n   * @type {Number}\\n   */\\n  get bufferedAmount() {\\n    if (!this._socket) return this._bufferedAmount;\\n\\n    return this._socket._writableState.length + this._sender._bufferedBytes;\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  get extensions() {\\n    return Object.keys(this._extensions).join();\\n  }\\n\\n  /**\\n   * @type {Boolean}\\n   */\\n  get isPaused() {\\n    return this._paused;\\n  }\\n\\n  /**\\n   * @type {Function}\\n   */\\n  /* istanbul ignore next */\\n  get onclose() {\\n    return null;\\n  }\\n\\n  /**\\n   * @type {Function}\\n   */\\n  /* istanbul ignore next */\\n  get onerror() {\\n    return null;\\n  }\\n\\n  /**\\n   * @type {Function}\\n   */\\n  /* istanbul ignore next */\\n  get onopen() {\\n    return null;\\n  }\\n\\n  /**\\n   * @type {Function}\\n   */\\n  /* istanbul ignore next */\\n  get onmessage() {\\n    return null;\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  get protocol() {\\n    return this._protocol;\\n  }\\n\\n  /**\\n   * @type {Number}\\n   */\\n  get readyState() {\\n    return this._readyState;\\n  }\\n\\n  /**\\n   * @type {String}\\n   */\\n  get url() {\\n    return this._url;\\n  }\\n\\n  /**\\n   * Set up the socket and the internal resources.\\n   *\\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\\n   *     server and client\\n   * @param {Buffer} head The first packet of the upgraded stream\\n   * @param {Object} options Options object\\n   * @param {Function} [options.generateMask] The function used to generate the\\n   *     masking key\\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\\n   *     not to skip UTF-8 validation for text and close messages\\n   * @private\\n   */\\n  setSocket(socket, head, options) {\\n    const receiver = new Receiver({\\n      binaryType: this.binaryType,\\n      extensions: this._extensions,\\n      isServer: this._isServer,\\n      maxPayload: options.maxPayload,\\n      skipUTF8Validation: options.skipUTF8Validation\\n    });\\n\\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\\n    this._receiver = receiver;\\n    this._socket = socket;\\n\\n    receiver[kWebSocket] = this;\\n    socket[kWebSocket] = this;\\n\\n    receiver.on('conclude', receiverOnConclude);\\n    receiver.on('drain', receiverOnDrain);\\n    receiver.on('error', receiverOnError);\\n    receiver.on('message', receiverOnMessage);\\n    receiver.on('ping', receiverOnPing);\\n    receiver.on('pong', receiverOnPong);\\n\\n    socket.setTimeout(0);\\n    socket.setNoDelay();\\n\\n    if (head.length > 0) socket.unshift(head);\\n\\n    socket.on('close', socketOnClose);\\n    socket.on('data', socketOnData);\\n    socket.on('end', socketOnEnd);\\n    socket.on('error', socketOnError);\\n\\n    this._readyState = WebSocket.OPEN;\\n    this.emit('open');\\n  }\\n\\n  /**\\n   * Emit the `'close'` event.\\n   *\\n   * @private\\n   */\\n  emitClose() {\\n    if (!this._socket) {\\n      this._readyState = WebSocket.CLOSED;\\n      this.emit('close', this._closeCode, this._closeMessage);\\n      return;\\n    }\\n\\n    if (this._extensions[PerMessageDeflate.extensionName]) {\\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\\n    }\\n\\n    this._receiver.removeAllListeners();\\n    this._readyState = WebSocket.CLOSED;\\n    this.emit('close', this._closeCode, this._closeMessage);\\n  }\\n\\n  /**\\n   * Start a closing handshake.\\n   *\\n   *          +----------+   +-----------+   +----------+\\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\\n   *    |     +----------+   +-----------+   +----------+     |\\n   *          +----------+   +-----------+         |\\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\\n   *          +----------+   +-----------+   |\\n   *    |           |                        |   +---+        |\\n   *                +------------------------+-->|fin| - - - -\\n   *    |         +---+                      |   +---+\\n   *     - - - - -|fin|<---------------------+\\n   *              +---+\\n   *\\n   * @param {Number} [code] Status code explaining why the connection is closing\\n   * @param {(String|Buffer)} [data] The reason why the connection is\\n   *     closing\\n   * @public\\n   */\\n  close(code, data) {\\n    if (this.readyState === WebSocket.CLOSED) return;\\n    if (this.readyState === WebSocket.CONNECTING) {\\n      const msg = 'WebSocket was closed before the connection was established';\\n      return abortHandshake(this, this._req, msg);\\n    }\\n\\n    if (this.readyState === WebSocket.CLOSING) {\\n      if (\\n        this._closeFrameSent &&\\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\\n      ) {\\n        this._socket.end();\\n      }\\n\\n      return;\\n    }\\n\\n    this._readyState = WebSocket.CLOSING;\\n    this._sender.close(code, data, !this._isServer, (err) => {\\n      //\\n      // This error is handled by the `'error'` listener on the socket. We only\\n      // want to know if the close frame has been sent here.\\n      //\\n      if (err) return;\\n\\n      this._closeFrameSent = true;\\n\\n      if (\\n        this._closeFrameReceived ||\\n        this._receiver._writableState.errorEmitted\\n      ) {\\n        this._socket.end();\\n      }\\n    });\\n\\n    //\\n    // Specify a timeout for the closing handshake to complete.\\n    //\\n    this._closeTimer = setTimeout(\\n      this._socket.destroy.bind(this._socket),\\n      closeTimeout\\n    );\\n  }\\n\\n  /**\\n   * Pause the socket.\\n   *\\n   * @public\\n   */\\n  pause() {\\n    if (\\n      this.readyState === WebSocket.CONNECTING ||\\n      this.readyState === WebSocket.CLOSED\\n    ) {\\n      return;\\n    }\\n\\n    this._paused = true;\\n    this._socket.pause();\\n  }\\n\\n  /**\\n   * Send a ping.\\n   *\\n   * @param {*} [data] The data to send\\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\\n   * @param {Function} [cb] Callback which is executed when the ping is sent\\n   * @public\\n   */\\n  ping(data, mask, cb) {\\n    if (this.readyState === WebSocket.CONNECTING) {\\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\\n    }\\n\\n    if (typeof data === 'function') {\\n      cb = data;\\n      data = mask = undefined;\\n    } else if (typeof mask === 'function') {\\n      cb = mask;\\n      mask = undefined;\\n    }\\n\\n    if (typeof data === 'number') data = data.toString();\\n\\n    if (this.readyState !== WebSocket.OPEN) {\\n      sendAfterClose(this, data, cb);\\n      return;\\n    }\\n\\n    if (mask === undefined) mask = !this._isServer;\\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\\n  }\\n\\n  /**\\n   * Send a pong.\\n   *\\n   * @param {*} [data] The data to send\\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\\n   * @param {Function} [cb] Callback which is executed when the pong is sent\\n   * @public\\n   */\\n  pong(data, mask, cb) {\\n    if (this.readyState === WebSocket.CONNECTING) {\\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\\n    }\\n\\n    if (typeof data === 'function') {\\n      cb = data;\\n      data = mask = undefined;\\n    } else if (typeof mask === 'function') {\\n      cb = mask;\\n      mask = undefined;\\n    }\\n\\n    if (typeof data === 'number') data = data.toString();\\n\\n    if (this.readyState !== WebSocket.OPEN) {\\n      sendAfterClose(this, data, cb);\\n      return;\\n    }\\n\\n    if (mask === undefined) mask = !this._isServer;\\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\\n  }\\n\\n  /**\\n   * Resume the socket.\\n   *\\n   * @public\\n   */\\n  resume() {\\n    if (\\n      this.readyState === WebSocket.CONNECTING ||\\n      this.readyState === WebSocket.CLOSED\\n    ) {\\n      return;\\n    }\\n\\n    this._paused = false;\\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\\n  }\\n\\n  /**\\n   * Send a data message.\\n   *\\n   * @param {*} data The message to send\\n   * @param {Object} [options] Options object\\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\\n   *     text\\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\\n   *     `data`\\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\\n   *     last one\\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\\n   * @param {Function} [cb] Callback which is executed when data is written out\\n   * @public\\n   */\\n  send(data, options, cb) {\\n    if (this.readyState === WebSocket.CONNECTING) {\\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\\n    }\\n\\n    if (typeof options === 'function') {\\n      cb = options;\\n      options = {};\\n    }\\n\\n    if (typeof data === 'number') data = data.toString();\\n\\n    if (this.readyState !== WebSocket.OPEN) {\\n      sendAfterClose(this, data, cb);\\n      return;\\n    }\\n\\n    const opts = {\\n      binary: typeof data !== 'string',\\n      mask: !this._isServer,\\n      compress: true,\\n      fin: true,\\n      ...options\\n    };\\n\\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\\n      opts.compress = false;\\n    }\\n\\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\\n  }\\n\\n  /**\\n   * Forcibly close the connection.\\n   *\\n   * @public\\n   */\\n  terminate() {\\n    if (this.readyState === WebSocket.CLOSED) return;\\n    if (this.readyState === WebSocket.CONNECTING) {\\n      const msg = 'WebSocket was closed before the connection was established';\\n      return abortHandshake(this, this._req, msg);\\n    }\\n\\n    if (this._socket) {\\n      this._readyState = WebSocket.CLOSING;\\n      this._socket.destroy();\\n    }\\n  }\\n}\\n\\n/**\\n * @constant {Number} CONNECTING\\n * @memberof WebSocket\\n */\\nObject.defineProperty(WebSocket, 'CONNECTING', {\\n  enumerable: true,\\n  value: readyStates.indexOf('CONNECTING')\\n});\\n\\n/**\\n * @constant {Number} CONNECTING\\n * @memberof WebSocket.prototype\\n */\\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\\n  enumerable: true,\\n  value: readyStates.indexOf('CONNECTING')\\n});\\n\\n/**\\n * @constant {Number} OPEN\\n * @memberof WebSocket\\n */\\nObject.defineProperty(WebSocket, 'OPEN', {\\n  enumerable: true,\\n  value: readyStates.indexOf('OPEN')\\n});\\n\\n/**\\n * @constant {Number} OPEN\\n * @memberof WebSocket.prototype\\n */\\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\\n  enumerable: true,\\n  value: readyStates.indexOf('OPEN')\\n});\\n\\n/**\\n * @constant {Number} CLOSING\\n * @memberof WebSocket\\n */\\nObject.defineProperty(WebSocket, 'CLOSING', {\\n  enumerable: true,\\n  value: readyStates.indexOf('CLOSING')\\n});\\n\\n/**\\n * @constant {Number} CLOSING\\n * @memberof WebSocket.prototype\\n */\\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\\n  enumerable: true,\\n  value: readyStates.indexOf('CLOSING')\\n});\\n\\n/**\\n * @constant {Number} CLOSED\\n * @memberof WebSocket\\n */\\nObject.defineProperty(WebSocket, 'CLOSED', {\\n  enumerable: true,\\n  value: readyStates.indexOf('CLOSED')\\n});\\n\\n/**\\n * @constant {Number} CLOSED\\n * @memberof WebSocket.prototype\\n */\\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\\n  enumerable: true,\\n  value: readyStates.indexOf('CLOSED')\\n});\\n\\n[\\n  'binaryType',\\n  'bufferedAmount',\\n  'extensions',\\n  'isPaused',\\n  'protocol',\\n  'readyState',\\n  'url'\\n].forEach((property) => {\\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\\n});\\n\\n//\\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\\n//\\n['open', 'error', 'close', 'message'].forEach((method) => {\\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\\n    enumerable: true,\\n    get() {\\n      for (const listener of this.listeners(method)) {\\n        if (listener[kForOnEventAttribute]) return listener[kListener];\\n      }\\n\\n      return null;\\n    },\\n    set(handler) {\\n      for (const listener of this.listeners(method)) {\\n        if (listener[kForOnEventAttribute]) {\\n          this.removeListener(method, listener);\\n          break;\\n        }\\n      }\\n\\n      if (typeof handler !== 'function') return;\\n\\n      this.addEventListener(method, handler, {\\n        [kForOnEventAttribute]: true\\n      });\\n    }\\n  });\\n});\\n\\nWebSocket.prototype.addEventListener = addEventListener;\\nWebSocket.prototype.removeEventListener = removeEventListener;\\n\\nmodule.exports = WebSocket;\\n\\n/**\\n * Initialize a WebSocket client.\\n *\\n * @param {WebSocket} websocket The client to initialize\\n * @param {(String|URL)} address The URL to which to connect\\n * @param {Array} protocols The subprotocols\\n * @param {Object} [options] Connection options\\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\\n *     redirects\\n * @param {Function} [options.generateMask] The function used to generate the\\n *     masking key\\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\\n *     handshake request\\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\\n *     size\\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\\n *     allowed\\n * @param {String} [options.origin] Value of the `Origin` or\\n *     `Sec-WebSocket-Origin` header\\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\\n *     permessage-deflate\\n * @param {Number} [options.protocolVersion=13] Value of the\\n *     `Sec-WebSocket-Version` header\\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\\n *     not to skip UTF-8 validation for text and close messages\\n * @private\\n */\\nfunction initAsClient(websocket, address, protocols, options) {\\n  const opts = {\\n    protocolVersion: protocolVersions[1],\\n    maxPayload: 100 * 1024 * 1024,\\n    skipUTF8Validation: false,\\n    perMessageDeflate: true,\\n    followRedirects: false,\\n    maxRedirects: 10,\\n    ...options,\\n    createConnection: undefined,\\n    socketPath: undefined,\\n    hostname: undefined,\\n    protocol: undefined,\\n    timeout: undefined,\\n    method: 'GET',\\n    host: undefined,\\n    path: undefined,\\n    port: undefined\\n  };\\n\\n  if (!protocolVersions.includes(opts.protocolVersion)) {\\n    throw new RangeError(\\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\\n        `(supported versions: ${protocolVersions.join(', ')})`\\n    );\\n  }\\n\\n  let parsedUrl;\\n\\n  if (address instanceof URL) {\\n    parsedUrl = address;\\n    websocket._url = address.href;\\n  } else {\\n    try {\\n      parsedUrl = new URL(address);\\n    } catch (e) {\\n      throw new SyntaxError(`Invalid URL: ${address}`);\\n    }\\n\\n    websocket._url = address;\\n  }\\n\\n  const isSecure = parsedUrl.protocol === 'wss:';\\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\\n  let invalidUrlMessage;\\n\\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\\n    invalidUrlMessage =\\n      'The URL\\\\'s protocol must be one of \\\"ws:\\\", \\\"wss:\\\", or \\\"ws+unix:\\\"';\\n  } else if (isIpcUrl && !parsedUrl.pathname) {\\n    invalidUrlMessage = \\\"The URL's pathname is empty\\\";\\n  } else if (parsedUrl.hash) {\\n    invalidUrlMessage = 'The URL contains a fragment identifier';\\n  }\\n\\n  if (invalidUrlMessage) {\\n    const err = new SyntaxError(invalidUrlMessage);\\n\\n    if (websocket._redirects === 0) {\\n      throw err;\\n    } else {\\n      emitErrorAndClose(websocket, err);\\n      return;\\n    }\\n  }\\n\\n  const defaultPort = isSecure ? 443 : 80;\\n  const key = randomBytes(16).toString('base64');\\n  const request = isSecure ? https.request : http.request;\\n  const protocolSet = new Set();\\n  let perMessageDeflate;\\n\\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\\n  opts.defaultPort = opts.defaultPort || defaultPort;\\n  opts.port = parsedUrl.port || defaultPort;\\n  opts.host = parsedUrl.hostname.startsWith('[')\\n    ? parsedUrl.hostname.slice(1, -1)\\n    : parsedUrl.hostname;\\n  opts.headers = {\\n    ...opts.headers,\\n    'Sec-WebSocket-Version': opts.protocolVersion,\\n    'Sec-WebSocket-Key': key,\\n    Connection: 'Upgrade',\\n    Upgrade: 'websocket'\\n  };\\n  opts.path = parsedUrl.pathname + parsedUrl.search;\\n  opts.timeout = opts.handshakeTimeout;\\n\\n  if (opts.perMessageDeflate) {\\n    perMessageDeflate = new PerMessageDeflate(\\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\\n      false,\\n      opts.maxPayload\\n    );\\n    opts.headers['Sec-WebSocket-Extensions'] = format({\\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\\n    });\\n  }\\n  if (protocols.length) {\\n    for (const protocol of protocols) {\\n      if (\\n        typeof protocol !== 'string' ||\\n        !subprotocolRegex.test(protocol) ||\\n        protocolSet.has(protocol)\\n      ) {\\n        throw new SyntaxError(\\n          'An invalid or duplicated subprotocol was specified'\\n        );\\n      }\\n\\n      protocolSet.add(protocol);\\n    }\\n\\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\\n  }\\n  if (opts.origin) {\\n    if (opts.protocolVersion < 13) {\\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\\n    } else {\\n      opts.headers.Origin = opts.origin;\\n    }\\n  }\\n  if (parsedUrl.username || parsedUrl.password) {\\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\\n  }\\n\\n  if (isIpcUrl) {\\n    const parts = opts.path.split(':');\\n\\n    opts.socketPath = parts[0];\\n    opts.path = parts[1];\\n  }\\n\\n  let req;\\n\\n  if (opts.followRedirects) {\\n    if (websocket._redirects === 0) {\\n      websocket._originalIpc = isIpcUrl;\\n      websocket._originalSecure = isSecure;\\n      websocket._originalHostOrSocketPath = isIpcUrl\\n        ? opts.socketPath\\n        : parsedUrl.host;\\n\\n      const headers = options && options.headers;\\n\\n      //\\n      // Shallow copy the user provided options so that headers can be changed\\n      // without mutating the original object.\\n      //\\n      options = { ...options, headers: {} };\\n\\n      if (headers) {\\n        for (const [key, value] of Object.entries(headers)) {\\n          options.headers[key.toLowerCase()] = value;\\n        }\\n      }\\n    } else if (websocket.listenerCount('redirect') === 0) {\\n      const isSameHost = isIpcUrl\\n        ? websocket._originalIpc\\n          ? opts.socketPath === websocket._originalHostOrSocketPath\\n          : false\\n        : websocket._originalIpc\\n        ? false\\n        : parsedUrl.host === websocket._originalHostOrSocketPath;\\n\\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\\n        //\\n        // Match curl 7.77.0 behavior and drop the following headers. These\\n        // headers are also dropped when following a redirect to a subdomain.\\n        //\\n        delete opts.headers.authorization;\\n        delete opts.headers.cookie;\\n\\n        if (!isSameHost) delete opts.headers.host;\\n\\n        opts.auth = undefined;\\n      }\\n    }\\n\\n    //\\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\\n    // If the `Authorization` header is set, then there is nothing to do as it\\n    // will take precedence.\\n    //\\n    if (opts.auth && !options.headers.authorization) {\\n      options.headers.authorization =\\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\\n    }\\n\\n    req = websocket._req = request(opts);\\n\\n    if (websocket._redirects) {\\n      //\\n      // Unlike what is done for the `'upgrade'` event, no early exit is\\n      // triggered here if the user calls `websocket.close()` or\\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\\n      // is because the user can also call `request.destroy()` with an error\\n      // before calling `websocket.close()` or `websocket.terminate()` and this\\n      // would result in an error being emitted on the `request` object with no\\n      // `'error'` event listeners attached.\\n      //\\n      websocket.emit('redirect', websocket.url, req);\\n    }\\n  } else {\\n    req = websocket._req = request(opts);\\n  }\\n\\n  if (opts.timeout) {\\n    req.on('timeout', () => {\\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\\n    });\\n  }\\n\\n  req.on('error', (err) => {\\n    if (req === null || req[kAborted]) return;\\n\\n    req = websocket._req = null;\\n    emitErrorAndClose(websocket, err);\\n  });\\n\\n  req.on('response', (res) => {\\n    const location = res.headers.location;\\n    const statusCode = res.statusCode;\\n\\n    if (\\n      location &&\\n      opts.followRedirects &&\\n      statusCode >= 300 &&\\n      statusCode < 400\\n    ) {\\n      if (++websocket._redirects > opts.maxRedirects) {\\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\\n        return;\\n      }\\n\\n      req.abort();\\n\\n      let addr;\\n\\n      try {\\n        addr = new URL(location, address);\\n      } catch (e) {\\n        const err = new SyntaxError(`Invalid URL: ${location}`);\\n        emitErrorAndClose(websocket, err);\\n        return;\\n      }\\n\\n      initAsClient(websocket, addr, protocols, options);\\n    } else if (!websocket.emit('unexpected-response', req, res)) {\\n      abortHandshake(\\n        websocket,\\n        req,\\n        `Unexpected server response: ${res.statusCode}`\\n      );\\n    }\\n  });\\n\\n  req.on('upgrade', (res, socket, head) => {\\n    websocket.emit('upgrade', res);\\n\\n    //\\n    // The user may have closed the connection from a listener of the\\n    // `'upgrade'` event.\\n    //\\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\\n\\n    req = websocket._req = null;\\n\\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\\n      return;\\n    }\\n\\n    const digest = createHash('sha1')\\n      .update(key + GUID)\\n      .digest('base64');\\n\\n    if (res.headers['sec-websocket-accept'] !== digest) {\\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\\n      return;\\n    }\\n\\n    const serverProt = res.headers['sec-websocket-protocol'];\\n    let protError;\\n\\n    if (serverProt !== undefined) {\\n      if (!protocolSet.size) {\\n        protError = 'Server sent a subprotocol but none was requested';\\n      } else if (!protocolSet.has(serverProt)) {\\n        protError = 'Server sent an invalid subprotocol';\\n      }\\n    } else if (protocolSet.size) {\\n      protError = 'Server sent no subprotocol';\\n    }\\n\\n    if (protError) {\\n      abortHandshake(websocket, socket, protError);\\n      return;\\n    }\\n\\n    if (serverProt) websocket._protocol = serverProt;\\n\\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\\n\\n    if (secWebSocketExtensions !== undefined) {\\n      if (!perMessageDeflate) {\\n        const message =\\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\\n          'was requested';\\n        abortHandshake(websocket, socket, message);\\n        return;\\n      }\\n\\n      let extensions;\\n\\n      try {\\n        extensions = parse(secWebSocketExtensions);\\n      } catch (err) {\\n        const message = 'Invalid Sec-WebSocket-Extensions header';\\n        abortHandshake(websocket, socket, message);\\n        return;\\n      }\\n\\n      const extensionNames = Object.keys(extensions);\\n\\n      if (\\n        extensionNames.length !== 1 ||\\n        extensionNames[0] !== PerMessageDeflate.extensionName\\n      ) {\\n        const message = 'Server indicated an extension that was not requested';\\n        abortHandshake(websocket, socket, message);\\n        return;\\n      }\\n\\n      try {\\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\\n      } catch (err) {\\n        const message = 'Invalid Sec-WebSocket-Extensions header';\\n        abortHandshake(websocket, socket, message);\\n        return;\\n      }\\n\\n      websocket._extensions[PerMessageDeflate.extensionName] =\\n        perMessageDeflate;\\n    }\\n\\n    websocket.setSocket(socket, head, {\\n      generateMask: opts.generateMask,\\n      maxPayload: opts.maxPayload,\\n      skipUTF8Validation: opts.skipUTF8Validation\\n    });\\n  });\\n\\n  req.end();\\n}\\n\\n/**\\n * Emit the `'error'` and `'close'` events.\\n *\\n * @param {WebSocket} websocket The WebSocket instance\\n * @param {Error} The error to emit\\n * @private\\n */\\nfunction emitErrorAndClose(websocket, err) {\\n  websocket._readyState = WebSocket.CLOSING;\\n  websocket.emit('error', err);\\n  websocket.emitClose();\\n}\\n\\n/**\\n * Create a `net.Socket` and initiate a connection.\\n *\\n * @param {Object} options Connection options\\n * @return {net.Socket} The newly created socket used to start the connection\\n * @private\\n */\\nfunction netConnect(options) {\\n  options.path = options.socketPath;\\n  return net.connect(options);\\n}\\n\\n/**\\n * Create a `tls.TLSSocket` and initiate a connection.\\n *\\n * @param {Object} options Connection options\\n * @return {tls.TLSSocket} The newly created socket used to start the connection\\n * @private\\n */\\nfunction tlsConnect(options) {\\n  options.path = undefined;\\n\\n  if (!options.servername && options.servername !== '') {\\n    options.servername = net.isIP(options.host) ? '' : options.host;\\n  }\\n\\n  return tls.connect(options);\\n}\\n\\n/**\\n * Abort the handshake and emit an error.\\n *\\n * @param {WebSocket} websocket The WebSocket instance\\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\\n *     abort or the socket to destroy\\n * @param {String} message The error message\\n * @private\\n */\\nfunction abortHandshake(websocket, stream, message) {\\n  websocket._readyState = WebSocket.CLOSING;\\n\\n  const err = new Error(message);\\n  Error.captureStackTrace(err, abortHandshake);\\n\\n  if (stream.setHeader) {\\n    stream[kAborted] = true;\\n    stream.abort();\\n\\n    if (stream.socket && !stream.socket.destroyed) {\\n      //\\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\\n      // called after the request completed. See\\n      // https://github.com/websockets/ws/issues/1869.\\n      //\\n      stream.socket.destroy();\\n    }\\n\\n    process.nextTick(emitErrorAndClose, websocket, err);\\n  } else {\\n    stream.destroy(err);\\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\\n    stream.once('close', websocket.emitClose.bind(websocket));\\n  }\\n}\\n\\n/**\\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\\n *\\n * @param {WebSocket} websocket The WebSocket instance\\n * @param {*} [data] The data to send\\n * @param {Function} [cb] Callback\\n * @private\\n */\\nfunction sendAfterClose(websocket, data, cb) {\\n  if (data) {\\n    const length = toBuffer(data).length;\\n\\n    //\\n    // The `_bufferedAmount` property is used only when the peer is a client and\\n    // the opening handshake fails. Under these circumstances, in fact, the\\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\\n    // properties are set to `null`.\\n    //\\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\\n    else websocket._bufferedAmount += length;\\n  }\\n\\n  if (cb) {\\n    const err = new Error(\\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\\n        `(${readyStates[websocket.readyState]})`\\n    );\\n    cb(err);\\n  }\\n}\\n\\n/**\\n * The listener of the `Receiver` `'conclude'` event.\\n *\\n * @param {Number} code The status code\\n * @param {Buffer} reason The reason for closing\\n * @private\\n */\\nfunction receiverOnConclude(code, reason) {\\n  const websocket = this[kWebSocket];\\n\\n  websocket._closeFrameReceived = true;\\n  websocket._closeMessage = reason;\\n  websocket._closeCode = code;\\n\\n  if (websocket._socket[kWebSocket] === undefined) return;\\n\\n  websocket._socket.removeListener('data', socketOnData);\\n  process.nextTick(resume, websocket._socket);\\n\\n  if (code === 1005) websocket.close();\\n  else websocket.close(code, reason);\\n}\\n\\n/**\\n * The listener of the `Receiver` `'drain'` event.\\n *\\n * @private\\n */\\nfunction receiverOnDrain() {\\n  const websocket = this[kWebSocket];\\n\\n  if (!websocket.isPaused) websocket._socket.resume();\\n}\\n\\n/**\\n * The listener of the `Receiver` `'error'` event.\\n *\\n * @param {(RangeError|Error)} err The emitted error\\n * @private\\n */\\nfunction receiverOnError(err) {\\n  const websocket = this[kWebSocket];\\n\\n  if (websocket._socket[kWebSocket] !== undefined) {\\n    websocket._socket.removeListener('data', socketOnData);\\n\\n    //\\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\\n    // https://github.com/websockets/ws/issues/1940.\\n    //\\n    process.nextTick(resume, websocket._socket);\\n\\n    websocket.close(err[kStatusCode]);\\n  }\\n\\n  websocket.emit('error', err);\\n}\\n\\n/**\\n * The listener of the `Receiver` `'finish'` event.\\n *\\n * @private\\n */\\nfunction receiverOnFinish() {\\n  this[kWebSocket].emitClose();\\n}\\n\\n/**\\n * The listener of the `Receiver` `'message'` event.\\n *\\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\\n * @param {Boolean} isBinary Specifies whether the message is binary or not\\n * @private\\n */\\nfunction receiverOnMessage(data, isBinary) {\\n  this[kWebSocket].emit('message', data, isBinary);\\n}\\n\\n/**\\n * The listener of the `Receiver` `'ping'` event.\\n *\\n * @param {Buffer} data The data included in the ping frame\\n * @private\\n */\\nfunction receiverOnPing(data) {\\n  const websocket = this[kWebSocket];\\n\\n  websocket.pong(data, !websocket._isServer, NOOP);\\n  websocket.emit('ping', data);\\n}\\n\\n/**\\n * The listener of the `Receiver` `'pong'` event.\\n *\\n * @param {Buffer} data The data included in the pong frame\\n * @private\\n */\\nfunction receiverOnPong(data) {\\n  this[kWebSocket].emit('pong', data);\\n}\\n\\n/**\\n * Resume a readable stream\\n *\\n * @param {Readable} stream The readable stream\\n * @private\\n */\\nfunction resume(stream) {\\n  stream.resume();\\n}\\n\\n/**\\n * The listener of the `net.Socket` `'close'` event.\\n *\\n * @private\\n */\\nfunction socketOnClose() {\\n  const websocket = this[kWebSocket];\\n\\n  this.removeListener('close', socketOnClose);\\n  this.removeListener('data', socketOnData);\\n  this.removeListener('end', socketOnEnd);\\n\\n  websocket._readyState = WebSocket.CLOSING;\\n\\n  let chunk;\\n\\n  //\\n  // The close frame might not have been received or the `'end'` event emitted,\\n  // for example, if the socket was destroyed due to an error. Ensure that the\\n  // `receiver` stream is closed after writing any remaining buffered data to\\n  // it. If the readable side of the socket is in flowing mode then there is no\\n  // buffered data as everything has been already written and `readable.read()`\\n  // will return `null`. If instead, the socket is paused, any possible buffered\\n  // data will be read as a single chunk.\\n  //\\n  if (\\n    !this._readableState.endEmitted &&\\n    !websocket._closeFrameReceived &&\\n    !websocket._receiver._writableState.errorEmitted &&\\n    (chunk = websocket._socket.read()) !== null\\n  ) {\\n    websocket._receiver.write(chunk);\\n  }\\n\\n  websocket._receiver.end();\\n\\n  this[kWebSocket] = undefined;\\n\\n  clearTimeout(websocket._closeTimer);\\n\\n  if (\\n    websocket._receiver._writableState.finished ||\\n    websocket._receiver._writableState.errorEmitted\\n  ) {\\n    websocket.emitClose();\\n  } else {\\n    websocket._receiver.on('error', receiverOnFinish);\\n    websocket._receiver.on('finish', receiverOnFinish);\\n  }\\n}\\n\\n/**\\n * The listener of the `net.Socket` `'data'` event.\\n *\\n * @param {Buffer} chunk A chunk of data\\n * @private\\n */\\nfunction socketOnData(chunk) {\\n  if (!this[kWebSocket]._receiver.write(chunk)) {\\n    this.pause();\\n  }\\n}\\n\\n/**\\n * The listener of the `net.Socket` `'end'` event.\\n *\\n * @private\\n */\\nfunction socketOnEnd() {\\n  const websocket = this[kWebSocket];\\n\\n  websocket._readyState = WebSocket.CLOSING;\\n  websocket._receiver.end();\\n  this.end();\\n}\\n\\n/**\\n * The listener of the `net.Socket` `'error'` event.\\n *\\n * @private\\n */\\nfunction socketOnError() {\\n  const websocket = this[kWebSocket];\\n\\n  this.removeListener('error', socketOnError);\\n  this.on('error', NOOP);\\n\\n  if (websocket) {\\n    websocket._readyState = WebSocket.CLOSING;\\n    this.destroy();\\n  }\\n}\\n\",\"filename\":\"/node_modules/ws/lib/websocket.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar test = require('tape');\\nvar semver = require('semver');\\n\\nvar supportsPreserveSymlinks = require('../');\\nvar browser = require('../browser');\\n\\ntest('supportsPreserveSymlinks', function (t) {\\n\\tt.equal(typeof supportsPreserveSymlinks, 'boolean', 'is a boolean');\\n\\n\\tt.equal(browser, null, 'browser file is `null`');\\n\\tt.equal(\\n\\t\\tsupportsPreserveSymlinks,\\n\\t\\tnull,\\n\\t\\t'in a browser, is null',\\n\\t\\t{ skip: typeof window === 'undefined' }\\n\\t);\\n\\n\\tvar expected = semver.satisfies(process.version, '>= 6.2');\\n\\tt.equal(\\n\\t\\tsupportsPreserveSymlinks,\\n\\t\\texpected,\\n\\t\\t'is true in node v6.2+, false otherwise (actual: ' + supportsPreserveSymlinks + ', expected ' + expected + ')',\\n\\t\\t{ skip: typeof window !== 'undefined' }\\n\\t);\\n\\n\\tt.end();\\n});\\n\",\"filename\":\"/node_modules/supports-preserve-symlinks-flag/test/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":26.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { readFileSync } from \\\"fs\\\";\\nimport { config } from \\\"../config.js\\\";\\nimport { join } from \\\"path\\\";\\n\\nlet messageCounter = 0;\\n\\nexport function fileChangeEventToMsg({ path }) {\\n    return {\\n        \\\"jsonrpc\\\": \\\"2.0\\\",\\n        \\\"method\\\": \\\"pushFile\\\",\\n        \\\"params\\\": {\\n            \\\"server\\\": \\\"home\\\",\\n            \\\"filename\\\": addLeadingSlash(path),\\n            \\\"content\\\": readFileSync(join(config.get(\\\"scriptsFolder\\\"), path)).toString()\\n        },\\n        \\\"id\\\": messageCounter++\\n    }\\n}\\n\\nexport function fileRemovalEventToMsg({ path }) {\\n    return {\\n        \\\"jsonrpc\\\": \\\"2.0\\\",\\n        \\\"method\\\": \\\"deleteFile\\\",\\n        \\\"params\\\": {\\n            \\\"server\\\": \\\"home\\\",\\n            \\\"filename\\\": addLeadingSlash(path),\\n        },\\n        \\\"id\\\": messageCounter++\\n    }\\n}\\n\\nexport function requestDefinitionFile() {\\n    return {\\n        \\\"jsonrpc\\\": \\\"2.0\\\",\\n        \\\"method\\\": \\\"getDefinitionFile\\\",\\n        \\\"id\\\": messageCounter++\\n    }\\n}\\n\\nexport function requestFilenames() {\\n    return {\\n        \\\"jsonrpc\\\": \\\"2.0\\\",\\n        \\\"method\\\": \\\"getFileNames\\\",\\n        \\\"params\\\": {\\n            \\\"server\\\": \\\"home\\\",\\n        },\\n        \\\"id\\\": messageCounter++\\n    }\\n}\\n\\nfunction addLeadingSlash(path){\\n    const slashes = path.match('/');\\n    if (slashes)\\n        return `/${path}`\\n    else\\n        return path\\n}\\n\",\"filename\":\"/node_modules/bitburner-filesync/src/networking/messageGenerators.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":277}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WebSocketServer } from 'ws';\\nimport { config } from \\\"../config.js\\\";\\nimport { EventType } from \\\"../eventTypes.js\\\"\\nimport { requestDefinitionFile } from './messageGenerators.js';\\nimport { messageTracker } from \\\"./messageTracker.js\\\"\\n\\nexport function setupSocket(signaller) {\\n\\n    const wss = new WebSocketServer({ port: config.get(\\\"port\\\") });\\n\\n    wss.on('connection', function connection(ws) {\\n\\n        function sendMessage(msg) {\\n            messageTracker.push(msg);\\n            ws.send(JSON.stringify(msg));\\n        }\\n\\n        ws.on('message', (msg) => {\\n            signaller.emit(EventType.MessageReceived, msg);\\n        });\\n\\n        signaller.on(EventType.MessageSend, msg => {\\n            sendMessage(msg);\\n        });\\n\\n        signaller.trigger(EventType.ConnectionMade);\\n    });\\n\\n    return wss;\\n}\\n\",\"filename\":\"/node_modules/bitburner-filesync/src/networking/webSocket.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":278}},{\"ctor\":\"Script\",\"data\":{\"code\":\"class MessageTracker {\\n    data = new Map()\\n    #maxLength = 200\\n\\n    push(msg) {\\n        this.data.set(msg.id, msg);\\n\\n        if (this.data.size > this.#maxLength) {\\n            const [firstKey] = this.data.keys();\\n            this.data.delete(firstKey);\\n        }\\n    }\\n\\n    get(index) {\\n        return this.data.get(index);\\n    }\\n}\\n\\nexport const messageTracker = new MessageTracker();\",\"filename\":\"/node_modules/bitburner-filesync/src/networking/messageTracker.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { messageTracker } from \\\"./messageTracker.js\\\";\\nimport { writeFile } from \\\"fs\\\";\\nimport { config } from \\\"../config.js\\\";\\nimport { EventType } from \\\"../eventTypes.js\\\";\\nimport { fileChangeEventToMsg } from \\\"./messageGenerators.js\\\";\\n\\nexport function messageHandler(signaller, msg, paths) {\\n    let incoming;\\n\\n    try { incoming = JSON.parse(msg.toString()); }\\n    catch (err) { return console.log(err); }\\n    console.log(incoming)\\n    if (incoming.id == undefined) return;\\n\\n    if (incoming.result) {\\n        const request = messageTracker.get(incoming.id);\\n        if (request?.method &&\\n            request.method == \\\"getDefinitionFile\\\"\\n            && incoming.result) {\\n            writeFile(config.get(\\\"definitionFile\\\").location, incoming.result, (err) => {\\n                if (err) return console.log(err);\\n            });\\n        }\\n\\n        if (request?.method &&\\n            request.method == \\\"getFileNames\\\"\\n            && incoming.result) {\\n            const gameFiles = incoming.result.map(file => removeLeadingSlash(file));\\n\\n            paths.forEach((stats, fileName) => {\\n                if (!stats.isDirectory() && !gameFiles.includes(fileName))\\n                    signaller.emit(EventType.MessageSend, fileChangeEventToMsg({ path: fileName }));\\n            })\\n        }\\n    }\\n}\\n\\nfunction removeLeadingSlash(path) {\\n    const reg = /^\\\\//;\\n    return path.replace(reg, \\\"\\\")\\n}\",\"filename\":\"/node_modules/bitburner-filesync/src/networking/messageHandler.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":280}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'whatever';\\n\",\"filename\":\"/node_modules/resolve/test/dotdot/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'wtf';\\n\",\"filename\":\"/node_modules/resolve/test/precedence/aaa.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = '>_<';\\n\",\"filename\":\"/node_modules/resolve/test/precedence/bbb.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/foo.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/mug.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\\n * CJS and ESM environments.\\n *\\n * @license\\n * Copyright (c) 2016, Contributors\\n * SPDX-License-Identifier: ISC\\n */\\nimport { format } from 'util';\\nimport { readFileSync } from 'fs';\\nimport { normalize, resolve } from 'path';\\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\\nimport { YargsParser } from './yargs-parser.js';\\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\\n    : 10;\\nif (process && process.version) {\\n    const major = Number(process.version.match(/v([^.]+)/)[1]);\\n    if (major < minNodeVersion) {\\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\\n    }\\n}\\n// Creates a yargs-parser instance using Node.js standard libraries:\\nconst env = process ? process.env : {};\\nconst parser = new YargsParser({\\n    cwd: process.cwd,\\n    env: () => {\\n        return env;\\n    },\\n    format,\\n    normalize,\\n    resolve,\\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\\n    // we can exercise all the lines below:\\n    require: (path) => {\\n        if (typeof require !== 'undefined') {\\n            return require(path);\\n        }\\n        else if (path.match(/\\\\.json$/)) {\\n            return readFileSync(path, 'utf8');\\n        }\\n        else {\\n            throw Error('only .json config files are supported in ESM');\\n        }\\n    }\\n});\\nconst yargsParser = function Parser(args, opts) {\\n    const result = parser.parse(args.slice(), opts);\\n    return result.argv;\\n};\\nyargsParser.detailed = function (args, opts) {\\n    return parser.parse(args.slice(), opts);\\n};\\nyargsParser.camelCase = camelCase;\\nyargsParser.decamelize = decamelize;\\nyargsParser.looksLikeNumber = looksLikeNumber;\\nexport default yargsParser;\\n\",\"filename\":\"/node_modules/yargs-parser/build/lib/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":286}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @license\\n * Copyright (c) 2016, Contributors\\n * SPDX-License-Identifier: ISC\\n */\\nexport function camelCase(str) {\\n    // Handle the case where an argument is provided as camel case, e.g., fooBar.\\n    // by ensuring that the string isn't already mixed case:\\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\\n    if (!isCamelCase) {\\n        str = str.toLowerCase();\\n    }\\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\\n        return str;\\n    }\\n    else {\\n        let camelcase = '';\\n        let nextChrUpper = false;\\n        const leadingHyphens = str.match(/^-+/);\\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\\n            let chr = str.charAt(i);\\n            if (nextChrUpper) {\\n                nextChrUpper = false;\\n                chr = chr.toUpperCase();\\n            }\\n            if (i !== 0 && (chr === '-' || chr === '_')) {\\n                nextChrUpper = true;\\n            }\\n            else if (chr !== '-' && chr !== '_') {\\n                camelcase += chr;\\n            }\\n        }\\n        return camelcase;\\n    }\\n}\\nexport function decamelize(str, joinString) {\\n    const lowercase = str.toLowerCase();\\n    joinString = joinString || '-';\\n    let notCamelcase = '';\\n    for (let i = 0; i < str.length; i++) {\\n        const chrLower = lowercase.charAt(i);\\n        const chrString = str.charAt(i);\\n        if (chrLower !== chrString && i > 0) {\\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\\n        }\\n        else {\\n            notCamelcase += chrString;\\n        }\\n    }\\n    return notCamelcase;\\n}\\nexport function looksLikeNumber(x) {\\n    if (x === null || x === undefined)\\n        return false;\\n    // if loaded from config, may already be a number.\\n    if (typeof x === 'number')\\n        return true;\\n    // hexadecimal.\\n    if (/^0x[0-9a-f]+$/i.test(x))\\n        return true;\\n    // don't treat 0123 as a number; as it drops the leading '0'.\\n    if (/^0[^.]/.test(x))\\n        return false;\\n    return /^[-]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(e[-+]?\\\\d+)?$/.test(x);\\n}\\n\",\"filename\":\"/node_modules/yargs-parser/build/lib/string-utils.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @license\\n * Copyright (c) 2016, Contributors\\n * SPDX-License-Identifier: ISC\\n */\\n// take an un-split argv string and tokenize it.\\nexport function tokenizeArgString(argString) {\\n    if (Array.isArray(argString)) {\\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\\n    }\\n    argString = argString.trim();\\n    let i = 0;\\n    let prevC = null;\\n    let c = null;\\n    let opening = null;\\n    const args = [];\\n    for (let ii = 0; ii < argString.length; ii++) {\\n        prevC = c;\\n        c = argString.charAt(ii);\\n        // split on spaces unless we're in quotes.\\n        if (c === ' ' && !opening) {\\n            if (!(prevC === ' ')) {\\n                i++;\\n            }\\n            continue;\\n        }\\n        // don't split the string if we're in matching\\n        // opening or closing single and double quotes.\\n        if (c === opening) {\\n            opening = null;\\n        }\\n        else if ((c === \\\"'\\\" || c === '\\\"') && !opening) {\\n            opening = c;\\n        }\\n        if (!args[i])\\n            args[i] = '';\\n        args[i] += c;\\n    }\\n    return args;\\n}\\n\",\"filename\":\"/node_modules/yargs-parser/build/lib/tokenize-arg-string.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @license\\n * Copyright (c) 2016, Contributors\\n * SPDX-License-Identifier: ISC\\n */\\nexport var DefaultValuesForTypeKey;\\n(function (DefaultValuesForTypeKey) {\\n    DefaultValuesForTypeKey[\\\"BOOLEAN\\\"] = \\\"boolean\\\";\\n    DefaultValuesForTypeKey[\\\"STRING\\\"] = \\\"string\\\";\\n    DefaultValuesForTypeKey[\\\"NUMBER\\\"] = \\\"number\\\";\\n    DefaultValuesForTypeKey[\\\"ARRAY\\\"] = \\\"array\\\";\\n})(DefaultValuesForTypeKey || (DefaultValuesForTypeKey = {}));\\n\",\"filename\":\"/node_modules/yargs-parser/build/lib/yargs-parser-types.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @license\\n * Copyright (c) 2016, Contributors\\n * SPDX-License-Identifier: ISC\\n */\\nimport { tokenizeArgString } from './tokenize-arg-string.js';\\nimport { DefaultValuesForTypeKey } from './yargs-parser-types.js';\\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\\nlet mixin;\\nexport class YargsParser {\\n    constructor(_mixin) {\\n        mixin = _mixin;\\n    }\\n    parse(argsInput, options) {\\n        const opts = Object.assign({\\n            alias: undefined,\\n            array: undefined,\\n            boolean: undefined,\\n            config: undefined,\\n            configObjects: undefined,\\n            configuration: undefined,\\n            coerce: undefined,\\n            count: undefined,\\n            default: undefined,\\n            envPrefix: undefined,\\n            narg: undefined,\\n            normalize: undefined,\\n            string: undefined,\\n            number: undefined,\\n            __: undefined,\\n            key: undefined\\n        }, options);\\n        // allow a string argument to be passed in rather\\n        // than an argv array.\\n        const args = tokenizeArgString(argsInput);\\n        // aliases might have transitive relationships, normalize this.\\n        const aliases = combineAliases(Object.assign(Object.create(null), opts.alias));\\n        const configuration = Object.assign({\\n            'boolean-negation': true,\\n            'camel-case-expansion': true,\\n            'combine-arrays': false,\\n            'dot-notation': true,\\n            'duplicate-arguments-array': true,\\n            'flatten-duplicate-arrays': true,\\n            'greedy-arrays': true,\\n            'halt-at-non-option': false,\\n            'nargs-eats-options': false,\\n            'negation-prefix': 'no-',\\n            'parse-numbers': true,\\n            'parse-positional-numbers': true,\\n            'populate--': false,\\n            'set-placeholder-key': false,\\n            'short-option-groups': true,\\n            'strip-aliased': false,\\n            'strip-dashed': false,\\n            'unknown-options-as-args': false\\n        }, opts.configuration);\\n        const defaults = Object.assign(Object.create(null), opts.default);\\n        const configObjects = opts.configObjects || [];\\n        const envPrefix = opts.envPrefix;\\n        const notFlagsOption = configuration['populate--'];\\n        const notFlagsArgv = notFlagsOption ? '--' : '_';\\n        const newAliases = Object.create(null);\\n        const defaulted = Object.create(null);\\n        // allow a i18n handler to be passed in, default to a fake one (util.format).\\n        const __ = opts.__ || mixin.format;\\n        const flags = {\\n            aliases: Object.create(null),\\n            arrays: Object.create(null),\\n            bools: Object.create(null),\\n            strings: Object.create(null),\\n            numbers: Object.create(null),\\n            counts: Object.create(null),\\n            normalize: Object.create(null),\\n            configs: Object.create(null),\\n            nargs: Object.create(null),\\n            coercions: Object.create(null),\\n            keys: []\\n        };\\n        const negative = /^-([0-9]+(\\\\.[0-9]+)?|\\\\.[0-9]+)$/;\\n        const negatedBoolean = new RegExp('^--' + configuration['negation-prefix'] + '(.+)');\\n        [].concat(opts.array || []).filter(Boolean).forEach(function (opt) {\\n            const key = typeof opt === 'object' ? opt.key : opt;\\n            // assign to flags[bools|strings|numbers]\\n            const assignment = Object.keys(opt).map(function (key) {\\n                const arrayFlagKeys = {\\n                    boolean: 'bools',\\n                    string: 'strings',\\n                    number: 'numbers'\\n                };\\n                return arrayFlagKeys[key];\\n            }).filter(Boolean).pop();\\n            // assign key to be coerced\\n            if (assignment) {\\n                flags[assignment][key] = true;\\n            }\\n            flags.arrays[key] = true;\\n            flags.keys.push(key);\\n        });\\n        [].concat(opts.boolean || []).filter(Boolean).forEach(function (key) {\\n            flags.bools[key] = true;\\n            flags.keys.push(key);\\n        });\\n        [].concat(opts.string || []).filter(Boolean).forEach(function (key) {\\n            flags.strings[key] = true;\\n            flags.keys.push(key);\\n        });\\n        [].concat(opts.number || []).filter(Boolean).forEach(function (key) {\\n            flags.numbers[key] = true;\\n            flags.keys.push(key);\\n        });\\n        [].concat(opts.count || []).filter(Boolean).forEach(function (key) {\\n            flags.counts[key] = true;\\n            flags.keys.push(key);\\n        });\\n        [].concat(opts.normalize || []).filter(Boolean).forEach(function (key) {\\n            flags.normalize[key] = true;\\n            flags.keys.push(key);\\n        });\\n        if (typeof opts.narg === 'object') {\\n            Object.entries(opts.narg).forEach(([key, value]) => {\\n                if (typeof value === 'number') {\\n                    flags.nargs[key] = value;\\n                    flags.keys.push(key);\\n                }\\n            });\\n        }\\n        if (typeof opts.coerce === 'object') {\\n            Object.entries(opts.coerce).forEach(([key, value]) => {\\n                if (typeof value === 'function') {\\n                    flags.coercions[key] = value;\\n                    flags.keys.push(key);\\n                }\\n            });\\n        }\\n        if (typeof opts.config !== 'undefined') {\\n            if (Array.isArray(opts.config) || typeof opts.config === 'string') {\\n                ;\\n                [].concat(opts.config).filter(Boolean).forEach(function (key) {\\n                    flags.configs[key] = true;\\n                });\\n            }\\n            else if (typeof opts.config === 'object') {\\n                Object.entries(opts.config).forEach(([key, value]) => {\\n                    if (typeof value === 'boolean' || typeof value === 'function') {\\n                        flags.configs[key] = value;\\n                    }\\n                });\\n            }\\n        }\\n        // create a lookup table that takes into account all\\n        // combinations of aliases: {f: ['foo'], foo: ['f']}\\n        extendAliases(opts.key, aliases, opts.default, flags.arrays);\\n        // apply default values to all aliases.\\n        Object.keys(defaults).forEach(function (key) {\\n            (flags.aliases[key] || []).forEach(function (alias) {\\n                defaults[alias] = defaults[key];\\n            });\\n        });\\n        let error = null;\\n        checkConfiguration();\\n        let notFlags = [];\\n        const argv = Object.assign(Object.create(null), { _: [] });\\n        // TODO(bcoe): for the first pass at removing object prototype  we didn't\\n        // remove all prototypes from objects returned by this API, we might want\\n        // to gradually move towards doing so.\\n        const argvReturn = {};\\n        for (let i = 0; i < args.length; i++) {\\n            const arg = args[i];\\n            const truncatedArg = arg.replace(/^-{3,}/, '---');\\n            let broken;\\n            let key;\\n            let letters;\\n            let m;\\n            let next;\\n            let value;\\n            // any unknown option (except for end-of-options, \\\"--\\\")\\n            if (arg !== '--' && isUnknownOptionAsArg(arg)) {\\n                pushPositional(arg);\\n                // ---, ---=, ----, etc,\\n            }\\n            else if (truncatedArg.match(/---+(=|$)/)) {\\n                // options without key name are invalid.\\n                pushPositional(arg);\\n                continue;\\n                // -- separated by =\\n            }\\n            else if (arg.match(/^--.+=/) || (!configuration['short-option-groups'] && arg.match(/^-.+=/))) {\\n                // Using [\\\\s\\\\S] instead of . because js doesn't support the\\n                // 'dotall' regex modifier. See:\\n                // http://stackoverflow.com/a/1068308/13216\\n                m = arg.match(/^--?([^=]+)=([\\\\s\\\\S]*)$/);\\n                // arrays format = '--f=a b c'\\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\\n                    if (checkAllAliases(m[1], flags.arrays)) {\\n                        i = eatArray(i, m[1], args, m[2]);\\n                    }\\n                    else if (checkAllAliases(m[1], flags.nargs) !== false) {\\n                        // nargs format = '--f=monkey washing cat'\\n                        i = eatNargs(i, m[1], args, m[2]);\\n                    }\\n                    else {\\n                        setArg(m[1], m[2]);\\n                    }\\n                }\\n            }\\n            else if (arg.match(negatedBoolean) && configuration['boolean-negation']) {\\n                m = arg.match(negatedBoolean);\\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\\n                    key = m[1];\\n                    setArg(key, checkAllAliases(key, flags.arrays) ? [false] : false);\\n                }\\n                // -- separated by space.\\n            }\\n            else if (arg.match(/^--.+/) || (!configuration['short-option-groups'] && arg.match(/^-[^-]+/))) {\\n                m = arg.match(/^--?(.+)/);\\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\\n                    key = m[1];\\n                    if (checkAllAliases(key, flags.arrays)) {\\n                        // array format = '--foo a b c'\\n                        i = eatArray(i, key, args);\\n                    }\\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\\n                        // nargs format = '--foo a b c'\\n                        // should be truthy even if: flags.nargs[key] === 0\\n                        i = eatNargs(i, key, args);\\n                    }\\n                    else {\\n                        next = args[i + 1];\\n                        if (next !== undefined && (!next.match(/^-/) ||\\n                            next.match(negative)) &&\\n                            !checkAllAliases(key, flags.bools) &&\\n                            !checkAllAliases(key, flags.counts)) {\\n                            setArg(key, next);\\n                            i++;\\n                        }\\n                        else if (/^(true|false)$/.test(next)) {\\n                            setArg(key, next);\\n                            i++;\\n                        }\\n                        else {\\n                            setArg(key, defaultValue(key));\\n                        }\\n                    }\\n                }\\n                // dot-notation flag separated by '='.\\n            }\\n            else if (arg.match(/^-.\\\\..+=/)) {\\n                m = arg.match(/^-([^=]+)=([\\\\s\\\\S]*)$/);\\n                if (m !== null && Array.isArray(m) && m.length >= 3) {\\n                    setArg(m[1], m[2]);\\n                }\\n                // dot-notation flag separated by space.\\n            }\\n            else if (arg.match(/^-.\\\\..+/) && !arg.match(negative)) {\\n                next = args[i + 1];\\n                m = arg.match(/^-(.\\\\..+)/);\\n                if (m !== null && Array.isArray(m) && m.length >= 2) {\\n                    key = m[1];\\n                    if (next !== undefined && !next.match(/^-/) &&\\n                        !checkAllAliases(key, flags.bools) &&\\n                        !checkAllAliases(key, flags.counts)) {\\n                        setArg(key, next);\\n                        i++;\\n                    }\\n                    else {\\n                        setArg(key, defaultValue(key));\\n                    }\\n                }\\n            }\\n            else if (arg.match(/^-[^-]+/) && !arg.match(negative)) {\\n                letters = arg.slice(1, -1).split('');\\n                broken = false;\\n                for (let j = 0; j < letters.length; j++) {\\n                    next = arg.slice(j + 2);\\n                    if (letters[j + 1] && letters[j + 1] === '=') {\\n                        value = arg.slice(j + 3);\\n                        key = letters[j];\\n                        if (checkAllAliases(key, flags.arrays)) {\\n                            // array format = '-f=a b c'\\n                            i = eatArray(i, key, args, value);\\n                        }\\n                        else if (checkAllAliases(key, flags.nargs) !== false) {\\n                            // nargs format = '-f=monkey washing cat'\\n                            i = eatNargs(i, key, args, value);\\n                        }\\n                        else {\\n                            setArg(key, value);\\n                        }\\n                        broken = true;\\n                        break;\\n                    }\\n                    if (next === '-') {\\n                        setArg(letters[j], next);\\n                        continue;\\n                    }\\n                    // current letter is an alphabetic character and next value is a number\\n                    if (/[A-Za-z]/.test(letters[j]) &&\\n                        /^-?\\\\d+(\\\\.\\\\d*)?(e-?\\\\d+)?$/.test(next) &&\\n                        checkAllAliases(next, flags.bools) === false) {\\n                        setArg(letters[j], next);\\n                        broken = true;\\n                        break;\\n                    }\\n                    if (letters[j + 1] && letters[j + 1].match(/\\\\W/)) {\\n                        setArg(letters[j], next);\\n                        broken = true;\\n                        break;\\n                    }\\n                    else {\\n                        setArg(letters[j], defaultValue(letters[j]));\\n                    }\\n                }\\n                key = arg.slice(-1)[0];\\n                if (!broken && key !== '-') {\\n                    if (checkAllAliases(key, flags.arrays)) {\\n                        // array format = '-f a b c'\\n                        i = eatArray(i, key, args);\\n                    }\\n                    else if (checkAllAliases(key, flags.nargs) !== false) {\\n                        // nargs format = '-f a b c'\\n                        // should be truthy even if: flags.nargs[key] === 0\\n                        i = eatNargs(i, key, args);\\n                    }\\n                    else {\\n                        next = args[i + 1];\\n                        if (next !== undefined && (!/^(-|--)[^-]/.test(next) ||\\n                            next.match(negative)) &&\\n                            !checkAllAliases(key, flags.bools) &&\\n                            !checkAllAliases(key, flags.counts)) {\\n                            setArg(key, next);\\n                            i++;\\n                        }\\n                        else if (/^(true|false)$/.test(next)) {\\n                            setArg(key, next);\\n                            i++;\\n                        }\\n                        else {\\n                            setArg(key, defaultValue(key));\\n                        }\\n                    }\\n                }\\n            }\\n            else if (arg.match(/^-[0-9]$/) &&\\n                arg.match(negative) &&\\n                checkAllAliases(arg.slice(1), flags.bools)) {\\n                // single-digit boolean alias, e.g: xargs -0\\n                key = arg.slice(1);\\n                setArg(key, defaultValue(key));\\n            }\\n            else if (arg === '--') {\\n                notFlags = args.slice(i + 1);\\n                break;\\n            }\\n            else if (configuration['halt-at-non-option']) {\\n                notFlags = args.slice(i);\\n                break;\\n            }\\n            else {\\n                pushPositional(arg);\\n            }\\n        }\\n        // order of precedence:\\n        // 1. command line arg\\n        // 2. value from env var\\n        // 3. value from config file\\n        // 4. value from config objects\\n        // 5. configured default value\\n        applyEnvVars(argv, true); // special case: check env vars that point to config file\\n        applyEnvVars(argv, false);\\n        setConfig(argv);\\n        setConfigObjects();\\n        applyDefaultsAndAliases(argv, flags.aliases, defaults, true);\\n        applyCoercions(argv);\\n        if (configuration['set-placeholder-key'])\\n            setPlaceholderKeys(argv);\\n        // for any counts either not in args or without an explicit default, set to 0\\n        Object.keys(flags.counts).forEach(function (key) {\\n            if (!hasKey(argv, key.split('.')))\\n                setArg(key, 0);\\n        });\\n        // '--' defaults to undefined.\\n        if (notFlagsOption && notFlags.length)\\n            argv[notFlagsArgv] = [];\\n        notFlags.forEach(function (key) {\\n            argv[notFlagsArgv].push(key);\\n        });\\n        if (configuration['camel-case-expansion'] && configuration['strip-dashed']) {\\n            Object.keys(argv).filter(key => key !== '--' && key.includes('-')).forEach(key => {\\n                delete argv[key];\\n            });\\n        }\\n        if (configuration['strip-aliased']) {\\n            ;\\n            [].concat(...Object.keys(aliases).map(k => aliases[k])).forEach(alias => {\\n                if (configuration['camel-case-expansion'] && alias.includes('-')) {\\n                    delete argv[alias.split('.').map(prop => camelCase(prop)).join('.')];\\n                }\\n                delete argv[alias];\\n            });\\n        }\\n        // Push argument into positional array, applying numeric coercion:\\n        function pushPositional(arg) {\\n            const maybeCoercedNumber = maybeCoerceNumber('_', arg);\\n            if (typeof maybeCoercedNumber === 'string' || typeof maybeCoercedNumber === 'number') {\\n                argv._.push(maybeCoercedNumber);\\n            }\\n        }\\n        // how many arguments should we consume, based\\n        // on the nargs option?\\n        function eatNargs(i, key, args, argAfterEqualSign) {\\n            let ii;\\n            let toEat = checkAllAliases(key, flags.nargs);\\n            // NaN has a special meaning for the array type, indicating that one or\\n            // more values are expected.\\n            toEat = typeof toEat !== 'number' || isNaN(toEat) ? 1 : toEat;\\n            if (toEat === 0) {\\n                if (!isUndefined(argAfterEqualSign)) {\\n                    error = Error(__('Argument unexpected for: %s', key));\\n                }\\n                setArg(key, defaultValue(key));\\n                return i;\\n            }\\n            let available = isUndefined(argAfterEqualSign) ? 0 : 1;\\n            if (configuration['nargs-eats-options']) {\\n                // classic behavior, yargs eats positional and dash arguments.\\n                if (args.length - (i + 1) + available < toEat) {\\n                    error = Error(__('Not enough arguments following: %s', key));\\n                }\\n                available = toEat;\\n            }\\n            else {\\n                // nargs will not consume flag arguments, e.g., -abc, --foo,\\n                // and terminates when one is observed.\\n                for (ii = i + 1; ii < args.length; ii++) {\\n                    if (!args[ii].match(/^-[^0-9]/) || args[ii].match(negative) || isUnknownOptionAsArg(args[ii]))\\n                        available++;\\n                    else\\n                        break;\\n                }\\n                if (available < toEat)\\n                    error = Error(__('Not enough arguments following: %s', key));\\n            }\\n            let consumed = Math.min(available, toEat);\\n            if (!isUndefined(argAfterEqualSign) && consumed > 0) {\\n                setArg(key, argAfterEqualSign);\\n                consumed--;\\n            }\\n            for (ii = i + 1; ii < (consumed + i + 1); ii++) {\\n                setArg(key, args[ii]);\\n            }\\n            return (i + consumed);\\n        }\\n        // if an option is an array, eat all non-hyphenated arguments\\n        // following it... YUM!\\n        // e.g., --foo apple banana cat becomes [\\\"apple\\\", \\\"banana\\\", \\\"cat\\\"]\\n        function eatArray(i, key, args, argAfterEqualSign) {\\n            let argsToSet = [];\\n            let next = argAfterEqualSign || args[i + 1];\\n            // If both array and nargs are configured, enforce the nargs count:\\n            const nargsCount = checkAllAliases(key, flags.nargs);\\n            if (checkAllAliases(key, flags.bools) && !(/^(true|false)$/.test(next))) {\\n                argsToSet.push(true);\\n            }\\n            else if (isUndefined(next) ||\\n                (isUndefined(argAfterEqualSign) && /^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))) {\\n                // for keys without value ==> argsToSet remains an empty []\\n                // set user default value, if available\\n                if (defaults[key] !== undefined) {\\n                    const defVal = defaults[key];\\n                    argsToSet = Array.isArray(defVal) ? defVal : [defVal];\\n                }\\n            }\\n            else {\\n                // value in --option=value is eaten as is\\n                if (!isUndefined(argAfterEqualSign)) {\\n                    argsToSet.push(processValue(key, argAfterEqualSign));\\n                }\\n                for (let ii = i + 1; ii < args.length; ii++) {\\n                    if ((!configuration['greedy-arrays'] && argsToSet.length > 0) ||\\n                        (nargsCount && typeof nargsCount === 'number' && argsToSet.length >= nargsCount))\\n                        break;\\n                    next = args[ii];\\n                    if (/^-/.test(next) && !negative.test(next) && !isUnknownOptionAsArg(next))\\n                        break;\\n                    i = ii;\\n                    argsToSet.push(processValue(key, next));\\n                }\\n            }\\n            // If both array and nargs are configured, create an error if less than\\n            // nargs positionals were found. NaN has special meaning, indicating\\n            // that at least one value is required (more are okay).\\n            if (typeof nargsCount === 'number' && ((nargsCount && argsToSet.length < nargsCount) ||\\n                (isNaN(nargsCount) && argsToSet.length === 0))) {\\n                error = Error(__('Not enough arguments following: %s', key));\\n            }\\n            setArg(key, argsToSet);\\n            return i;\\n        }\\n        function setArg(key, val) {\\n            if (/-/.test(key) && configuration['camel-case-expansion']) {\\n                const alias = key.split('.').map(function (prop) {\\n                    return camelCase(prop);\\n                }).join('.');\\n                addNewAlias(key, alias);\\n            }\\n            const value = processValue(key, val);\\n            const splitKey = key.split('.');\\n            setKey(argv, splitKey, value);\\n            // handle populating aliases of the full key\\n            if (flags.aliases[key]) {\\n                flags.aliases[key].forEach(function (x) {\\n                    const keyProperties = x.split('.');\\n                    setKey(argv, keyProperties, value);\\n                });\\n            }\\n            // handle populating aliases of the first element of the dot-notation key\\n            if (splitKey.length > 1 && configuration['dot-notation']) {\\n                ;\\n                (flags.aliases[splitKey[0]] || []).forEach(function (x) {\\n                    let keyProperties = x.split('.');\\n                    // expand alias with nested objects in key\\n                    const a = [].concat(splitKey);\\n                    a.shift(); // nuke the old key.\\n                    keyProperties = keyProperties.concat(a);\\n                    // populate alias only if is not already an alias of the full key\\n                    // (already populated above)\\n                    if (!(flags.aliases[key] || []).includes(keyProperties.join('.'))) {\\n                        setKey(argv, keyProperties, value);\\n                    }\\n                });\\n            }\\n            // Set normalize getter and setter when key is in 'normalize' but isn't an array\\n            if (checkAllAliases(key, flags.normalize) && !checkAllAliases(key, flags.arrays)) {\\n                const keys = [key].concat(flags.aliases[key] || []);\\n                keys.forEach(function (key) {\\n                    Object.defineProperty(argvReturn, key, {\\n                        enumerable: true,\\n                        get() {\\n                            return val;\\n                        },\\n                        set(value) {\\n                            val = typeof value === 'string' ? mixin.normalize(value) : value;\\n                        }\\n                    });\\n                });\\n            }\\n        }\\n        function addNewAlias(key, alias) {\\n            if (!(flags.aliases[key] && flags.aliases[key].length)) {\\n                flags.aliases[key] = [alias];\\n                newAliases[alias] = true;\\n            }\\n            if (!(flags.aliases[alias] && flags.aliases[alias].length)) {\\n                addNewAlias(alias, key);\\n            }\\n        }\\n        function processValue(key, val) {\\n            // strings may be quoted, clean this up as we assign values.\\n            if (typeof val === 'string' &&\\n                (val[0] === \\\"'\\\" || val[0] === '\\\"') &&\\n                val[val.length - 1] === val[0]) {\\n                val = val.substring(1, val.length - 1);\\n            }\\n            // handle parsing boolean arguments --foo=true --bar false.\\n            if (checkAllAliases(key, flags.bools) || checkAllAliases(key, flags.counts)) {\\n                if (typeof val === 'string')\\n                    val = val === 'true';\\n            }\\n            let value = Array.isArray(val)\\n                ? val.map(function (v) { return maybeCoerceNumber(key, v); })\\n                : maybeCoerceNumber(key, val);\\n            // increment a count given as arg (either no value or value parsed as boolean)\\n            if (checkAllAliases(key, flags.counts) && (isUndefined(value) || typeof value === 'boolean')) {\\n                value = increment();\\n            }\\n            // Set normalized value when key is in 'normalize' and in 'arrays'\\n            if (checkAllAliases(key, flags.normalize) && checkAllAliases(key, flags.arrays)) {\\n                if (Array.isArray(val))\\n                    value = val.map((val) => { return mixin.normalize(val); });\\n                else\\n                    value = mixin.normalize(val);\\n            }\\n            return value;\\n        }\\n        function maybeCoerceNumber(key, value) {\\n            if (!configuration['parse-positional-numbers'] && key === '_')\\n                return value;\\n            if (!checkAllAliases(key, flags.strings) && !checkAllAliases(key, flags.bools) && !Array.isArray(value)) {\\n                const shouldCoerceNumber = looksLikeNumber(value) && configuration['parse-numbers'] && (Number.isSafeInteger(Math.floor(parseFloat(`${value}`))));\\n                if (shouldCoerceNumber || (!isUndefined(value) && checkAllAliases(key, flags.numbers))) {\\n                    value = Number(value);\\n                }\\n            }\\n            return value;\\n        }\\n        // set args from config.json file, this should be\\n        // applied last so that defaults can be applied.\\n        function setConfig(argv) {\\n            const configLookup = Object.create(null);\\n            // expand defaults/aliases, in-case any happen to reference\\n            // the config.json file.\\n            applyDefaultsAndAliases(configLookup, flags.aliases, defaults);\\n            Object.keys(flags.configs).forEach(function (configKey) {\\n                const configPath = argv[configKey] || configLookup[configKey];\\n                if (configPath) {\\n                    try {\\n                        let config = null;\\n                        const resolvedConfigPath = mixin.resolve(mixin.cwd(), configPath);\\n                        const resolveConfig = flags.configs[configKey];\\n                        if (typeof resolveConfig === 'function') {\\n                            try {\\n                                config = resolveConfig(resolvedConfigPath);\\n                            }\\n                            catch (e) {\\n                                config = e;\\n                            }\\n                            if (config instanceof Error) {\\n                                error = config;\\n                                return;\\n                            }\\n                        }\\n                        else {\\n                            config = mixin.require(resolvedConfigPath);\\n                        }\\n                        setConfigObject(config);\\n                    }\\n                    catch (ex) {\\n                        // Deno will receive a PermissionDenied error if an attempt is\\n                        // made to load config without the --allow-read flag:\\n                        if (ex.name === 'PermissionDenied')\\n                            error = ex;\\n                        else if (argv[configKey])\\n                            error = Error(__('Invalid JSON config file: %s', configPath));\\n                    }\\n                }\\n            });\\n        }\\n        // set args from config object.\\n        // it recursively checks nested objects.\\n        function setConfigObject(config, prev) {\\n            Object.keys(config).forEach(function (key) {\\n                const value = config[key];\\n                const fullKey = prev ? prev + '.' + key : key;\\n                // if the value is an inner object and we have dot-notation\\n                // enabled, treat inner objects in config the same as\\n                // heavily nested dot notations (foo.bar.apple).\\n                if (typeof value === 'object' && value !== null && !Array.isArray(value) && configuration['dot-notation']) {\\n                    // if the value is an object but not an array, check nested object\\n                    setConfigObject(value, fullKey);\\n                }\\n                else {\\n                    // setting arguments via CLI takes precedence over\\n                    // values within the config file.\\n                    if (!hasKey(argv, fullKey.split('.')) || (checkAllAliases(fullKey, flags.arrays) && configuration['combine-arrays'])) {\\n                        setArg(fullKey, value);\\n                    }\\n                }\\n            });\\n        }\\n        // set all config objects passed in opts\\n        function setConfigObjects() {\\n            if (typeof configObjects !== 'undefined') {\\n                configObjects.forEach(function (configObject) {\\n                    setConfigObject(configObject);\\n                });\\n            }\\n        }\\n        function applyEnvVars(argv, configOnly) {\\n            if (typeof envPrefix === 'undefined')\\n                return;\\n            const prefix = typeof envPrefix === 'string' ? envPrefix : '';\\n            const env = mixin.env();\\n            Object.keys(env).forEach(function (envVar) {\\n                if (prefix === '' || envVar.lastIndexOf(prefix, 0) === 0) {\\n                    // get array of nested keys and convert them to camel case\\n                    const keys = envVar.split('__').map(function (key, i) {\\n                        if (i === 0) {\\n                            key = key.substring(prefix.length);\\n                        }\\n                        return camelCase(key);\\n                    });\\n                    if (((configOnly && flags.configs[keys.join('.')]) || !configOnly) && !hasKey(argv, keys)) {\\n                        setArg(keys.join('.'), env[envVar]);\\n                    }\\n                }\\n            });\\n        }\\n        function applyCoercions(argv) {\\n            let coerce;\\n            const applied = new Set();\\n            Object.keys(argv).forEach(function (key) {\\n                if (!applied.has(key)) { // If we haven't already coerced this option via one of its aliases\\n                    coerce = checkAllAliases(key, flags.coercions);\\n                    if (typeof coerce === 'function') {\\n                        try {\\n                            const value = maybeCoerceNumber(key, coerce(argv[key]));\\n                            ([].concat(flags.aliases[key] || [], key)).forEach(ali => {\\n                                applied.add(ali);\\n                                argv[ali] = value;\\n                            });\\n                        }\\n                        catch (err) {\\n                            error = err;\\n                        }\\n                    }\\n                }\\n            });\\n        }\\n        function setPlaceholderKeys(argv) {\\n            flags.keys.forEach((key) => {\\n                // don't set placeholder keys for dot notation options 'foo.bar'.\\n                if (~key.indexOf('.'))\\n                    return;\\n                if (typeof argv[key] === 'undefined')\\n                    argv[key] = undefined;\\n            });\\n            return argv;\\n        }\\n        function applyDefaultsAndAliases(obj, aliases, defaults, canLog = false) {\\n            Object.keys(defaults).forEach(function (key) {\\n                if (!hasKey(obj, key.split('.'))) {\\n                    setKey(obj, key.split('.'), defaults[key]);\\n                    if (canLog)\\n                        defaulted[key] = true;\\n                    (aliases[key] || []).forEach(function (x) {\\n                        if (hasKey(obj, x.split('.')))\\n                            return;\\n                        setKey(obj, x.split('.'), defaults[key]);\\n                    });\\n                }\\n            });\\n        }\\n        function hasKey(obj, keys) {\\n            let o = obj;\\n            if (!configuration['dot-notation'])\\n                keys = [keys.join('.')];\\n            keys.slice(0, -1).forEach(function (key) {\\n                o = (o[key] || {});\\n            });\\n            const key = keys[keys.length - 1];\\n            if (typeof o !== 'object')\\n                return false;\\n            else\\n                return key in o;\\n        }\\n        function setKey(obj, keys, value) {\\n            let o = obj;\\n            if (!configuration['dot-notation'])\\n                keys = [keys.join('.')];\\n            keys.slice(0, -1).forEach(function (key) {\\n                // TODO(bcoe): in the next major version of yargs, switch to\\n                // Object.create(null) for dot notation:\\n                key = sanitizeKey(key);\\n                if (typeof o === 'object' && o[key] === undefined) {\\n                    o[key] = {};\\n                }\\n                if (typeof o[key] !== 'object' || Array.isArray(o[key])) {\\n                    // ensure that o[key] is an array, and that the last item is an empty object.\\n                    if (Array.isArray(o[key])) {\\n                        o[key].push({});\\n                    }\\n                    else {\\n                        o[key] = [o[key], {}];\\n                    }\\n                    // we want to update the empty object at the end of the o[key] array, so set o to that object\\n                    o = o[key][o[key].length - 1];\\n                }\\n                else {\\n                    o = o[key];\\n                }\\n            });\\n            // TODO(bcoe): in the next major version of yargs, switch to\\n            // Object.create(null) for dot notation:\\n            const key = sanitizeKey(keys[keys.length - 1]);\\n            const isTypeArray = checkAllAliases(keys.join('.'), flags.arrays);\\n            const isValueArray = Array.isArray(value);\\n            let duplicate = configuration['duplicate-arguments-array'];\\n            // nargs has higher priority than duplicate\\n            if (!duplicate && checkAllAliases(key, flags.nargs)) {\\n                duplicate = true;\\n                if ((!isUndefined(o[key]) && flags.nargs[key] === 1) || (Array.isArray(o[key]) && o[key].length === flags.nargs[key])) {\\n                    o[key] = undefined;\\n                }\\n            }\\n            if (value === increment()) {\\n                o[key] = increment(o[key]);\\n            }\\n            else if (Array.isArray(o[key])) {\\n                if (duplicate && isTypeArray && isValueArray) {\\n                    o[key] = configuration['flatten-duplicate-arrays'] ? o[key].concat(value) : (Array.isArray(o[key][0]) ? o[key] : [o[key]]).concat([value]);\\n                }\\n                else if (!duplicate && Boolean(isTypeArray) === Boolean(isValueArray)) {\\n                    o[key] = value;\\n                }\\n                else {\\n                    o[key] = o[key].concat([value]);\\n                }\\n            }\\n            else if (o[key] === undefined && isTypeArray) {\\n                o[key] = isValueArray ? value : [value];\\n            }\\n            else if (duplicate && !(o[key] === undefined ||\\n                checkAllAliases(key, flags.counts) ||\\n                checkAllAliases(key, flags.bools))) {\\n                o[key] = [o[key], value];\\n            }\\n            else {\\n                o[key] = value;\\n            }\\n        }\\n        // extend the aliases list with inferred aliases.\\n        function extendAliases(...args) {\\n            args.forEach(function (obj) {\\n                Object.keys(obj || {}).forEach(function (key) {\\n                    // short-circuit if we've already added a key\\n                    // to the aliases array, for example it might\\n                    // exist in both 'opts.default' and 'opts.key'.\\n                    if (flags.aliases[key])\\n                        return;\\n                    flags.aliases[key] = [].concat(aliases[key] || []);\\n                    // For \\\"--option-name\\\", also set argv.optionName\\n                    flags.aliases[key].concat(key).forEach(function (x) {\\n                        if (/-/.test(x) && configuration['camel-case-expansion']) {\\n                            const c = camelCase(x);\\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\\n                                flags.aliases[key].push(c);\\n                                newAliases[c] = true;\\n                            }\\n                        }\\n                    });\\n                    // For \\\"--optionName\\\", also set argv['option-name']\\n                    flags.aliases[key].concat(key).forEach(function (x) {\\n                        if (x.length > 1 && /[A-Z]/.test(x) && configuration['camel-case-expansion']) {\\n                            const c = decamelize(x, '-');\\n                            if (c !== key && flags.aliases[key].indexOf(c) === -1) {\\n                                flags.aliases[key].push(c);\\n                                newAliases[c] = true;\\n                            }\\n                        }\\n                    });\\n                    flags.aliases[key].forEach(function (x) {\\n                        flags.aliases[x] = [key].concat(flags.aliases[key].filter(function (y) {\\n                            return x !== y;\\n                        }));\\n                    });\\n                });\\n            });\\n        }\\n        function checkAllAliases(key, flag) {\\n            const toCheck = [].concat(flags.aliases[key] || [], key);\\n            const keys = Object.keys(flag);\\n            const setAlias = toCheck.find(key => keys.includes(key));\\n            return setAlias ? flag[setAlias] : false;\\n        }\\n        function hasAnyFlag(key) {\\n            const flagsKeys = Object.keys(flags);\\n            const toCheck = [].concat(flagsKeys.map(k => flags[k]));\\n            return toCheck.some(function (flag) {\\n                return Array.isArray(flag) ? flag.includes(key) : flag[key];\\n            });\\n        }\\n        function hasFlagsMatching(arg, ...patterns) {\\n            const toCheck = [].concat(...patterns);\\n            return toCheck.some(function (pattern) {\\n                const match = arg.match(pattern);\\n                return match && hasAnyFlag(match[1]);\\n            });\\n        }\\n        // based on a simplified version of the short flag group parsing logic\\n        function hasAllShortFlags(arg) {\\n            // if this is a negative number, or doesn't start with a single hyphen, it's not a short flag group\\n            if (arg.match(negative) || !arg.match(/^-[^-]+/)) {\\n                return false;\\n            }\\n            let hasAllFlags = true;\\n            let next;\\n            const letters = arg.slice(1).split('');\\n            for (let j = 0; j < letters.length; j++) {\\n                next = arg.slice(j + 2);\\n                if (!hasAnyFlag(letters[j])) {\\n                    hasAllFlags = false;\\n                    break;\\n                }\\n                if ((letters[j + 1] && letters[j + 1] === '=') ||\\n                    next === '-' ||\\n                    (/[A-Za-z]/.test(letters[j]) && /^-?\\\\d+(\\\\.\\\\d*)?(e-?\\\\d+)?$/.test(next)) ||\\n                    (letters[j + 1] && letters[j + 1].match(/\\\\W/))) {\\n                    break;\\n                }\\n            }\\n            return hasAllFlags;\\n        }\\n        function isUnknownOptionAsArg(arg) {\\n            return configuration['unknown-options-as-args'] && isUnknownOption(arg);\\n        }\\n        function isUnknownOption(arg) {\\n            arg = arg.replace(/^-{3,}/, '--');\\n            // ignore negative numbers\\n            if (arg.match(negative)) {\\n                return false;\\n            }\\n            // if this is a short option group and all of them are configured, it isn't unknown\\n            if (hasAllShortFlags(arg)) {\\n                return false;\\n            }\\n            // e.g. '--count=2'\\n            const flagWithEquals = /^-+([^=]+?)=[\\\\s\\\\S]*$/;\\n            // e.g. '-a' or '--arg'\\n            const normalFlag = /^-+([^=]+?)$/;\\n            // e.g. '-a-'\\n            const flagEndingInHyphen = /^-+([^=]+?)-$/;\\n            // e.g. '-abc123'\\n            const flagEndingInDigits = /^-+([^=]+?\\\\d+)$/;\\n            // e.g. '-a/usr/local'\\n            const flagEndingInNonWordCharacters = /^-+([^=]+?)\\\\W+.*$/;\\n            // check the different types of flag styles, including negatedBoolean, a pattern defined near the start of the parse method\\n            return !hasFlagsMatching(arg, flagWithEquals, negatedBoolean, normalFlag, flagEndingInHyphen, flagEndingInDigits, flagEndingInNonWordCharacters);\\n        }\\n        // make a best effort to pick a default value\\n        // for an option based on name and type.\\n        function defaultValue(key) {\\n            if (!checkAllAliases(key, flags.bools) &&\\n                !checkAllAliases(key, flags.counts) &&\\n                `${key}` in defaults) {\\n                return defaults[key];\\n            }\\n            else {\\n                return defaultForType(guessType(key));\\n            }\\n        }\\n        // return a default value, given the type of a flag.,\\n        function defaultForType(type) {\\n            const def = {\\n                [DefaultValuesForTypeKey.BOOLEAN]: true,\\n                [DefaultValuesForTypeKey.STRING]: '',\\n                [DefaultValuesForTypeKey.NUMBER]: undefined,\\n                [DefaultValuesForTypeKey.ARRAY]: []\\n            };\\n            return def[type];\\n        }\\n        // given a flag, enforce a default type.\\n        function guessType(key) {\\n            let type = DefaultValuesForTypeKey.BOOLEAN;\\n            if (checkAllAliases(key, flags.strings))\\n                type = DefaultValuesForTypeKey.STRING;\\n            else if (checkAllAliases(key, flags.numbers))\\n                type = DefaultValuesForTypeKey.NUMBER;\\n            else if (checkAllAliases(key, flags.bools))\\n                type = DefaultValuesForTypeKey.BOOLEAN;\\n            else if (checkAllAliases(key, flags.arrays))\\n                type = DefaultValuesForTypeKey.ARRAY;\\n            return type;\\n        }\\n        function isUndefined(num) {\\n            return num === undefined;\\n        }\\n        // check user configuration settings for inconsistencies\\n        function checkConfiguration() {\\n            // count keys should not be set as array/narg\\n            Object.keys(flags.counts).find(key => {\\n                if (checkAllAliases(key, flags.arrays)) {\\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.array.', key));\\n                    return true;\\n                }\\n                else if (checkAllAliases(key, flags.nargs)) {\\n                    error = Error(__('Invalid configuration: %s, opts.count excludes opts.narg.', key));\\n                    return true;\\n                }\\n                return false;\\n            });\\n        }\\n        return {\\n            aliases: Object.assign({}, flags.aliases),\\n            argv: Object.assign(argvReturn, argv),\\n            configuration: configuration,\\n            defaulted: Object.assign({}, defaulted),\\n            error: error,\\n            newAliases: Object.assign({}, newAliases)\\n        };\\n    }\\n}\\n// if any aliases reference each other, we should\\n// merge them together.\\nfunction combineAliases(aliases) {\\n    const aliasArrays = [];\\n    const combined = Object.create(null);\\n    let change = true;\\n    // turn alias lookup hash {key: ['alias1', 'alias2']} into\\n    // a simple array ['key', 'alias1', 'alias2']\\n    Object.keys(aliases).forEach(function (key) {\\n        aliasArrays.push([].concat(aliases[key], key));\\n    });\\n    // combine arrays until zero changes are\\n    // made in an iteration.\\n    while (change) {\\n        change = false;\\n        for (let i = 0; i < aliasArrays.length; i++) {\\n            for (let ii = i + 1; ii < aliasArrays.length; ii++) {\\n                const intersect = aliasArrays[i].filter(function (v) {\\n                    return aliasArrays[ii].indexOf(v) !== -1;\\n                });\\n                if (intersect.length) {\\n                    aliasArrays[i] = aliasArrays[i].concat(aliasArrays[ii]);\\n                    aliasArrays.splice(ii, 1);\\n                    change = true;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n    // map arrays back to the hash-lookup (de-dupe while\\n    // we're at it).\\n    aliasArrays.forEach(function (aliasArray) {\\n        aliasArray = aliasArray.filter(function (v, i, self) {\\n            return self.indexOf(v) === i;\\n        });\\n        const lastAlias = aliasArray.pop();\\n        if (lastAlias !== undefined && typeof lastAlias === 'string') {\\n            combined[lastAlias] = aliasArray;\\n        }\\n    });\\n    return combined;\\n}\\n// this function should only be called when a count is given as an arg\\n// it is NOT called to set a default value\\n// thus we can start the count at 1 instead of 0\\nfunction increment(orig) {\\n    return orig !== undefined ? orig + 1 : 1;\\n}\\n// TODO(bcoe): in the next major version of yargs, switch to\\n// Object.create(null) for dot notation:\\nfunction sanitizeKey(key) {\\n    if (key === '__proto__')\\n        return '___proto___';\\n    return key;\\n}\\n\",\"filename\":\"/node_modules/yargs-parser/build/lib/yargs-parser.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":290}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var x = require('..');\\nconsole.log(x);\\n\",\"filename\":\"/node_modules/resolve/test/dotdot/abc/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'okok';\\n\",\"filename\":\"/node_modules/resolve/test/precedence/aaa/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/pathfilter/deep_ref/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"console.log(require('./'));\\n\",\"filename\":\"/node_modules/resolve/test/precedence/aaa/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/browser_field/a.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"console.log(require('./')); // should throw\\n\",\"filename\":\"/node_modules/resolve/test/precedence/bbb/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/browser_field/b.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/baz/doom.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/baz/quux.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/dot_main/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/dot_slash_main/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// this is the actual main file 'index.js', not 'wrong.js' like the package.json would indicate\\nmodule.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/incorrect_main/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/false_main/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/malformed_package_json/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/other_path/root.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 42;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/same_names/foo.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var resolve = require('../../../');\\n\\nmodule.exports = function (t, cb) {\\n    resolve('mymodule', null, cb);\\n};\\n\",\"filename\":\"/node_modules/resolve/test/resolver/without_basedir/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = function (x) { return x * 100; };\\n\",\"filename\":\"/node_modules/resolve/test/module_dir/xmodules/aaa/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = function (n) { return n * 111; };\\n\",\"filename\":\"/node_modules/resolve/test/module_dir/zmodules/bbb/main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = function (x) { return x + 100; };\\n\",\"filename\":\"/node_modules/resolve/test/module_dir/ymodules/aaa/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'A';\\n\",\"filename\":\"/node_modules/resolve/test/node_path/x/aaa/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'B';\\n\",\"filename\":\"/node_modules/resolve/test/node_path/y/bbb/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'C';\\n\",\"filename\":\"/node_modules/resolve/test/node_path/x/ccc/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'CY';\\n\",\"filename\":\"/node_modules/resolve/test/node_path/y/ccc/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/other_path/lib/other-lib.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var a = require.resolve('buffer/').replace(process.cwd(), '$CWD');\\nvar b = require('resolve').sync('buffer/', { preserveSymlinks: true }).replace(process.cwd(), '$CWD');\\nvar c = require('resolve').sync('buffer/', { preserveSymlinks: false }).replace(process.cwd(), '$CWD');\\n\\nconsole.log(a, ': require.resolve, preserveSymlinks ' + (process.execArgv.indexOf('preserve-symlinks') > -1 ? 'true' : 'false'));\\nconsole.log(b, ': preserveSymlinks true');\\nconsole.log(c, ': preserveSymlinks false');\\n\\nif (a !== b && a !== c) {\\n    throw 'sync: no match';\\n}\\nconsole.log('sync: success! a matched either b or c\\\\n');\\n\",\"filename\":\"/node_modules/resolve/test/resolver/nested_symlinks/mylib/sync.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var a = require.resolve('buffer/').replace(process.cwd(), '$CWD');\\nvar b;\\nvar c;\\n\\nvar test = function test() {\\n    console.log(a, ': require.resolve, preserveSymlinks ' + (process.execArgv.indexOf('preserve-symlinks') > -1 ? 'true' : 'false'));\\n    console.log(b, ': preserveSymlinks true');\\n    console.log(c, ': preserveSymlinks false');\\n\\n    if (a !== b && a !== c) {\\n        throw 'async: no match';\\n    }\\n    console.log('async: success! a matched either b or c\\\\n');\\n};\\n\\nrequire('resolve')('buffer/', { preserveSymlinks: true }, function (err, result) {\\n    if (err) { throw err; }\\n    b = result.replace(process.cwd(), '$CWD');\\n    if (b && c) { test(); }\\n});\\nrequire('resolve')('buffer/', { preserveSymlinks: false }, function (err, result) {\\n    if (err) { throw err; }\\n    c = result.replace(process.cwd(), '$CWD');\\n    if (b && c) { test(); }\\n});\\n\\n\",\"filename\":\"/node_modules/resolve/test/resolver/nested_symlinks/mylib/async.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/quux/foo/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 1;\\n\",\"filename\":\"/node_modules/resolve/test/resolver/same_names/foo/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"module.exports = 'bar';\\n\",\"filename\":\"/node_modules/resolve/test/resolver/symlinked/package/bar.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/shadowed_core/node_modules/util/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/multirepo/packages/package-b/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/node_modules/resolve/test/resolver/symlinked/_/node_modules/foo.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"'use strict';\\n\\nvar assert = require('assert');\\nvar path = require('path');\\nvar resolve = require('resolve');\\n\\nvar basedir = __dirname + '/node_modules/@my-scope/package-b';\\n\\nvar expected = path.join(__dirname, '../../node_modules/jquery/dist/jquery.js');\\n\\n/*\\n * preserveSymlinks === false\\n * will search NPM package from\\n * - packages/package-b/node_modules\\n * - packages/node_modules\\n * - node_modules\\n */\\nassert.equal(resolve.sync('jquery', { basedir: basedir, preserveSymlinks: false }), expected);\\nassert.equal(resolve.sync('../../node_modules/jquery', { basedir: basedir, preserveSymlinks: false }), expected);\\n\\n/*\\n * preserveSymlinks === true\\n * will search NPM package from\\n * - packages/package-a/node_modules/@my-scope/packages/package-b/node_modules\\n * - packages/package-a/node_modules/@my-scope/packages/node_modules\\n * - packages/package-a/node_modules/@my-scope/node_modules\\n * - packages/package-a/node_modules/node_modules\\n * - packages/package-a/node_modules\\n * - packages/node_modules\\n * - node_modules\\n */\\nassert.equal(resolve.sync('jquery', { basedir: basedir, preserveSymlinks: true }), expected);\\nassert.equal(resolve.sync('../../../../../node_modules/jquery', { basedir: basedir, preserveSymlinks: true }), expected);\\n\\nconsole.log(' * all monorepo paths successfully resolved through symlinks');\\n\",\"filename\":\"/node_modules/resolve/test/resolver/multirepo/packages/package-a/index.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\nimport { traverse, traverseSearch } from \\\"lib/traverse\\\";\\r\\n\\r\\nlet logf;\\r\\nlet flags;\\r\\n\\r\\n/** @param {import(\\\"./src/NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n    logf = printSilent(ns);\\r\\n    flags = ns.flags([\\r\\n        [\\\"help\\\", false],\\r\\n        [\\\"h\\\", false],\\r\\n        [\\\"silent\\\", false],\\r\\n        [\\\"s\\\", false],\\r\\n    ]);\\r\\n    if (flags[\\\"help\\\"] || flags[\\\"h\\\"] || (flags[\\\"_\\\"] instanceof Array && flags[\\\"_\\\"].length == 0)) {\\r\\n        printHelp();\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let target = String(flags[\\\"_\\\"][0]);\\r\\n\\r\\n    const pathToTarget = traverseSearch(ns, ns.getHostname(), target);\\r\\n\\r\\n    if (pathToTarget.length == 0) {\\r\\n        logf(`ERROR: No path to target '${target}' was found.`);\\r\\n        return;\\r\\n    }\\r\\n    let msg = \\\"\\\";\\r\\n\\r\\n    for (const host of pathToTarget) {\\r\\n        if (host == \\\"home\\\") continue;\\r\\n        msg += \\\"connect \\\" + host + (host != target ? \\\"; \\\" : \\\"\\\");\\r\\n        //ns.singularity.connect(host);\\r\\n    }\\r\\n    logf(msg);\\r\\n}\\r\\n\\r\\nfunction isSilent() {\\r\\n    return flags[\\\"silent\\\"] || flags[\\\"s\\\"];\\r\\n}\\r\\n\\r\\nfunction printSilent(ns) {\\r\\n    return m => {\\r\\n        if (!isSilent()) ns.tprintf(m);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction printHelp() {\\r\\n    logf(\\\"INFO: Usage: run connect-remote.js server-to-connect\\\");\\r\\n    logf(\\\"INFO:\\\");\\r\\n    logf(\\\"INFO: flags:\\\");\\r\\n    logf(\\\"INFO: help:\\\\t\\\\tprint this message\\\");\\r\\n    logf(\\\"INFO: silent:\\\\tsuppress output\\\");\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * data (Object) – \\r\\n    args (string[]) – \\r\\n * @param {Object} data - general data about the game you might want to autocomplete. \\r\\n * @param {string[]} args - current arguments. Minus run script.js \\r\\n * @returns {string[]}\\r\\n */\\r\\nexport function autocomplete(data, args) {\\r\\n    return [...data.servers];\\r\\n}\",\"filename\":\"connect-remote.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constants.js\",\"url\":\"blob:file:///6a99c902-7b23-45f2-9dd2-539d6bd6fe57\",\"moduleSequenceNumber\":182},{\"filename\":\"/lib/traverse.js\",\"url\":\"blob:file:///38bbdbdd-cf2e-4c10-9c55-cbb2e7609645\",\"moduleSequenceNumber\":180},{\"filename\":\"connect-remote.js\",\"url\":\"blob:file:///1b18018d-79e1-405a-b7b4-32dd0f59547e\",\"moduleSequenceNumber\":2739}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"factions.txt\",\"text\":\"TODO:\\r\\nFix batcher to use RAM on other servers\\r\\n\\r\\nFactions\\r\\n- [x] Sector 12\\r\\n- [x] CyberSec\\r\\n- [x] Chongquing\\r\\n- [x] Ishima\\r\\n- [x] New Tokyo\\r\\n- [x] Slum Snakes\\r\\n- [x] Aveum\\r\\n- [x] Tetrads\\r\\n- [x] Tian Di Hui\\r\\n- [x] Volhaven\\r\\n- [x] NiteSec\\r\\n- [ ] Netburners\\r\\n- [ ] The Black Hand\\r\\n- [ ] BitRunners\\r\\n- [ ] Speakers for the Dead\\r\\n- [ ] The Dark Army\\r\\n- [ ] The Syndicate\\r\\n- [ ] The Covenant\\r\\n- [ ] Daedalus\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/node_modules/yargs-parser/LICENSE.txt\",\"text\":\"Copyright (c) 2016, Contributors\\n\\nPermission to use, copy, modify, and/or distribute this software\\nfor any purpose with or without fee is hereby granted, provided\\nthat the above copyright notice and this permission notice\\nappear in all copies.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES\\nOF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE\\nLIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES\\nOR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,\\nARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/node_modules/signal-js/dist/signal-js.min.js.LICENSE.txt\",\"text\":\"/*!\\n * \\n * signal-js - v3.0.0 - 2021-18-10\\n * https://github.com/JosephClay/signal-js\\n * Copyright (c) 2013-2021 Joseph Clay License: MIT\\n *\\n */\\n\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.2040000000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"46.8.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39019188244,\"moneyMax\":975479706100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1303,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-447827.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[200,107,35,84,182,30,28,54,19,68,18,69,150,8,56,126,77,169,45,187,197,20,38,133,170,84,103,199,95,127,20,191,64]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"38.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43511574828,\"moneyMax\":1087789370700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1278,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"9.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":18246528741,\"moneyMax\":456163218525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":972,\"serverGrowth\":78}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"17.1.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":30087477475,\"moneyMax\":752186936875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1151,\"serverGrowth\":81}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"12.0.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23078989267,\"moneyMax\":576974731675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1034,\"serverGrowth\":73}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452523.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"890532406\",69],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"29.4.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":23632352896,\"moneyMax\":590808822400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1164,\"serverGrowth\":66}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-161574.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,28],[4,11],[17,18],[24,33],[12,16],[12,19],[8,10],[25,30],[21,23],[25,31],[16,20],[18,21],[1,7],[14,24],[5,9],[4,5],[6,11],[21,23]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-860144-NewTokyo.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[121,[2,3,6,7,12,13,15,16,18,20,21,22]],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"9.2.5.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":14005990419,\"moneyMax\":350149760475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52479-Chongqing.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"619263251488\",42],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-692975-NewTokyo.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD TRASH DEBUG INBOX QUEUE\",12],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"17.7.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":15473855816,\"moneyMax\":386846395400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":985,\"serverGrowth\":84}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"38.9.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":26357562695,\"moneyMax\":658939067375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":956,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"80.4.8.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":1463558297,\"moneyMax\":36588957425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1017,\"serverGrowth\":98}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"16.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1214,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-55999-Chongqing.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,0,0,1,0],[0,0,0,1,1,0,0,0,0,0,0],[0,0,1,1,1,1,0,0,0,0,0],[0,0,1,0,0,0,0,0,1,0,0],[0,0,0,1,1,0,1,0,0,0,0],[1,1,1,0,1,0,1,0,0,0,0]],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-716704.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"L3333dddddddYvX557VNiiIID666666666677RRRRRRRRRRRx2244444444444ccniix1Cxrrr\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"80.0.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1104780879,\"moneyMax\":27619521975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1061,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-192856.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[132,100,101,33],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-789141-Chongqing.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,12],[5,14],[20,23],[7,14],[11,19],[6,8],[3,4],[12,13],[19,26],[19,29],[17,27],[1,11],[5,8],[17,21]],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-77903-Chongqing.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,1,0,1],[0,0,0,0,0,0,0,1,0,0,0],[0,1,0,1,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,1,0,0,0],[1,0,0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0,1,1,0],[1,0,0,0,0,0,0,1,0,0,1],[0,1,0,1,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0,1,0]],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"27.7.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":810939835,\"moneyMax\":20273495875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1043,\"serverGrowth\":48}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-243400.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,1,0],[0,0,0,0],[0,0,1,0],[0,1,0,0],[0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"27.9.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":636615396,\"moneyMax\":15915384900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":36}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-876947.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[56,154,3,145,125,173,91],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-305005-Ishima.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,-8,-4,8,-1,-8],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"35.7.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":632822580,\"moneyMax\":15820564500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":889,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-426765.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,13],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"66.6.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":714966240,\"moneyMax\":17874156000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":66}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-859189-NewTokyo.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,1,9,0,3,9,6,8,1,0,10,9],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"39.6.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":998619287,\"moneyMax\":24965482175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-650795.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,0],[0,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0],[0,0,0,1,0,0,1,1],[0,0,1,1,1,0,1,0],[0,1,0,0,1,1,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-469493-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))())(a)((())\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"71.5.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1195320244,\"moneyMax\":29883006100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":87}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"16.3.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":820554250,\"moneyMax\":20513856250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52259.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"41175180\",-34],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66194.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"3wcu555555555Mgds6rA6A6A6FwEq6A6A6FmvAAPFMiZPFMiZPFMi4VxMB3i4VxMB3DCDU41Bey4FEe\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-409352.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":7715328,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"77.4.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":521119722,\"moneyMax\":13027993050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"43.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":863978535,\"moneyMax\":21599463375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":71}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-702822.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[163,49,23,51,145,29,53,65,35,127,123,192,172,64,123,105,138,1,144,166,6,136,22,167,61,55,196,77,182,25,163],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-223653.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[1,2],[1,3],[4,6],[1,6],[3,5]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"25.5.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":780137773,\"moneyMax\":19503444325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":76}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-102226-Ishima.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,3],[7,8],[1,9],[4,8],[0,2],[2,9],[3,5],[3,8],[2,7],[2,4],[8,9],[0,9],[0,7]]],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"93.3.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1131502889,\"moneyMax\":28287572225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"53.6.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":945049064,\"moneyMax\":23626226600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-428159.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"92628620\",54],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-681091-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":4727288788583,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336963.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"24.3.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":1001258980,\"moneyMax\":25031474500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494058.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CLOUDTABLELOGINENTEREMAIL\",\"FIRMWARE\"],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-101169.cct\",\"type\":\"Total Ways to Sum\",\"data\":26,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"56.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":917492558,\"moneyMax\":22937313950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938150.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()((((a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"24.2.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":808796407,\"moneyMax\":20219910175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"56.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1446354465,\"moneyMax\":36158861625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-816493-Ishima.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,2,6],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"71.9.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1650384200,\"moneyMax\":41259605000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":771,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"89.3.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1148005768,\"moneyMax\":28700144200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":75}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"41.0.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1435426346,\"moneyMax\":35885658650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-986755.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,1,0,1,0,0],[0,0,0,0,1,0,0,0,0],[1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"12.8.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1019313413,\"moneyMax\":25482835325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-132305.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,4],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"12.6.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":798711394,\"moneyMax\":19967784850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":681,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-125088.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[91,146,162,82,110,24,27,75,192,157,191,21,160,26,120,7,66,172,72,22,183,111,11,70,24,80,75,151,118,99,70,2,172,12,19,63,166,3,46,161,200,49]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"91.6.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":637830727,\"moneyMax\":15945768175,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":487,\"serverGrowth\":40}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"32.5.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":702163475,\"moneyMax\":17554086875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"34.1.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":247135811,\"moneyMax\":6178395275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"62.7.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":216970774,\"moneyMax\":5424269350,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":389,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"93.5.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":964470226,\"moneyMax\":24111755650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":736,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"51.2.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":327108712,\"moneyMax\":8177717800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":458,\"serverGrowth\":58}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-289561.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[151,75,66,180,152,29,23,76,158,173,14,102,151,109,146,178,113,174,1,153,49,25,168,35,28,104,148,120,146,188,71,176],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408387-TianDiHui.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,12],[24,28],[7,11],[11,18],[17,20],[14,16],[4,11],[13,21],[8,14]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"18.6.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":564771760,\"moneyMax\":14119294000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":598,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-466945-Ishima.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8IKZ5BC6C715sApDJ591h730354JHaB383M6w562Ch611f461C848SxK1E0kU\",\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"76.0.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":357656358,\"moneyMax\":8941408950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":442,\"serverGrowth\":55}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112350.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8058\",26],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803377.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"21.4.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,36,648,312]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":371974.8390465553,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.373,\"onlineExpGained\":42648.29633063346,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":2,\"ramUsage\":2.5,\"server\":\"the-hub\",\"threads\":12,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///67be3665-8403-40ba-abb3-eea0533776cd\",\"moduleSequenceNumber\":344}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":187815042,\"moneyMax\":4695376050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":290,\"serverGrowth\":51}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-440381-Chongqing.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"PRINT ARRAY QUEUE CACHE CLOUD\",9],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997861-NewTokyo.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,7],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"3.1.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":225895297,\"moneyMax\":5647382425,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":368,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903177.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[3,2],[7,6,4],[4,8,2,3],[4,6,4,8,6],[1,2,7,4,9,6],[5,9,3,3,4,7,5],[6,6,3,5,8,9,7,5],[1,2,5,4,5,3,1,6,2]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404705.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[2,3],[3,5,1]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997771.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[125,[2,3,5,6,7,10,13,14,17,18,19,20]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74013.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"zeVRmeVRmeVRmEzjkvcg0Ezjkvcg0E6iIbN0H6o55WPw3KYAApV48WV48WV48WV48WV8WV4W1FNy6WNy6WNy6WNn4uNSuNSn\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"54.9.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":379,\"serverGrowth\":67}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"37.5.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":73076131,\"moneyMax\":1826903275,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":280,\"serverGrowth\":60}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249452.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"EMAIL ARRAY SHIFT VIRUS LOGIC\",22],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"45.9.7.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,4,54,26]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":31104.75961771035,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.373,\"onlineExpGained\":3565.0278666473837,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.409999997406,\"pid\":3,\"ramUsage\":2.5,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///1bdaf6d1-0459-46bb-9a3b-fffc2a3c5b79\",\"moduleSequenceNumber\":342}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///7e2a7cf3-ab16-4143-ad1a-17b6b33d1a8b\",\"moduleSequenceNumber\":345}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":5.987999999999457,\"minDifficulty\":1,\"moneyAvailable\":1346200.3348100048,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248961.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110100000000000100001110100110010001011000111000101110110010110\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-369316.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24019370242\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"46.6.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,324,150]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":184733.8530245038,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.373,\"onlineExpGained\":21126.091061614097,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.409999997406,\"pid\":4,\"ramUsage\":2.5,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///76a658cf-cffc-4b37-900f-3f612bfc6f08\",\"moduleSequenceNumber\":343}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///c2f8ffc6-d156-4bf5-936d-55a352eb0a49\",\"moduleSequenceNumber\":346}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.827999999999996,\"minDifficulty\":3,\"moneyAvailable\":6744639.245008182,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895615-Netburners.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"04Zooooddl4tttttttttttMMXDtt55555NNHHscKKkkHHHHHHHHHHVCCCCCCCCCtt333333333336r5555\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-403543.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHCLOUDLINUXDEBUGMODEM\",\"REALTIME\"],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-42257-Netburners.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0,1,1],[0,0,0,1,1,1,0,1,1,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,1,0,0,1,1,0],[1,1,0,1,0,0,0,0,0,1],[0,1,0,1,0,0,0,0,0,0],[0,1,0,1,0,0,0,1,0,0],[1,1,0,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"12.6.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,324,150]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":184733.8530245038,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.373,\"onlineExpGained\":21126.091061614097,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.409999997406,\"pid\":5,\"ramUsage\":2.5,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///30bf5398-16ef-4f7f-9956-49ae5f8597b5\",\"moduleSequenceNumber\":344}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///731b1e30-ed92-4dae-b4ff-b412477d2922\",\"moduleSequenceNumber\":347}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922762-NewTokyo.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[13,25,22,194,144,90,194,87,51,173,119,58,100,75,161,62,140,16,163,138,72,49,187,137,65,191,18,59,108,42,2,17,155,44,106,30,108,6,8,72,174]],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-631782.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[6,1],[8,5,1],[1,1,4,2],[4,8,5,4,6],[5,7,5,8,1,5],[8,6,1,5,5,9,6],[5,8,5,5,5,3,1,8],[6,3,4,2,3,5,5,1,7],[6,5,6,2,6,2,2,6,8,4],[2,1,5,7,2,9,6,1,2,6,1],[5,8,3,8,3,6,6,4,2,2,5,3]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19052.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"68FO8k0219R8MZDjJ5E03yrw9768MU3y56420e884KXFS92\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-423128.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"nBT2Q4vCg00000000g00000D000dz000A0zzzzzzzzzlKzzzzzzlKzKzKzKzKzKzKzqKURhzNrNWNrNWNrNWNb\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"34.8.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,318,156]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":184733.8539322655,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.374,\"onlineExpGained\":21126.091061614097,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":6,\"ramUsage\":2.5,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///af91336e-0c79-42ea-ae16-bcc87e9814f4\",\"moduleSequenceNumber\":345}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///6e1328db-5fe0-4aa2-bf95-830426f0ded3\",\"moduleSequenceNumber\":348}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974910.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,45,20]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"64.3.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,636,312]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":366903.15511425544,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.374,\"onlineExpGained\":41988.10598495802,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.009999997405,\"pid\":7,\"ramUsage\":2.5,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///fb3017f7-cebe-400b-b5b9-a308fefbf6cb\",\"moduleSequenceNumber\":346}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///3a524292-c99d-428e-b976-58ef1be206e0\",\"moduleSequenceNumber\":349}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"13.4.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,318,156]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":184733.8539322655,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.374,\"onlineExpGained\":21126.091061614097,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":8,\"ramUsage\":2.5,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///57b92872-758e-4af1-b6e8-5ede1dc66ec2\",\"moduleSequenceNumber\":347}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///2de8817e-5095-4406-9f3e-9fc268fb11fb\",\"moduleSequenceNumber\":350}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"1.2.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,36,648,300]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":368185.4314893932,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.374,\"onlineExpGained\":42120.14405409311,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":9,\"ramUsage\":2.5,\"server\":\"neo-net\",\"threads\":12,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///efea52c3-d7d7-4d6e-a96b-1e06b23c2703\",\"moduleSequenceNumber\":348}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///a385ef0a-be9e-47bc-85ef-2742853574a2\",\"moduleSequenceNumber\":351}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-633792.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"SHIFT TABLE FLASH ENTER EMAIL\",25],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814389-Chongqing.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1474\",68],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-625520.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[38,39,34,17,38,26,21,25,45,11,8,13],[47,47,11,48,37,34,25,34,36,44,23,49],[15,42,36,50,2,37,7,19,4,29,25,35],[49,48,33,44,15,30,24,27,12,23,40,35],[22,18,13,35,14,47,49,24,29,2,9,25],[21,31,13,32,17,25,45,27,50,36,43,26],[33,47,33,13,28,45,48,26,2,18,50,3],[7,46,41,7,23,37,12,16,8,21,41,38],[3,49,35,50,27,22,49,50,21,47,2,48],[12,11,21,34,19,48,33,33,29,14,21,9],[2,19,9,20,19,26,42,37,44,49,27,48],[11,20,4,19,17,39,26,1,25,24,37,27],[36,33,7,36,15,8,15,29,18,50,43,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"88.9.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,25,1300,650]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":751722.2919642064,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.375,\"onlineExpGained\":86099.82424850533,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.009999997405,\"pid\":10,\"ramUsage\":2.5,\"server\":\"silver-helix\",\"threads\":25,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///b5bfbf20-aecd-4e3d-a597-8520bf80ef74\",\"moduleSequenceNumber\":349}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///4ac47e20-9181-42f3-92e4-ab9ce17cdb74\",\"moduleSequenceNumber\":352}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"computek\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"64.2.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,12,324,150]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":183619.04103217743,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.375,\"onlineExpGained\":20994.05299247901,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":11,\"ramUsage\":2.5,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///e41b577d-f16c-4230-b5ee-8ecbafbdbe51\",\"moduleSequenceNumber\":350}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///32d40883-743c-4673-bc0d-3713167f933d\",\"moduleSequenceNumber\":353}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638178.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())))((aa)))((\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"36.2.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,12,324,150]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":183619.0419353545,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":20994.05299247901,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":12,\"ramUsage\":2.5,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///5038fb58-8b4e-46d4-a3c3-3801fc6423d4\",\"moduleSequenceNumber\":351}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///a7034084-37b3-45b1-9663-148a32c8e262\",\"moduleSequenceNumber\":354}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"41.5.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,636,300]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":362108.97829680337,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":41459.95370841767,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.009999997405,\"pid\":13,\"ramUsage\":2.5,\"server\":\"phantasy\",\"threads\":12,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///006e4ab0-e66e-4888-9f65-29521fe059ac\",\"moduleSequenceNumber\":352}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///6407e8ee-d440-4383-ab70-021aa53e4d73\",\"moduleSequenceNumber\":355}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-313347.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[106,14,32,176,170,120,163,139,169,76,122,83,123,170,49,10,140,59,49,11,22,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"99.1.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,636,300]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":362108.97829680337,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":41459.95370841767,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.009999997405,\"pid\":14,\"ramUsage\":2.5,\"server\":\"max-hardware\",\"threads\":12,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///06f18c7e-1acb-4f91-97d4-2cf556356698\",\"moduleSequenceNumber\":353}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///e690b462-7f06-4ff6-b9b7-fca3afc681d7\",\"moduleSequenceNumber\":356}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705574.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[100,[3,4,5,6,8,9,10,11]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-920534.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,7,1,3,3,3,0,5,1,2,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"2.4.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,24,648,300]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":367238.083870709,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":41988.10598495802,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":15,\"ramUsage\":2.5,\"server\":\"omega-net\",\"threads\":12,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///02ece894-d28c-4dc2-92f6-49c9ffddf238\",\"moduleSequenceNumber\":354}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///a31d812b-1edc-4f03-96a7-3f852457723c\",\"moduleSequenceNumber\":357}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":68674363,\"moneyMax\":1716859075,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":205,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-143931.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,11],[2,4],[22,31],[7,11],[20,24],[20,21],[12,21],[24,29],[3,4],[24,26]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-637278.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":109596075764366,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286033.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"HH7gggggggggg00RAAppppp33slvv4444fffffkk8566666UUUUUUUUUJJJJJJJZe\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"55.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":55496994,\"moneyMax\":1387424850,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":274,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-693765.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"66iiiiiiiiiiiiiiOOzz666666666666XXXXy44TTTTT00qcCCCCCCCCCCCCbbbbbbbb11jj224444444\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390751-Ishima.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FRAMEEMAILSHELLMACROTABLE\",\"MAINFRAME\"],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"72.1.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,12,648,300]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":365955.8074772326,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":41856.06791582293,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":16,\"ramUsage\":2.5,\"server\":\"iron-gym\",\"threads\":12,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///5276cec2-1470-4536-87a3-1bdcb43691df\",\"moduleSequenceNumber\":355}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///aed848fb-0914-45bf-a0fe-2b25beb1a3ed\",\"moduleSequenceNumber\":358}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"71.3.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":477,\"serverGrowth\":36}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-631014.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[0,4],[2,7],[1,5],[0,2],[0,3],[0,1],[2,5],[5,6],[6,7]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"87.3.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1077,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-809578-Chongqing.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[124,145,183,25,139,77],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915491.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"157185185111\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"26.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":764,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70044.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"42mg633557fyb559vTBLLZFQN136mDE4ij383alA5994SmELVXsd03DMB946X6mVec48\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89290-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[195,125,143,109,166,132,147,177,111,25,115,160,28,183,3,69,96]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-90008-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,1,0,0,0,0,0],[0,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,0,1,0,0,0],[1,0,0,1,0,0,0,0,1,0],[1,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-559754-NewTokyo.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[162,109,52,192,165,169,170,64,107,51,160,167,7,72,156,192,46,54,59],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"54.6.6.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-160089.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[7,7],[5,5,7],[8,3,7,5],[3,7,9,3,6],[4,8,3,2,7,6],[8,5,8,5,8,3,7],[7,9,1,8,9,9,3,1]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-278265-Chongqing.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,3,7,5,0,3,8,7,8,10,8,0,3,6,0,8,0,0,5,3,0,0,3,0],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-742301.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":58067283,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525255.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,7],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"66.0.2.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":363,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151230.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"qqqqqqqqqqqqqqTTXXWPPTTffLLLLLLLLLLLNNXE11bbv00HHqPPCCCCCCCCCCCEJJwwwD\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-157492-NewTokyo.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[136,[2,3,4,6,7,8,10,11]],\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"27.3.3.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":62.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,50,1300,625]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":746499.1018679366,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":85274.58631641103,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.009999997405,\"pid\":17,\"ramUsage\":2.5,\"server\":\"avmnite-02h\",\"threads\":25,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///6763a9a6-350e-4153-a7ad-40e4a1276792\",\"moduleSequenceNumber\":356}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///f9bda073-36aa-4d06-a57a-a4173b3aa0df\",\"moduleSequenceNumber\":359}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":204,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"12.4.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":537,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-488064.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(())aa\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"44.7.1.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,6,156,81]},\"filename\":\"/src/basic-hack-1.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":91809.52096767725,\"offlineMoneyMade\":0,\"offlineRunningTime\":139844.376,\"onlineExpGained\":10497.026496239505,\"onlineMoneyMade\":0,\"onlineRunningTime\":8570.209999997405,\"pid\":18,\"ramUsage\":2.5,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///3e2a61bf-7f90-4d3f-a2a0-ee981023fc83\",\"moduleSequenceNumber\":357}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//@ts-check\\r\\n/** @param {import(\\\"./NetscriptDefinitions\\\").NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet target = ns.args[0] || ns.getHostname();\\r\\n\\ttarget = String(target);\\r\\n\\r\\n\\tlet moneyThreshold = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\tlet securityThreshold = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\tns.nuke(target);\\r\\n\\t\\r\\n\\t// eslint-disable-next-line no-constant-condition\\r\\n\\twhile (true) {\\r\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThreshold) {\\r\\n\\t\\t\\tawait ns.weaken(target);\\r\\n\\t\\t}\\r\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThreshold) {\\r\\n\\t\\t\\tawait ns.grow(target);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tawait ns.hack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/basic-hack-1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/src/basic-hack-1.js\",\"url\":\"blob:file:///a685619a-1903-4b34-97ce-96ef36f22900\",\"moduleSequenceNumber\":360}],\"dependents\":[],\"ramUsage\":2.5,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-376223.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":768948119,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"2.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"62.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-743117.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"95.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.01,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":134.2676,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":183.2615,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":134.7467,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":297064.0183743433}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":134.7476,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":302645.97421886004}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":134.7475,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":297058.70955098484}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":71.4388,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":60.8962,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":134.2357,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":125231.93224604554}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":122.5839,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":119002.40605450238}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":105.0015,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":109603.13351111508}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":169.1953,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":340616.86510652653}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":128.4968,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":97.5175,\"isBanned\":false,\"isMember\":true,\"name\":\"Shadows of Anarchy\",\"playerReputation\":212128.22458871914}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"c\":\"connect\",\"exit\":\"home\",\"ana\":\"analyze\",\"s\":\"scan\",\"sa\":\"scan-analyze\",\"basic-hack\":\"run src/basic-hack-1.js -t 50\",\"infsell\":\"run src/automated-infiltration.js --sell\",\"infrep\":\"run src/automated-infiltration.js --rep\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":120,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"hh:mm:ss\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":200,\"MaxPortCapacity\":100,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-22,\"y\":128,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\"}","VersionSave":"29","AllGangsSave":"","LastExportBonus":"1674162249530","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}